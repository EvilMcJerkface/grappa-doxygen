<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>Addressing.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_addressing_8hpp</filename>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <class kind="class">GlobalAddress</class>
    <class kind="struct">LocalIterator</class>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>BLOCK_SIZE</name>
      <anchorfile>_addressing_8hpp.html</anchorfile>
      <anchor>ad51ded0bbd705f02f73fc60c0b721ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_BLOCK_ALIGNED</name>
      <anchorfile>_addressing_8hpp.html</anchorfile>
      <anchor>afaa63c61d977e4a5416bcd7762f1fb55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Pool</name>
      <anchorfile>_addressing_8hpp.html</anchorfile>
      <anchor>a490ec7a309bd56c082a7c9e4dd738a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>gaeead849cdf965a0bc4f0accf096e66b6</anchor>
      <arglist>(const GlobalAddress&lt; T &gt; &amp;t, ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>gae2c394b001322028c94daf7c883c6173</anchor>
      <arglist>(const GlobalAddress&lt; T &gt; &amp;t, ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>ptrdiff_t</type>
      <name>operator-</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga541389b4e363bf01b4b0e9ed7795a20a</anchor>
      <arglist>(const GlobalAddress&lt; T &gt; &amp;t, const GlobalAddress&lt; T &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>ptrdiff_t</type>
      <name>operator-&lt; char &gt;</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga02b83a095a10c1d97f9add500d9469b6</anchor>
      <arglist>(const GlobalAddress&lt; char &gt; &amp;t, const GlobalAddress&lt; char &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>make_global</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga1e59ed1442678e969abd5d48d3b201b5</anchor>
      <arglist>(T *t, Core n=global_communicator.mycore)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>make_linear</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga02b820d58225c1e85b8720ddc6bc302c</anchor>
      <arglist>(T *t)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga35726ea1da86d2da1316d5879384f3ff</anchor>
      <arglist>(std::ostream &amp;o, const GlobalAddress&lt; T &gt; &amp;ga)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; M &gt;</type>
      <name>global_pointer_to_member</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga04f633209f68d7b4e693b5daca5cb2e8</anchor>
      <arglist>(const GlobalAddress&lt; T &gt; t, const M T::*m)</arglist>
    </member>
    <member kind="function">
      <type>LocalIterator&lt; T &gt;</type>
      <name>iterate_local</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga03416da22fab8a809225f2a903eaa0d0</anchor>
      <arglist>(GlobalAddress&lt; T &gt; base, size_t nelem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Aggregator.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_aggregator_8cpp</filename>
    <includes id="_aggregator_8hpp" name="Aggregator.hpp" local="yes" imported="no">Aggregator.hpp</includes>
    <includes id="_grappa_8hpp" name="Grappa.hpp" local="yes" imported="no">Grappa.hpp</includes>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a20f1ffc9506ce3245f5e40eed824724b</anchor>
      <arglist>(aggregator_autoflush_ticks, 50000,&quot;number of ticks to wait before autoflushing aggregated active messages&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a00e1cb00368226fa5dd2e20e7dfb58fe</anchor>
      <arglist>(aggregator_max_flush, 0,&quot;flush no more than this many buffers per poll (0 for unlimited)&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_bool</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>ab1b16aff60434aa880b1ea243933166e</anchor>
      <arglist>(aggregator_enable, true,&quot;should we aggregate packets or just send them?&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_bool</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a3ce2274b2761cc08fcc029e374e0ab03</anchor>
      <arglist>(flush_on_idle, true,&quot;flush all aggregated messages there&apos;s nothing better to do&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>ae752fb4408d7ffb0ba88dba71d9062dd</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_0_to_255_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a5f8791bd54291ff9514c76914f1299b2</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_256_to_511_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a3628e89a34719a797e4699e10968da90</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_512_to_767_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a3d8b097390564826699abaa131f25418</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_768_to_1023_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>aee8e3ed5a9606bbee0d9a22533fda179</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_1024_to_1279_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a229fd089c87304121603aded8a028d95</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_1280_to_1535_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>af6b3ff279aeb20620ee81efb5fb9e06b</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_1536_to_1791_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>ae4f45481b8b8a3f3a80db67c1af76908</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_1792_to_2047_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a9d7c61979000e7a05080598575eae8d2</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_2048_to_2303_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>ad7e4bf27db88ffa98bc21360240cb5ca</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_2304_to_2559_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a95eeea17fd2d83c09d6190fd67442d94</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_2560_to_2815_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a5cde1287a73f1d055ad9314f966896c2</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_2816_to_3071_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a4210797abc258613c2e68924fdc97d70</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_3072_to_3327_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a380e471dc6991cb1028bc48ec747961f</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_3328_to_3583_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a5964d8c7ac43be9f4374911468c55596</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_3584_to_3839_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a47c41a75f861a69a1b64e9202aa1502d</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_3840_to_4095_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>ac9760242c0c9de77e4fea7d2cd7d37dc</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_messages_aggregated_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>aa0ce066f5c8ec3e38e32caf376419abc</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_bytes_aggregated_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a04c08d853cdeaa6262cafe6a50a19909</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_messages_deaggregated_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a689af30ec24aa4deedafba2620547f4e</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_bytes_deaggregated_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a41a68be592794c32e197ae2d5e4a5d08</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_messages_forwarded_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a0e1b5dcb464202b80ed0fccef753dcf9</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_bytes_forwarded_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a7172c75db38773da5c704cc8371a5516</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_newest_wait_ticks_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a606725df7426b29103a8abdb5ac7c362</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_oldest_wait_ticks_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>aeaaf7ffcc0ada08bc7a4115382bdfd7c</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_polls_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a9d476ee4ee97c20df356c1c0686f5263</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_flushes_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a2c65f1678cce6803a2d019182db90187</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_multiflushes_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a30487d8d9cf88e949902e1f552abdcd6</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_timeouts_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>aeae8b5c61cc30011c943d691b0adbe25</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_idle_flushes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>acc35315ee6393f6c3285c0e410c432cb</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_capacity_flushes_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a9b6213eca9c83f8e826153ef49a0103f</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_idle_poll_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>ab415c157342dcf1a63098709a780d6c6</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_idle_poll_useful_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a0e0c1bc5a567dbea1da06bbc94d1fab8</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_bundles_received_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a4dd3387f12a7deb42343c6cced17a3b2</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, aggregator_bundle_bytes_received_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a0f4f29c64100745d0e052badf5ee153d</anchor>
      <arglist>(aggregator_access_control_signal, SIGUSR2,&quot;signal used to toggle aggregator queue access control&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Aggregator_deaggregate_am</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a47991aeea7aca3832acc087b7befd72a</anchor>
      <arglist>(void *buf, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>idle_flush_aggregator</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a9bdded3d492ba033be3bdb8dbc2dee7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>Grappa_sizeof_header</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>a77bdb5573ca73c72366381fe187d16fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Aggregator</type>
      <name>global_aggregator</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>aa53615e135d9c1eb96d4454c6445188d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>aggregator_access_control_active</name>
      <anchorfile>_aggregator_8cpp.html</anchorfile>
      <anchor>ac8228786a227184ebb41e81ce9544031</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Aggregator.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_aggregator_8hpp</filename>
    <includes id="common_8hpp" name="common.hpp" local="yes" imported="no">common.hpp</includes>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_timestamp_8hpp" name="Timestamp.hpp" local="yes" imported="no">Timestamp.hpp</includes>
    <includes id="_state_timer_8hpp" name="StateTimer.hpp" local="yes" imported="no">StateTimer.hpp</includes>
    <includes id="_metrics_tools_8hpp" name="MetricsTools.hpp" local="yes" imported="no">MetricsTools.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <includes id="_performance_tools_8hpp" name="PerformanceTools.hpp" local="yes" imported="no">PerformanceTools.hpp</includes>
    <class kind="class">LRQueue</class>
    <class kind="class">AggregatorMetrics</class>
    <class kind="struct">AggregatorGenericCallHeader</class>
    <class kind="class">AggregatorBuffer</class>
    <class kind="class">Aggregator</class>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>aggregator_trace_tag</name>
      <anchorfile>_aggregator_8hpp.html</anchorfile>
      <anchor>a26e3be9fc645d37f5d6cc31c5eb2bc3f</anchor>
      <arglist>(data)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Grappa_call_onx</name>
      <anchorfile>_aggregator_8hpp.html</anchorfile>
      <anchor>ae972c745423768cb31bf7db0a65bf908</anchor>
      <arglist>(...)                                                                                  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Grappa_call_on_xx</name>
      <anchorfile>_aggregator_8hpp.html</anchorfile>
      <anchor>afbedd18b4f3a67f0229b461a5bd7b238</anchor>
      <arglist>(...)                                                                              </arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>AggregatorAMHandler</name>
      <anchorfile>_aggregator_8hpp.html</anchorfile>
      <anchor>ac7fc543358b16cde377630dab3ffc389</anchor>
      <arglist>)(void *, size_t, void *, size_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>_aggregator_8hpp.html</anchorfile>
      <anchor>af8cb5e0002f3c4743081f468eab7b0d8</anchor>
      <arglist>(aggregator_autoflush_ticks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>_aggregator_8hpp.html</anchorfile>
      <anchor>aa82b4059770030849807b68d39855d93</anchor>
      <arglist>(aggregator_max_flush)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>_aggregator_8hpp.html</anchorfile>
      <anchor>a9b78ad0e5ae170bc3554c30cc1d62c90</anchor>
      <arglist>(aggregator_enable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>_aggregator_8hpp.html</anchorfile>
      <anchor>a1b0d07e6acbe74f682cce5f88a36d8b0</anchor>
      <arglist>(flush_on_idle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Aggregator_deaggregate_am</name>
      <anchorfile>_aggregator_8hpp.html</anchorfile>
      <anchor>a47991aeea7aca3832acc087b7befd72a</anchor>
      <arglist>(void *buf, size_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_aggregator_8hpp.html</anchorfile>
      <anchor>a07a9db5bf710ecbb54aa8c32b8a619ff</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_messages_aggregated_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_aggregator_8hpp.html</anchorfile>
      <anchor>a1e9b3bebf8eb74880bf690a88415e36a</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_bytes_aggregated_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_aggregator_8hpp.html</anchorfile>
      <anchor>ab7f35dab90cac10e577fee75274e403e</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_messages_deaggregated_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_aggregator_8hpp.html</anchorfile>
      <anchor>aee5fb3c9b8dd47ab35a64efdef6f29ad</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_bytes_deaggregated_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_aggregator_8hpp.html</anchorfile>
      <anchor>af18b00040f4f415d171a959958ff9e53</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, aggregator_bundles_received_)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>Grappa_sizeof_message</name>
      <anchorfile>_aggregator_8hpp.html</anchorfile>
      <anchor>a3ab250766b941cd7c2da1170e96be041</anchor>
      <arglist>(const ArgStruct *args, const size_t args_size=sizeof(ArgStruct), const void *payload=NULL, const size_t payload_size=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Grappa_call_on</name>
      <anchorfile>_aggregator_8hpp.html</anchorfile>
      <anchor>a6285c07beecfad09cbb344f8e95b7226</anchor>
      <arglist>(Core destination, void(*fn_p)(ArgsStruct *, size_t, void *, size_t), const ArgsStruct *args, const size_t args_size=sizeof(ArgsStruct), const void *payload=NULL, const size_t payload_size=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Grappa_call_on_x</name>
      <anchorfile>_aggregator_8hpp.html</anchorfile>
      <anchor>a12387c205b84549c138896073e5c972d</anchor>
      <arglist>(Core destination, void(*fn_p)(ArgsStruct *, size_t, PayloadType *, size_t), const ArgsStruct *args, const size_t args_size=sizeof(ArgsStruct), const PayloadType *payload=NULL, const size_t payload_size=0)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>aggregator_access_control_active</name>
      <anchorfile>_aggregator_8hpp.html</anchorfile>
      <anchor>ac8228786a227184ebb41e81ce9544031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Aggregator</type>
      <name>global_aggregator</name>
      <anchorfile>_aggregator_8hpp.html</anchorfile>
      <anchor>aa53615e135d9c1eb96d4454c6445188d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Allocator.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_allocator_8cpp</filename>
    <includes id="_allocator_8hpp" name="Allocator.hpp" local="yes" imported="no">Allocator.hpp</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_allocator_8cpp.html</anchorfile>
      <anchor>abfcd72113d0015135d9c2475fdf14790</anchor>
      <arglist>(std::ostream &amp;o, const AllocatorChunk &amp;chunk)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_allocator_8cpp.html</anchorfile>
      <anchor>aa09fb4c32c70594e8ae264ff3af8034d</anchor>
      <arglist>(std::ostream &amp;o, const Allocator &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Allocator.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_allocator_8hpp</filename>
    <class kind="struct">AllocatorChunk</class>
    <class kind="class">Allocator</class>
    <class kind="class">Allocator::Exception</class>
    <member kind="typedef">
      <type>intptr_t</type>
      <name>AllocatorAddress</name>
      <anchorfile>_allocator_8hpp.html</anchorfile>
      <anchor>a4f43330cfbc1de9fc0e26dc3d9369e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; AllocatorAddress, AllocatorChunk &gt;</type>
      <name>ChunkMap</name>
      <anchorfile>_allocator_8hpp.html</anchorfile>
      <anchor>ad1e21b8460121701f041f61d54bbe484</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; ChunkMap::iterator &gt;</type>
      <name>FreeList</name>
      <anchorfile>_allocator_8hpp.html</anchorfile>
      <anchor>a3fabc5a47a63bd0377656292be69c7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; size_t, FreeList &gt;</type>
      <name>FreeListMap</name>
      <anchorfile>_allocator_8hpp.html</anchorfile>
      <anchor>a40e8ee8f961e249bb59cd0d56526f9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_allocator_8hpp.html</anchorfile>
      <anchor>abfcd72113d0015135d9c2475fdf14790</anchor>
      <arglist>(std::ostream &amp;o, const AllocatorChunk &amp;chunk)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_allocator_8hpp.html</anchorfile>
      <anchor>aa09fb4c32c70594e8ae264ff3af8034d</anchor>
      <arglist>(std::ostream &amp;o, const Allocator &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Array.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_array_8hpp</filename>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_collective_8hpp" name="Collective.hpp" local="yes" imported="no">Collective.hpp</includes>
    <includes id="_cache_8hpp" name="Cache.hpp" local="yes" imported="no">Cache.hpp</includes>
    <includes id="_global_completion_event_8hpp" name="GlobalCompletionEvent.hpp" local="yes" imported="no">GlobalCompletionEvent.hpp</includes>
    <includes id="_parallel_loop_8hpp" name="ParallelLoop.hpp" local="yes" imported="no">ParallelLoop.hpp</includes>
    <includes id="_global_allocator_8hpp" name="GlobalAllocator.hpp" local="yes" imported="no">GlobalAllocator.hpp</includes>
    <includes id="_delegate_8hpp" name="Delegate.hpp" local="yes" imported="no">Delegate.hpp</includes>
    <namespace>Grappa</namespace>
    <namespace>Grappa::util</namespace>
    <member kind="function">
      <type>void</type>
      <name>memset</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>gac5a9df86f535f81420219d9dfcab5584</anchor>
      <arglist>(GlobalAddress&lt; T &gt; base, S value, size_t count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memset</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>gadf1e28a91749a97c58d6b1db21d2d607</anchor>
      <arglist>(T *base, S value, size_t count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memcpy</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>ga8b39e2df966b32aea640b93e3c5b502c</anchor>
      <arglist>(GlobalAddress&lt; T &gt; dst, GlobalAddress&lt; T &gt; src, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memcpy</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>ga203f1b78785e927f8cb1fbfe262de33e</anchor>
      <arglist>(T *dst, T *src, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memcpy&lt; void &gt;</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>ga66050c7210e15962b855d514842c3a88</anchor>
      <arglist>(void *dst, void *src, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memcpy_async</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>ga97ac566b2b1886d9c51123ddd9a2eede</anchor>
      <arglist>(GlobalAddress&lt; T &gt; dst, GlobalAddress&lt; T &gt; src, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prefix_sum</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>ga257b0d2c3a3432a0f1f8c6037390e3d2</anchor>
      <arglist>(GlobalAddress&lt; T &gt; array, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>array_str</name>
      <anchorfile>namespace_grappa_1_1util.html</anchorfile>
      <anchor>a19d27cd8d71afb0f1ca5776a75a79029</anchor>
      <arglist>(const char *name, GlobalAddress&lt; T &gt; base, size_t nelem, int width=10)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>array_str</name>
      <anchorfile>namespace_grappa_1_1util.html</anchorfile>
      <anchor>a00103342fcbb6d332a7b81bb78580873</anchor>
      <arglist>(const char *name, const ArrayT &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>array_str</name>
      <anchorfile>namespace_grappa_1_1util.html</anchorfile>
      <anchor>a0a541dff94ebbd72f0688bc28ca73af0</anchor>
      <arglist>(const ArrayT &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>SimpleIterator&lt; T &gt;</type>
      <name>iterate</name>
      <anchorfile>namespace_grappa_1_1util.html</anchorfile>
      <anchor>a45541aa096aa0d2f1ebab8cbee45cb71</anchor>
      <arglist>(T *base=nullptr, size_t nelem=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>array_str</name>
      <anchorfile>namespace_grappa_1_1util.html</anchorfile>
      <anchor>ace2248983db7928d0972221f9ae40e15</anchor>
      <arglist>(const char *name, T *base, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_array_8hpp.html</anchorfile>
      <anchor>ab5b508ce8ce2ff9d840e913642a85038</anchor>
      <arglist>(std::ostream &amp;o, std::vector&lt; T &gt; v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AsyncDelegate.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_async_delegate_8cpp</filename>
    <includes id="_async_delegate_8hpp" name="AsyncDelegate.hpp" local="yes" imported="no">AsyncDelegate.hpp</includes>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_async_delegate_8cpp.html</anchorfile>
      <anchor>a48b9c6ab0fa8d627bb47396914e6093c</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, delegate_async_ops, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_async_delegate_8cpp.html</anchorfile>
      <anchor>ad4764c35ffcce3c59c70cbe4b3dd61e5</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, delegate_async_writes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_async_delegate_8cpp.html</anchorfile>
      <anchor>a0488054701413153503c06381b4949f0</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, delegate_async_increments, 0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AsyncDelegate.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_async_delegate_8hpp</filename>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_full_empty_local_8hpp" name="FullEmptyLocal.hpp" local="yes" imported="no">FullEmptyLocal.hpp</includes>
    <includes id="_global_completion_event_8hpp" name="GlobalCompletionEvent.hpp" local="yes" imported="no">GlobalCompletionEvent.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <class kind="class">Grappa::delegate::Promise</class>
    <namespace>Grappa</namespace>
    <namespace>Grappa::delegate</namespace>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_async_delegate_8hpp.html</anchorfile>
      <anchor>a619d8b24eef2e9f8dfd7170e9661c8f7</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, delegate_async_ops)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_async_delegate_8hpp.html</anchorfile>
      <anchor>acaee63de56e03bed3c6585243be253b9</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, delegate_async_writes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_async_delegate_8hpp.html</anchorfile>
      <anchor>afd5483b16438dd868460e21def296f68</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, delegate_async_increments)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_async_delegate_8hpp.html</anchorfile>
      <anchor>a2cbde40b0a2e544910f13cae760414ba</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_short_circuits)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Barrier.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_barrier_8cpp</filename>
    <includes id="_barrier_8hpp" name="Barrier.hpp" local="yes" imported="no">Barrier.hpp</includes>
    <includes id="_condition_variable_8hpp" name="ConditionVariable.hpp" local="yes" imported="no">ConditionVariable.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="variable">
      <type>ConditionVariable</type>
      <name>barrier_cv</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a46d200566e9346ab9bd22e9cb2680cad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Barrier.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_barrier_8hpp</filename>
    <includes id="_condition_variable_8hpp" name="ConditionVariable.hpp" local="yes" imported="no">ConditionVariable.hpp</includes>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_communicator_impl_8hpp" name="CommunicatorImpl.hpp" local="yes" imported="no">CommunicatorImpl.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type>void</type>
      <name>barrier</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gab6c76d75bef0d7b03eb1b9b8ded580d8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasicScheduler.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/tasks/</path>
    <filename>_basic_scheduler_8cpp</filename>
    <includes id="_basic_scheduler_8hpp" name="BasicScheduler.hpp" local="yes" imported="no">BasicScheduler.hpp</includes>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>BasicScheduler.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/tasks/</path>
    <filename>_basic_scheduler_8hpp</filename>
    <includes id="_scheduler_8hpp" name="Scheduler.hpp" local="yes" imported="no">Scheduler.hpp</includes>
    <includes id="_thread_queue_8hpp" name="ThreadQueue.hpp" local="yes" imported="no">ThreadQueue.hpp</includes>
    <includes id="_timestamp_8hpp" name="Timestamp.hpp" local="no" imported="no">Timestamp.hpp</includes>
    <class kind="class">Grappa::BasicScheduler</class>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>_basic_scheduler_8hpp.html</anchorfile>
      <anchor>a16813a5ac9ba2e434c1e7a053b4814e8</anchor>
      <arglist>(periodic_poll_ticks)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>boost_helpers.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>boost__helpers_8hpp</filename>
    <member kind="define">
      <type>#define</type>
      <name>BOOST_REQUIRE_EQUAL_MESSAGE</name>
      <anchorfile>boost__helpers_8hpp.html</anchorfile>
      <anchor>a81764a8fa4c631c13c0b79f0a684c769</anchor>
      <arglist>(L, R, M)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BufferVector.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_buffer_vector_8hpp</filename>
    <includes id="_locale_shared_memory_8hpp" name="LocaleSharedMemory.hpp" local="yes" imported="no">LocaleSharedMemory.hpp</includes>
    <class kind="class">BufferVector</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_buffer_vector_8hpp.html</anchorfile>
      <anchor>a77894d14b7d8e4e34300440550af6816</anchor>
      <arglist>(std::ostream &amp;o, const BufferVector&lt; T &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Cache.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_cache_8cpp</filename>
    <includes id="_cache_8hpp" name="Cache.hpp" local="yes" imported="no">Cache.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_cache_8cpp.html</anchorfile>
      <anchor>a58ae5626ee270be2f8df45d1a4319868</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, ro_acquires, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_cache_8cpp.html</anchorfile>
      <anchor>a5a8d555f6f9165958aa49e37d91b78d2</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, wo_releases, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_cache_8cpp.html</anchorfile>
      <anchor>a77728f1474b15d870717f43c60b6c724</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, rw_acquires, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_cache_8cpp.html</anchorfile>
      <anchor>aa9e3509a03bba50d9e685a266711ca97</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, rw_releases, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_cache_8cpp.html</anchorfile>
      <anchor>a752518d96cb4bd6d24ad83d2457a7f3a</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, bytes_acquired, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_cache_8cpp.html</anchorfile>
      <anchor>a2194ea130d96671f8a4b9b98564cb4c6</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, bytes_released, 0)</arglist>
    </member>
    <member kind="function">
      <type>Core</type>
      <name>address2node</name>
      <anchorfile>_cache_8cpp.html</anchorfile>
      <anchor>a2a2b08a0a267031c229f9e291905f27c</anchor>
      <arglist>(void *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Cache.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_cache_8hpp</filename>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <includes id="common_8hpp" name="common.hpp" local="yes" imported="no">common.hpp</includes>
    <includes id="_incoherent_acquirer_8hpp" name="IncoherentAcquirer.hpp" local="yes" imported="no">IncoherentAcquirer.hpp</includes>
    <includes id="_incoherent_releaser_8hpp" name="IncoherentReleaser.hpp" local="yes" imported="no">IncoherentReleaser.hpp</includes>
    <class kind="class">CacheMetrics</class>
    <class kind="class">CacheAllocator</class>
    <class kind="class">NullAcquirer</class>
    <class kind="class">NullReleaser</class>
    <class kind="class">CacheRO</class>
    <class kind="class">CacheRW</class>
    <class kind="class">CacheWO</class>
    <class kind="struct">Incoherent</class>
    <member kind="define">
      <type>#define</type>
      <name>CACHE_WRAP</name>
      <anchorfile>_cache_8hpp.html</anchorfile>
      <anchor>a86654551acda2a8dcf5880367cb5604b</anchor>
      <arglist>(fn, arg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_CACHE_WRAPPED</name>
      <anchorfile>_cache_8hpp.html</anchorfile>
      <anchor>a8286b273dcd8eacf376fe942711c5911</anchor>
      <arglist>(name, orig, T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call_with_caching</name>
      <anchorfile>_cache_8hpp.html</anchorfile>
      <anchor>af94b2f7be1b1f54858716e2831360f36</anchor>
      <arglist>(GlobalAddress&lt; T &gt; ptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CallbackMetric.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_callback_metric_8cpp</filename>
    <includes id="_callback_metric_8hpp" name="CallbackMetric.hpp" local="yes" imported="no">CallbackMetric.hpp</includes>
    <includes id="_callback_metric_impl_8hpp" name="CallbackMetricImpl.hpp" local="yes" imported="no">CallbackMetricImpl.hpp</includes>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>CallbackMetric.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_callback_metric_8hpp</filename>
    <includes id="_metric_base_8hpp" name="MetricBase.hpp" local="yes" imported="no">MetricBase.hpp</includes>
    <class kind="class">Grappa::CallbackMetric</class>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>CallbackMetricImpl.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_callback_metric_impl_8hpp</filename>
    <includes id="_callback_metric_8hpp" name="CallbackMetric.hpp" local="yes" imported="no">CallbackMetric.hpp</includes>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <includes id="_completion_event_8hpp" name="CompletionEvent.hpp" local="yes" imported="no">CompletionEvent.hpp</includes>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>ChunkAllocator.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_chunk_allocator_8cpp</filename>
    <includes id="_chunk_allocator_8hpp" name="ChunkAllocator.hpp" local="yes" imported="no">ChunkAllocator.hpp</includes>
    <includes id="_locale_shared_memory_8hpp" name="LocaleSharedMemory.hpp" local="yes" imported="no">LocaleSharedMemory.hpp</includes>
    <includes id="_tasking_scheduler_8hpp" name="TaskingScheduler.hpp" local="yes" imported="no">TaskingScheduler.hpp</includes>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>_chunk_allocator_8cpp.html</anchorfile>
      <anchor>aea799afbdfdf47085a6bc92225aa8bc7</anchor>
      <arglist>(shared_pool_max_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_double</name>
      <anchorfile>_chunk_allocator_8cpp.html</anchorfile>
      <anchor>acadc483e79f4c1deb5d6d183006fb60d</anchor>
      <arglist>(shared_pool_memory_fraction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_chunk_allocator_8cpp.html</anchorfile>
      <anchor>a5ed2b89fbc8c2c6fffa63ae415059807</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, chunkallocator_append, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_chunk_allocator_8cpp.html</anchorfile>
      <anchor>a415da841813167b5b790d47e052210be</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, chunkallocator_allocated, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_chunk_allocator_8cpp.html</anchorfile>
      <anchor>a6aa97278cd9148dd62294b4d0a5c0b5b</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, chunkallocator_yielded, 0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChunkAllocator.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_chunk_allocator_8hpp</filename>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ALLOCATOR_PREFETCH_DISTANCE</name>
      <anchorfile>_chunk_allocator_8hpp.html</anchorfile>
      <anchor>a5cf8a21c34331232517e05749ec66c4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Collective.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_collective_8cpp</filename>
    <includes id="_collective_8hpp" name="Collective.hpp" local="yes" imported="no">Collective.hpp</includes>
    <includes id="_delegate_8hpp" name="Delegate.hpp" local="yes" imported="no">Delegate.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Collective.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_collective_8hpp</filename>
    <includes id="_completion_event_8hpp" name="CompletionEvent.hpp" local="yes" imported="no">CompletionEvent.hpp</includes>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <includes id="_tasking_8hpp" name="Tasking.hpp" local="yes" imported="no">Tasking.hpp</includes>
    <includes id="_counting_semaphore_local_8hpp" name="CountingSemaphoreLocal.hpp" local="yes" imported="no">CountingSemaphoreLocal.hpp</includes>
    <includes id="_barrier_8hpp" name="Barrier.hpp" local="yes" imported="no">Barrier.hpp</includes>
    <includes id="_message_pool_8hpp" name="MessagePool.hpp" local="yes" imported="no">MessagePool.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>COLL_MAX</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>af8a7378079d6dc0a9efc233673861163</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COLL_MIN</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>a2cc16dc15633758c089b867adb01877c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COLL_ADD</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>ad3a407f9a8c6e7d55addd8b40c35f08c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COLL_MULT</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>a6e76767449cab4a43708dcd1dd4be7ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>collective_add</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>a230e982687661a48480a16098f36e533</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>collective_sum</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>a73a9ccb12012f94022de2a1e710e2e80</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>collective_max</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>a5f02322d30347d45745d05407d496346</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>collective_min</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>a1342645d4589459e4cbb288b2e7a621a</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>collective_prod</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>adb8e8f2c8c8d5df648e6471d758c0276</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>collective_mult</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>a9c9e55f440bdc05454ffd6e1a0394c1b</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>collective_or</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>a335499b241930e012b5c8de11aa8a136</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>collective_lor</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>a6c8c0b87df31c5e7e1aca193be0d46bc</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>collective_bor</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>ab97c062f5832f34bd8d943acfaf3f83d</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>collective_and</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>ae71ba68f064ac57c7f483e5c3d44713d</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>collective_land</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>aa0223a01e399325042fde26f6381c5a0</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>collective_band</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>ad64ae367237b0d098f8788da41dba1c6</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>collective_xor</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>a08b5a02760900c80ac9ad14483f8299b</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>collective_lxor</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>a3f80dab04783c9f842be2bb4bbb364b9</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>collective_bxor</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>a2a5c189e21c4c4f2cb74ead8de1c9fef</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call_on_all_cores</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>ga34aff137286f631648c195112fcfb8ad</anchor>
      <arglist>(F work)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_all_cores</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gac74a2d7ffb5b36ec6833ebfc54c16841</anchor>
      <arglist>(F work)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>allreduce</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gaf8f3fd1aa6b179823dde8e88dab682f8</anchor>
      <arglist>(T myval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allreduce_inplace</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gabd3ee93956b1a6047d45d2e93f2e0b1e</anchor>
      <arglist>(T *array, size_t nelem=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reduce</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gaacc2618bb00fc9fbbf6b154a9258d18a</anchor>
      <arglist>(const T *global_ptr)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reduce</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gaf13e242540fe6c651385acaf94d42c83</anchor>
      <arglist>(GlobalAddress&lt; T &gt; localizable)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reduce</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gaed4325271e72af888ce395fba4ca1380</anchor>
      <arglist>(GlobalAddress&lt; P &gt; localizable)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sum_all_cores</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gaf37d649567600743d463fb077cc2c6d8</anchor>
      <arglist>(F func) -&gt; decltype(func())</arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>MAX_MESSAGE_SIZE</name>
      <anchorfile>_collective_8hpp.html</anchorfile>
      <anchor>a2da613f8d4f8b9c30ce0641041e8bd91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>common.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>common_8hpp</filename>
    <class kind="struct">Range</class>
    <class kind="struct">block_offset_t</class>
    <class kind="struct">Functor</class>
    <namespace>Grappa</namespace>
    <namespace>bittwiddle</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ONE</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a206b6f5362e56b51ca957635350b70b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KILO</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a9d8f54c9e4c2990b9171d1c88119f454</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MEGA</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a78a6115b485de47c7cc56b224c558ea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GIGA</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>ad63937294d26f46ec6eada84b1ee8fec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TERA</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>adc2e6009f738e566d42eaf9b9e5d64c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PETA</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a39ebb028339296da089386e0c3ef10b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CACHE_LINE_SIZE</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>af89f60b07247176687889ade776c8e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIZE_OF_CACHE</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>aab57d4ad3d9dbceb6eafd48d227a688c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>THOUSAND</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>ae9684b7111809b055eab5275c27cb765</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MILLION</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a368e7704f92e34c8ea0a5c263a95a1b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BILLION</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a31f99d9c502b52b5f36dc7e2028c2e80</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>afa99ec4acc4ecb2dc3c2d05da15d0e3f</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a3acffbd305ee72dcd4593c0d8af64a4f</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ALIGN_UP</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a2f62b3cca99dd27d1e326a2cf084beee</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_DEPRECATED</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>abe2f19f429a29d7212b0915e124bb33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_TIME</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a9b33cb20ba42d43bde0d22857ef518c9</anchor>
      <arglist>(var, block)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_TIMER</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>af55302d3157c7a643acd721be77bc6aa</anchor>
      <arglist>(var)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_TIME_LOG</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a2fb51b486292de0397e0c4c6280b159e</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_TIME_VLOG</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a5731f1d7822322a9301fe0c32775cc0b</anchor>
      <arglist>(level, name, indent)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_TIME_REGION</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a95a4852a5020e79ea1c0d3545ce4d267</anchor>
      <arglist>(var)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DISALLOW_COPY_AND_ASSIGN</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a80b947ac1afe94620a866c2040ea44d1</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>rdtscll</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>ac24e1ca366317fc627e4ba6ec3cbc67b</anchor>
      <arglist>(val)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GET_TYPE</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>ae614ededcb1de7659e83d8d8dd8ce140</anchor>
      <arglist>(member)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GET_NAME</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a699618b24a235364d46933eaf73a189c</anchor>
      <arglist>(member)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CAT_EACH</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>af20de6aae904fe3e78ab4856a8713558</anchor>
      <arglist>(r, data, elem)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AUTO_CONSTRUCTOR_DETAIL_PARAM</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a3c5a56a632cb5158d772d8baef216558</anchor>
      <arglist>(r, data, member)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECL_W_TYPE</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a42a12fab6a2203bc105ccb387d461908</anchor>
      <arglist>(r, data, member)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AUTO_CONSTRUCTOR_DETAIL_INIT</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>ac41e2dc2d3a69342477ce524758d929b</anchor>
      <arglist>(r, data, member)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AUTO_CONSTRUCTOR_DETAIL</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>ab2efb0e0396728e62b940c4eca8faf5f</anchor>
      <arglist>(className, members)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AUTO_CONSTRUCTOR</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a8a20490f42add0a977b98d4ebb80a7b4</anchor>
      <arglist>(className, members)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AUTO_DECLS</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>adaec39cc953356dec3728e157df4aff5</anchor>
      <arglist>(members)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FUNCTOR</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a6439569c5b22ba27784bc92ed165107e</anchor>
      <arglist>(name, members)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CHECK_NULL</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga952291ef59162657730ba72ba3404697</anchor>
      <arglist>(val)                                                                                        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DCHECK_NULL</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga53dbb05139f72292ff0b79870282ec2d</anchor>
      <arglist>(val)                                            </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MPI_CHECK</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga3780b63a8c0bbf5be602f5a569fb469d</anchor>
      <arglist>(mpi_call)                                                                                  </arglist>
    </member>
    <member kind="typedef">
      <type>Range&lt; int64_t &gt;</type>
      <name>range_t</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>aba4238c5e944edbda818e64de2794493</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TaskMode</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>ac6ade1fca200baa13c39fe78703897b9</anchor>
      <arglist></arglist>
      <enumvalue file="namespace_grappa.html" anchor="ac6ade1fca200baa13c39fe78703897b9a685d1f2146dd079015e81918414e8971">Bound</enumvalue>
      <enumvalue file="namespace_grappa.html" anchor="ac6ade1fca200baa13c39fe78703897b9aedac80248b7bf68ccfaa9c78bfb81c32">Unbound</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SyncMode</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a1eb494aa98f6908538488b8d98cdbc7a</anchor>
      <arglist></arglist>
      <enumvalue file="namespace_grappa.html" anchor="a1eb494aa98f6908538488b8d98cdbc7aabd0ca6be53b0f3d2886fd53fcb52574e">Blocking</enumvalue>
      <enumvalue file="namespace_grappa.html" anchor="a1eb494aa98f6908538488b8d98cdbc7aa24aa4117da86c41684ad25742832dfa6">Async</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; T &gt;</type>
      <name>make_unique</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a0829a5e90a24afd12645b3d48cd08913</anchor>
      <arglist>(Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>walltime</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a10cafc5a51b1eefe09225ca90dd79efb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>signextend</name>
      <anchorfile>namespacebittwiddle.html</anchorfile>
      <anchor>afebb4c99f1d34f8cb2b9bce7ebecf8e5</anchor>
      <arglist>(const T x)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>log2</name>
      <anchorfile>namespacebittwiddle.html</anchorfile>
      <anchor>a1d453d84d1758d489e754c23ed67081d</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>Grappa_magic_identity_function</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a8b17e4dfe81cc38e12681baa6c268bac</anchor>
      <arglist>(T *t)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min_element</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>adaffebb5904f3cf7be2624d84af914e4</anchor>
      <arglist>(const Container &amp;c, Comparator cmp) -&gt; decltype(*c.begin())</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min_element</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>aee3006789762a1960110f02a6029beb6</anchor>
      <arglist>(const Container &amp;c0, const Container &amp;c1, Comparator cmp) -&gt; decltype(*c0.begin())</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min_element</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a21959d88ffa32a0978a707c73d435121</anchor>
      <arglist>(Range&lt; T &gt; r, Comparator cmp)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a4f21489192c5901ad66bdbe232476d6a</anchor>
      <arglist>(std::ostream &amp;o, const range_t &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>range_t</type>
      <name>blockDist</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a23bb0722a5c796da7b6f1cde3c344851</anchor>
      <arglist>(int64_t start, int64_t end, int64_t rank, int64_t numBlocks)</arglist>
    </member>
    <member kind="function">
      <type>block_offset_t</type>
      <name>indexToBlock</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a36451ab04dc83653ca56946fec2410c2</anchor>
      <arglist>(int64_t index, int64_t numElements, int64_t numBlocks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fast_srand</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>a8caee38dd990c5a1d30deeae7cdc5a37</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fast_rand</name>
      <anchorfile>common_8hpp.html</anchorfile>
      <anchor>ae4232dccafa4e46139b8e86e7eb2c79c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>typename_of</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gafcbdfaa9de31d679a52eda38a521cec5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>typename_of</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga3d051099836ebef97277941196c527eb</anchor>
      <arglist>(const T &amp;unused)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Communicator.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_communicator_8cpp</filename>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_locale_shared_memory_8hpp" name="LocaleSharedMemory.hpp" local="yes" imported="no">LocaleSharedMemory.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_communicator_8cpp.html</anchorfile>
      <anchor>aa8e15e4e97415451a549196b327f8292</anchor>
      <arglist>(log2_concurrent_receives, 7,&quot;How many receive requests do we keep active at a time?&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_communicator_8cpp.html</anchorfile>
      <anchor>a504d9d754e2b3d98387d3a7bac0c8c98</anchor>
      <arglist>(log2_concurrent_sends, 7,&quot;How many send requests do we keep active at a time?&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_communicator_8cpp.html</anchorfile>
      <anchor>acaa4bba61a04d394cebad2b3ed02c461</anchor>
      <arglist>(log2_buffer_size, 19,&quot;Size of Communicator buffers&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_communicator_8cpp.html</anchorfile>
      <anchor>ad7128d36b15a240fc7aacab50dd8886f</anchor>
      <arglist>(SummarizingMetric&lt; int64_t &gt;, communicator_message_bytes, 0)</arglist>
    </member>
    <member kind="variable">
      <type>Communicator</type>
      <name>global_communicator</name>
      <anchorfile>_communicator_8cpp.html</anchorfile>
      <anchor>a6925faf8d80069d797cb044471ca94b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Communicator.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_communicator_8hpp</filename>
    <includes id="common_8hpp" name="common.hpp" local="yes" imported="no">common.hpp</includes>
    <class kind="struct">CommunicatorContext</class>
    <class kind="class">Communicator</class>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MASTER_ONLY</name>
      <anchorfile>_communicator_8hpp.html</anchorfile>
      <anchor>af867e987375702556512178ef6d43123</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int16_t</type>
      <name>Core</name>
      <anchorfile>_communicator_8hpp.html</anchorfile>
      <anchor>a3a0af41b6e127e7f96781ce84aa9d40e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int16_t</type>
      <name>Locale</name>
      <anchorfile>_communicator_8hpp.html</anchorfile>
      <anchor>a6ecf8097f2a94b9da0f855a386d4570b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Core</type>
      <name>cores</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga555f2bf877bea827ace1d7c969b763f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Core</type>
      <name>mycore</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gad7a90083b28f17590bdcb069172f33f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Core</type>
      <name>locale_cores</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga267489699cd07db87caa07c9784dbac5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Core</type>
      <name>locale_mycore</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga807b9abe099d881ca3b479a1ff95a514</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Locale</type>
      <name>locales</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga530158645b7b2b52a268daedf44d0fd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Locale</type>
      <name>mylocale</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga25ad3b51e8430df89259e1c65526e2e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Locale</type>
      <name>locale_of</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gaebb0c9c0eb25b74767305df3ae81915a</anchor>
      <arglist>(Core c)</arglist>
    </member>
    <member kind="variable">
      <type>Communicator</type>
      <name>global_communicator</name>
      <anchorfile>_communicator_8hpp.html</anchorfile>
      <anchor>a6925faf8d80069d797cb044471ca94b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CommunicatorImpl.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_communicator_impl_8hpp</filename>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_completion_event_8hpp" name="CompletionEvent.hpp" local="yes" imported="no">CompletionEvent.hpp</includes>
  </compound>
  <compound kind="file">
    <name>CompletionEvent.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_completion_event_8hpp</filename>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_condition_variable_local_8hpp" name="ConditionVariableLocal.hpp" local="yes" imported="no">ConditionVariableLocal.hpp</includes>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <includes id="_tasking_8hpp" name="Tasking.hpp" local="yes" imported="no">Tasking.hpp</includes>
    <includes id="_delegate_base_8hpp" name="DelegateBase.hpp" local="yes" imported="no">DelegateBase.hpp</includes>
    <class kind="class">Grappa::CompletionEvent</class>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_completion_event_8hpp.html</anchorfile>
      <anchor>affbf7ea8bc4ef7bf0f0529a024b630c1</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, ce_remote_completions)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_completion_event_8hpp.html</anchorfile>
      <anchor>a4600d05633e7a1c509b150f9e040c7f1</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, ce_completions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complete</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gad0f5511c9e55d6d5cd3add33bf00d527</anchor>
      <arglist>(CompletionType *ce)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complete</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga4ba30941b3c166c8eeeee3d31a438d35</anchor>
      <arglist>(GlobalAddress&lt; CompletionEvent &gt; ce, int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enroll</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga10fe6e2ee5bf5a8d8e9f9fd11dfee5cb</anchor>
      <arglist>(GlobalAddress&lt; CompletionEvent &gt; ce, int64_t incr=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gad28a884076dc9b8914e694d245b03bf8</anchor>
      <arglist>(CompletionEvent *ce, TF tf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConditionVariable.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_condition_variable_8hpp</filename>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <includes id="_condition_variable_local_8hpp" name="ConditionVariableLocal.hpp" local="yes" imported="no">ConditionVariableLocal.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga0e49ee2c2ae50e793e427b0fcfa842f9</anchor>
      <arglist>(GlobalAddress&lt; ConditionVariable &gt; m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signal</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gabcf3b681a173156001dc47e12c081de9</anchor>
      <arglist>(const GlobalAddress&lt; ConditionVariable &gt; m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signal_all</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga37a246c9cb77c17a88a376ce83bbcb93</anchor>
      <arglist>(GlobalAddress&lt; ConditionVariable &gt; m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConditionVariableLocal.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_condition_variable_local_8hpp</filename>
    <includes id="_tasking_scheduler_8hpp" name="TaskingScheduler.hpp" local="yes" imported="no">TaskingScheduler.hpp</includes>
    <includes id="_suspended_delegate_8hpp" name="SuspendedDelegate.hpp" local="yes" imported="no">SuspendedDelegate.hpp</includes>
    <includes id="_synchronization_8hpp" name="Synchronization.hpp" local="yes" imported="no">Synchronization.hpp</includes>
    <class kind="class">Grappa::ConditionVariable</class>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type>void</type>
      <name>add_waiter</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga32f0284539cca3dc00915931b86a1cb3</anchor>
      <arglist>(ConditionVariable *cv, Worker *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga4241b1cbe305caf3ca08d2fea8468edf</anchor>
      <arglist>(ConditionVariable *cv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signal</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga6f13ef84c9e8693d675d10428cf6c776</anchor>
      <arglist>(ConditionVariable *cv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broadcast</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga7cf72c5ef30262df14f5406d790dc798</anchor>
      <arglist>(ConditionVariable *cv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContextSwitchRate_bench.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_context_switch_rate__bench_8cpp</filename>
    <includes id="_grappa_8hpp" name="Grappa.hpp" local="yes" imported="no">Grappa.hpp</includes>
    <includes id="_completion_event_8hpp" name="CompletionEvent.hpp" local="yes" imported="no">CompletionEvent.hpp</includes>
    <includes id="_parallel_loop_8hpp" name="ParallelLoop.hpp" local="yes" imported="no">ParallelLoop.hpp</includes>
    <includes id="_collective_8hpp" name="Collective.hpp" local="yes" imported="no">Collective.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <class kind="struct">SixteenBytes</class>
    <class kind="struct">Cacheline</class>
    <member kind="function">
      <type></type>
      <name>DECLARE_uint64</name>
      <anchorfile>_context_switch_rate__bench_8cpp.html</anchorfile>
      <anchor>a5d8ccebf5b8e100208a131fedefbb593</anchor>
      <arglist>(num_starting_workers)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_uint64</name>
      <anchorfile>_context_switch_rate__bench_8cpp.html</anchorfile>
      <anchor>aa85c576749f1b5c9a890b911de25ab23</anchor>
      <arglist>(num_test_workers, 4,&quot;Number of workers for the tests&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_uint64</name>
      <anchorfile>_context_switch_rate__bench_8cpp.html</anchorfile>
      <anchor>a21ba43424efe9e40d3f00be72e118ebc</anchor>
      <arglist>(iters_per_task, 10000,&quot;Iterations per task&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_string</name>
      <anchorfile>_context_switch_rate__bench_8cpp.html</anchorfile>
      <anchor>a42860d09fda70c37331c5a59094c8934</anchor>
      <arglist>(test_type,&quot;yields&quot;,&quot;options: {yields,sequential_updates, sequential_updates16&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_uint64</name>
      <anchorfile>_context_switch_rate__bench_8cpp.html</anchorfile>
      <anchor>a90b4e2b8ed02cd1e3942a81597f71916</anchor>
      <arglist>(private_array_size, 1,&quot;Size of private array of 8-bytes for each task&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_context_switch_rate__bench_8cpp.html</anchorfile>
      <anchor>ae3a6f892ae89c2b0ef590caaf5a100da</anchor>
      <arglist>(SimpleMetric&lt; double &gt;, context_switch_test_runtime_avg, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_context_switch_rate__bench_8cpp.html</anchorfile>
      <anchor>afa88ff171e5991b04a7aa781911870e6</anchor>
      <arglist>(SimpleMetric&lt; double &gt;, context_switch_test_runtime_max, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_context_switch_rate__bench_8cpp.html</anchorfile>
      <anchor>a8086653ffbea09fb956fcaee23d383db</anchor>
      <arglist>(SimpleMetric&lt; double &gt;, context_switch_test_runtime_min, 0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>_context_switch_rate__bench_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>CompletionEvent *</type>
      <name>final</name>
      <anchorfile>_context_switch_rate__bench_8cpp.html</anchorfile>
      <anchor>ad2d68a24ffbf8e793e78c99d4012feb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CompletionEvent *</type>
      <name>task_barrier</name>
      <anchorfile>_context_switch_rate__bench_8cpp.html</anchorfile>
      <anchor>a719e377cdaadb410a194a3c958aa482d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64_t *</type>
      <name>values8</name>
      <anchorfile>_context_switch_rate__bench_8cpp.html</anchorfile>
      <anchor>a2e4d822891551c616da0952000be496e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SixteenBytes *</type>
      <name>values16</name>
      <anchorfile>_context_switch_rate__bench_8cpp.html</anchorfile>
      <anchor>a6458045beb37e6b53a9701e552bbda0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>numst</name>
      <anchorfile>_context_switch_rate__bench_8cpp.html</anchorfile>
      <anchor>a36caebfe192e734e914631f89be3cb33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>waitCount</name>
      <anchorfile>_context_switch_rate__bench_8cpp.html</anchorfile>
      <anchor>a8e0930fb2fc2e01f18a070c96195648a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>running</name>
      <anchorfile>_context_switch_rate__bench_8cpp.html</anchorfile>
      <anchor>a36f7b6be7108281af77939ceaec42fd6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CountingSemaphoreLocal.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_counting_semaphore_local_8hpp</filename>
    <includes id="_tasking_scheduler_8hpp" name="TaskingScheduler.hpp" local="yes" imported="no">TaskingScheduler.hpp</includes>
    <includes id="_synchronization_8hpp" name="Synchronization.hpp" local="yes" imported="no">Synchronization.hpp</includes>
    <class kind="class">Grappa::CountingSemaphore</class>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>Delegate.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_delegate_8cpp</filename>
    <includes id="_delegate_8hpp" name="Delegate.hpp" local="yes" imported="no">Delegate.hpp</includes>
    <includes id="_timestamp_8hpp" name="Timestamp.hpp" local="yes" imported="no">Timestamp.hpp</includes>
    <includes id="common_8hpp" name="common.hpp" local="yes" imported="no">common.hpp</includes>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_delegate_8cpp.html</anchorfile>
      <anchor>a5639c977e775cf3343ee976bd0c8f3a6</anchor>
      <arglist>(HistogramMetric, delegate_op_latency_histogram, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_delegate_8cpp.html</anchorfile>
      <anchor>ae55296a6c590109f3c0cd1445aa279b3</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, flat_combiner_fetch_and_add_amount, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_delegate_8cpp.html</anchorfile>
      <anchor>a79e4f00f3cefddbaca902bbc7966860f</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_short_circuits, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_delegate_8cpp.html</anchorfile>
      <anchor>a0852ea77a2ff8a70a7ffecb914ca27ba</anchor>
      <arglist>(SummarizingMetric&lt; double &gt;, delegate_roundtrip_latency, 0.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_delegate_8cpp.html</anchorfile>
      <anchor>a19b42e44855e5f69269b13b78d4c199b</anchor>
      <arglist>(SummarizingMetric&lt; double &gt;, delegate_network_latency, 0.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_delegate_8cpp.html</anchorfile>
      <anchor>accffc6ef705f71c620aea43d41b8d66c</anchor>
      <arglist>(SummarizingMetric&lt; double &gt;, delegate_wakeup_latency, 0.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_delegate_8cpp.html</anchorfile>
      <anchor>a06f8d09a1736a3d706d62f90d70fcc3d</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_ops, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_delegate_8cpp.html</anchorfile>
      <anchor>a836348effbdb17af95ef415641d435d0</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_targets, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_delegate_8cpp.html</anchorfile>
      <anchor>a4b3a527e8f7b65d68c3779716e64d4e6</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_reads, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_delegate_8cpp.html</anchorfile>
      <anchor>aaeb43ef2f47d5dd116ad442bcb32cf18</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_read_targets, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_delegate_8cpp.html</anchorfile>
      <anchor>afc04083246ecb9b801098e0045f07981</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_writes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_delegate_8cpp.html</anchorfile>
      <anchor>a802207d5c47c52b2887bf630946e1086</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_write_targets, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_delegate_8cpp.html</anchorfile>
      <anchor>a51374b1cd105e72a794daf7fcb500d0d</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_cmpswaps, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_delegate_8cpp.html</anchorfile>
      <anchor>a5c11e0cd21ee3e57d67ca01adba15ce1</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_cmpswap_targets, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_delegate_8cpp.html</anchorfile>
      <anchor>a518c9acd69303b9681f02f440b24ab30</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_fetchadds, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_delegate_8cpp.html</anchorfile>
      <anchor>a8d581e08f4bed0227b669ce5523856e1</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_fetchadd_targets, 0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Delegate.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_delegate_8hpp</filename>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <includes id="_r_d_m_a_aggregator_8hpp" name="RDMAAggregator.hpp" local="yes" imported="no">RDMAAggregator.hpp</includes>
    <includes id="_full_empty_local_8hpp" name="FullEmptyLocal.hpp" local="yes" imported="no">FullEmptyLocal.hpp</includes>
    <includes id="_condition_variable_8hpp" name="ConditionVariable.hpp" local="yes" imported="no">ConditionVariable.hpp</includes>
    <includes id="_delegate_base_8hpp" name="DelegateBase.hpp" local="yes" imported="no">DelegateBase.hpp</includes>
    <includes id="_global_completion_event_8hpp" name="GlobalCompletionEvent.hpp" local="yes" imported="no">GlobalCompletionEvent.hpp</includes>
    <includes id="_async_delegate_8hpp" name="AsyncDelegate.hpp" local="yes" imported="no">AsyncDelegate.hpp</includes>
    <class kind="class">Grappa::delegate::FetchAddCombiner</class>
    <namespace>Grappa</namespace>
    <namespace>Grappa::delegate</namespace>
    <member kind="define">
      <type>#define</type>
      <name>AUTO_INVOKE</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>ga9ae164bf8292c7e6e34286e77864fcf9</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_delegate_8hpp.html</anchorfile>
      <anchor>a98281318a8cb03ed3e8c3c70e8af3be4</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, flat_combiner_fetch_and_add_amount)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_delegate_8hpp.html</anchorfile>
      <anchor>a5dd736f07ec3b6834e5ed34b9e6f12bf</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_reads)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_delegate_8hpp.html</anchorfile>
      <anchor>a7e09d8a1c7b8c12ca5077e283ec2be40</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_read_targets)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_delegate_8hpp.html</anchorfile>
      <anchor>a7aea6f06227b4c44658a6f6f7efce2be</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_writes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_delegate_8hpp.html</anchorfile>
      <anchor>a85a0c3ff5c4b19b1d6e5a69beab1da82</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_write_targets)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_delegate_8hpp.html</anchorfile>
      <anchor>aa08117e12d2877d1e7f84773cebb675b</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_cmpswaps)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_delegate_8hpp.html</anchorfile>
      <anchor>adc18dc98e92bd1c49151bfd5877062cc</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_cmpswap_targets)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_delegate_8hpp.html</anchorfile>
      <anchor>a2e9499c3bcd7da836cfee898afb04f7a</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_fetchadds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_delegate_8hpp.html</anchorfile>
      <anchor>a628f31462adbf2a41e0e8c290a8ca746</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_fetchadd_targets)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>call</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>ga9314cb77365ab51d6fe4772c611921bc</anchor>
      <arglist>(Core dest, F f) -&gt; AUTO_INVOKE((impl::Specializer&lt; S, C, F &gt;::call(dest, f,&amp;F::operator())))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>call</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gab06aabe93dc0639eb0fe5f7108264ff2</anchor>
      <arglist>(GlobalAddress&lt; T &gt; t, F func) -&gt; AUTO_INVOKE((impl::call&lt; S, C &gt;(t, func,&amp;F::operator())))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>call</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gab520b647b2d0eb0971ed651c14dacb2f</anchor>
      <arglist>(Core dest, M mutex, F func) -&gt; decltype(func(mutex()))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>call_suspendable</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>ga92ca4e1cd9db98279ded5e3a55ff96f1</anchor>
      <arglist>(Core dest, F func) -&gt; decltype(func())</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>ga3e28e8fd8f1a8a22beca2301cb24a639</anchor>
      <arglist>(GlobalAddress&lt; T &gt; target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>ga13cb46277cd2bf8c03ae12952afdcaf4</anchor>
      <arglist>(GlobalAddress&lt; T &gt; target, U value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and_add</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gac416433d8fcb845ba67ef1f3509c1a45</anchor>
      <arglist>(GlobalAddress&lt; T &gt; target, U inc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compare_and_swap</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gafb8dd9514a98fe26b46110a980e25dd9</anchor>
      <arglist>(GlobalAddress&lt; T &gt; target, U cmp_val, V new_val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gacad9d4d47cb0c49667bfdd59c604c100</anchor>
      <arglist>(GlobalAddress&lt; T &gt; target, U inc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawnRemote</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gac3b9a55615b0754717c2b20ef63044c2</anchor>
      <arglist>(Core dest, F f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DelegateBase.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_delegate_base_8hpp</filename>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <includes id="_full_empty_local_8hpp" name="FullEmptyLocal.hpp" local="yes" imported="no">FullEmptyLocal.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_delegate_base_8hpp.html</anchorfile>
      <anchor>a2cbde40b0a2e544910f13cae760414ba</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_short_circuits)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_delegate_base_8hpp.html</anchorfile>
      <anchor>a7c77c75f69a4dfd70f188563dbf5263b</anchor>
      <arglist>(SummarizingMetric&lt; double &gt;, delegate_roundtrip_latency)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_delegate_base_8hpp.html</anchorfile>
      <anchor>ac973e43e399ec23ac59e82167025354f</anchor>
      <arglist>(SummarizingMetric&lt; double &gt;, delegate_network_latency)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_delegate_base_8hpp.html</anchorfile>
      <anchor>abea3aa675c37de170391bfb3a2037606</anchor>
      <arglist>(SummarizingMetric&lt; double &gt;, delegate_wakeup_latency)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_delegate_base_8hpp.html</anchorfile>
      <anchor>a8af960120476c7f75c6b35511ecb164c</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_ops)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_delegate_base_8hpp.html</anchorfile>
      <anchor>a0f391d0349660d9f6d16ebeaaf1e4a04</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, delegate_targets)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DictOut.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/tasks/</path>
    <filename>_dict_out_8hpp</filename>
    <class kind="class">Entry</class>
    <class kind="class">DictOut</class>
    <member kind="define">
      <type>#define</type>
      <name>DICT_ADD</name>
      <anchorfile>_dict_out_8hpp.html</anchorfile>
      <anchor>a90fcb24ae3fef8c091adef7e9f79deca</anchor>
      <arglist>(d, var)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExternalCountPayloadMessage.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_external_count_payload_message_8hpp</filename>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <class kind="class">Grappa::ExternalCountPayloadMessage</class>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type>Grappa::ExternalCountPayloadMessage Grappa::PayloadMessage</type>
      <name>__attribute__</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a6e66347e169115ff06e527ad77c2e321</anchor>
      <arglist>((aligned(64)))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExternalCountPayloadMessage</name>
      <anchorfile>_external_count_payload_message_8hpp.html</anchorfile>
      <anchor>aa712cc0e68284e7c5a1c31e665d74fa8</anchor>
      <arglist>(Core dest, T t, void *payload, size_t payload_size, uint64_t *count)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>mark_sent</name>
      <anchorfile>_external_count_payload_message_8hpp.html</anchorfile>
      <anchor>a2d2312f5c2fa633db20891ae447544a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ExternalCountPayloadMessage&lt; T &gt; *</type>
      <name>send_heap_message</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>ac841f71522852e7708be1cc644f3eb2a</anchor>
      <arglist>(Core dest, T t, void *payload, size_t payload_size, uint64_t *count)</arglist>
    </member>
    <member kind="variable">
      <type>uint64_t *</type>
      <name>count_</name>
      <anchorfile>_external_count_payload_message_8hpp.html</anchorfile>
      <anchor>a8e72435669e8a8032bf676feabdfc709</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FileIO.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_file_i_o_8cpp</filename>
    <includes id="_file_i_o_8hpp" name="FileIO.hpp" local="yes" imported="no">FileIO.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type></type>
      <name>DEFINE_bool</name>
      <anchorfile>_file_i_o_8cpp.html</anchorfile>
      <anchor>aa486bf9e09f4f8bc36e7a19b5282528a</anchor>
      <arglist>(optimize_for_lustre, true,&quot;Set MPI IO flags for faster Lustre performance&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FileIO.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_file_i_o_8hpp</filename>
    <includes id="_global_allocator_8hpp" name="GlobalAllocator.hpp" local="yes" imported="no">GlobalAllocator.hpp</includes>
    <includes id="_tasking_8hpp" name="Tasking.hpp" local="yes" imported="no">Tasking.hpp</includes>
    <includes id="_parallel_loop_8hpp" name="ParallelLoop.hpp" local="yes" imported="no">ParallelLoop.hpp</includes>
    <includes id="_cache_8hpp" name="Cache.hpp" local="yes" imported="no">Cache.hpp</includes>
    <class kind="struct">Grappa::File</class>
    <class kind="struct">Grappa::IODescriptor</class>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FNAME_LENGTH</name>
      <anchorfile>_file_i_o_8hpp.html</anchorfile>
      <anchor>aec3288ab4aa26c22d51e4bb59434682c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>for_buffered</name>
      <anchorfile>_file_i_o_8hpp.html</anchorfile>
      <anchor>a5a2843beff3f9092a2ffa188875ec4e4</anchor>
      <arglist>(i, n, start, end, nbuf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_uint64</name>
      <anchorfile>_file_i_o_8hpp.html</anchorfile>
      <anchor>a00f8300fe146414e70a9da1462ddeb27</anchor>
      <arglist>(io_blocks_per_node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_uint64</name>
      <anchorfile>_file_i_o_8hpp.html</anchorfile>
      <anchor>aae1e5c1cff6bcee5f6e96ada86bd18e6</anchor>
      <arglist>(io_blocksize_mb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_array</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga28fe44710a582b4534c81eef84596476</anchor>
      <arglist>(File &amp;f, GlobalAddress&lt; T &gt; array, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_array</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga2723b0cec7b9cdd83715bc383bbeb310</anchor>
      <arglist>(File &amp;f, bool asDirectory, GlobalAddress&lt; T &gt; array, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_array_unordered</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gaa36ea6df58c48bf54c2fd59547c890e0</anchor>
      <arglist>(std::string filename, GlobalAddress&lt; T &gt; array, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_array_unordered</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga3d61348ea7920b020f10f2ec89cd18d2</anchor>
      <arglist>(std::string filename, GlobalAddress&lt; T &gt; array, size_t nelem)</arglist>
    </member>
    <member kind="variable">
      <type>struct Grappa::File</type>
      <name>__attribute__</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gadd65fbbf5adaf182e37952d3d6618567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IODescriptor *</type>
      <name>aio_completed_stack</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gae02ceb162ea993d1710f3095058229f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FlatCombiner.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_flat_combiner_8cpp</filename>
    <includes id="_flat_combiner_8hpp" name="FlatCombiner.hpp" local="yes" imported="no">FlatCombiner.hpp</includes>
    <member kind="function">
      <type></type>
      <name>DEFINE_bool</name>
      <anchorfile>_flat_combiner_8cpp.html</anchorfile>
      <anchor>aac5718400d10f4926cd5b0b6b3a77ea5</anchor>
      <arglist>(flat_combining, true,&quot;Set flat combining mode: (currently just a bool)&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_bool</name>
      <anchorfile>_flat_combiner_8cpp.html</anchorfile>
      <anchor>ac869ccca0040aaa86c9daad97f6e3cb0</anchor>
      <arglist>(flat_combining_local_only, false,&quot;disable combining on master (serialize)&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FlatCombiner.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_flat_combiner_8hpp</filename>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <includes id="_global_allocator_8hpp" name="GlobalAllocator.hpp" local="yes" imported="no">GlobalAllocator.hpp</includes>
    <includes id="_locale_shared_memory_8hpp" name="LocaleSharedMemory.hpp" local="yes" imported="no">LocaleSharedMemory.hpp</includes>
    <includes id="_parallel_loop_8hpp" name="ParallelLoop.hpp" local="yes" imported="no">ParallelLoop.hpp</includes>
    <class kind="class">Grappa::FlatCombiner</class>
    <namespace>Grappa</namespace>
    <member kind="enumeration">
      <type></type>
      <name>FCStatus</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>acb42d77875bd5cf444f1f3160ca5db76</anchor>
      <arglist></arglist>
      <enumvalue file="namespace_grappa.html" anchor="acb42d77875bd5cf444f1f3160ca5db76ad9bdb7f467982d4a285d4e65baf771fc">SATISFIED</enumvalue>
      <enumvalue file="namespace_grappa.html" anchor="acb42d77875bd5cf444f1f3160ca5db76aeecba0068950a2df17c47e851e1eef14">BLOCKED</enumvalue>
      <enumvalue file="namespace_grappa.html" anchor="acb42d77875bd5cf444f1f3160ca5db76ac568b03df166c70fa975411ac9400645">MATCHED</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>_flat_combiner_8hpp.html</anchorfile>
      <anchor>a3b23faade8a6b274622150d5ae955590</anchor>
      <arglist>(flat_combining)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>_flat_combiner_8hpp.html</anchorfile>
      <anchor>ac09053e0c47184ee443420eb0c4c916f</anchor>
      <arglist>(flat_combining_local_only)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FullEmpty.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_full_empty_8hpp</filename>
    <includes id="_full_empty_local_8hpp" name="FullEmptyLocal.hpp" local="yes" imported="no">FullEmptyLocal.hpp</includes>
    <includes id="_delegate_8hpp" name="Delegate.hpp" local="yes" imported="no">Delegate.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type>void</type>
      <name>fill_remote</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga08cc992debd2459c04c2412361cb72f7</anchor>
      <arglist>(GlobalAddress&lt; FullEmpty&lt; T &gt;&gt; result_addr, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readFF</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga9cef2af61c52a6bea65625de747ca8b3</anchor>
      <arglist>(GlobalAddress&lt; FullEmpty&lt; T &gt;&gt; fe_addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeXF</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga27dbd4448ca94a3d7b58759f4288c6e6</anchor>
      <arglist>(GlobalAddress&lt; FullEmpty&lt; T &gt;&gt; fe_addr, const U &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FullEmptyLocal.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_full_empty_local_8hpp</filename>
    <includes id="_condition_variable_local_8hpp" name="ConditionVariableLocal.hpp" local="yes" imported="no">ConditionVariableLocal.hpp</includes>
    <class kind="class">Grappa::FullEmpty</class>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type>T</type>
      <name>writeXF</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gad306de5c289de2f249e814551a62d85b</anchor>
      <arglist>(FullEmpty&lt; T &gt; *fe_addr, T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>writeEF</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga63f6c01b0bc1fbb8f3a8b01177257bca</anchor>
      <arglist>(FullEmpty&lt; T &gt; *fe_addr, T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>writeFF</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga952c1e020c17e0264d3d738df66f3f8e</anchor>
      <arglist>(FullEmpty&lt; T &gt; *fe_addr, T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readXX</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gacb97e74af74ce0b9b664ea681d8f9b91</anchor>
      <arglist>(FullEmpty&lt; T &gt; *fe_addr)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readFF</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga38a19bdec882607fc363f0880fe6b954</anchor>
      <arglist>(FullEmpty&lt; T &gt; *fe_addr)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readFE</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga25fe08f26290a226f10c329e1102a5b6</anchor>
      <arglist>(FullEmpty&lt; T &gt; *fe_addr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>function_traits.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>function__traits_8hpp</filename>
    <class kind="struct">function_traits</class>
    <class kind="struct">function_traits&lt; ReturnType(ClassType::*)(Args...) const  &gt;</class>
    <class kind="struct">function_traits&lt; ReturnType(ClassType::*)(Args...) const  &gt;::arg</class>
  </compound>
  <compound kind="file">
    <name>GlobalAllocator.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_global_allocator_8cpp</filename>
    <includes id="_global_allocator_8hpp" name="GlobalAllocator.hpp" local="yes" imported="no">GlobalAllocator.hpp</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_global_allocator_8cpp.html</anchorfile>
      <anchor>aeffddc085508169091a91c227ec78f91</anchor>
      <arglist>(std::ostream &amp;o, const GlobalAllocator &amp;a)</arglist>
    </member>
    <member kind="variable">
      <type>GlobalAllocator *</type>
      <name>global_allocator</name>
      <anchorfile>_global_allocator_8cpp.html</anchorfile>
      <anchor>a49f875c4e7fa32f45bb1587c51ad16b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalAllocator.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_global_allocator_8hpp</filename>
    <includes id="_allocator_8hpp" name="Allocator.hpp" local="yes" imported="no">Allocator.hpp</includes>
    <includes id="_delegate_base_8hpp" name="DelegateBase.hpp" local="yes" imported="no">DelegateBase.hpp</includes>
    <class kind="class">GlobalAllocator</class>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>symmetric_static</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga14abf73b97a5832e89ae5a5249fdbbdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_global_allocator_8hpp.html</anchorfile>
      <anchor>aeffddc085508169091a91c227ec78f91</anchor>
      <arglist>(std::ostream &amp;o, const GlobalAllocator &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>global_alloc</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>af74993efb7bbea33d4e7e79953502cf1</anchor>
      <arglist>(size_t count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>global_free</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a0b29dfddf8e0c5d3c912565a0b1db6d0</anchor>
      <arglist>(GlobalAddress&lt; T &gt; address)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>symmetric_global_alloc</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a4d7e988484354f73edd1d56c5c07f7e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>GlobalAllocator *</type>
      <name>global_allocator</name>
      <anchorfile>_global_allocator_8hpp.html</anchorfile>
      <anchor>a49f875c4e7fa32f45bb1587c51ad16b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalBag.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_global_bag_8hpp</filename>
    <includes id="_grappa_8hpp" name="Grappa.hpp" local="no" imported="no">Grappa.hpp</includes>
    <class kind="class">Grappa::GlobalBag</class>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type>void</type>
      <name>forall</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a1ed4d8834b19ab66a22aebe5b92fd186</anchor>
      <arglist>(GlobalAddress&lt; GlobalBag&lt; T &gt;&gt; b, F body)</arglist>
    </member>
    <member kind="variable">
      <type>class Grappa::GlobalBag</type>
      <name>GRAPPA_BLOCK_ALIGNED</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>gabbe1235a6aa33dbc8145efff8a0c4cd7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalCompletionEvent.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_global_completion_event_8cpp</filename>
    <includes id="_global_completion_event_8hpp" name="GlobalCompletionEvent.hpp" local="yes" imported="no">GlobalCompletionEvent.hpp</includes>
    <member kind="function">
      <type></type>
      <name>DEFINE_bool</name>
      <anchorfile>_global_completion_event_8cpp.html</anchorfile>
      <anchor>a340915394bdfac206323a4fddac7df4b</anchor>
      <arglist>(flatten_completions, true,&quot;Flatten GlobalCompletionEvents.&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_completion_event_8cpp.html</anchorfile>
      <anchor>a30ef585339e0b0d287bac52e6c6eb246</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, gce_total_remote_completions, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_completion_event_8cpp.html</anchorfile>
      <anchor>a5ecf0a5199c8f240434cba8940927933</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, gce_completions_sent, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_completion_event_8cpp.html</anchorfile>
      <anchor>a028be6c743d4c8caa165418addec70b6</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, ce_remote_completions, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_completion_event_8cpp.html</anchorfile>
      <anchor>a5af1b1794d0287ad913236ac6b2be4ec</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, ce_completions, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_completion_event_8cpp.html</anchorfile>
      <anchor>a35cd5a0bf3ac8cdf701fae067846837b</anchor>
      <arglist>(CallbackMetric&lt; int64_t &gt;, gce_incomplete, []{return impl::local_gce.incomplete();})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_completion_event_8cpp.html</anchorfile>
      <anchor>aab42a8fb2335bb5d8f7f0eb99bda546b</anchor>
      <arglist>(CallbackMetric&lt; int64_t &gt;, gce_user_incomplete, []{int64_t sum=0;for(auto g:GlobalCompletionEvent::get_user_tracked()){sum+=g-&gt;incomplete();}return sum;})</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalCompletionEvent.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_global_completion_event_8hpp</filename>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_completion_event_8hpp" name="CompletionEvent.hpp" local="yes" imported="no">CompletionEvent.hpp</includes>
    <includes id="_tasking_8hpp" name="Tasking.hpp" local="yes" imported="no">Tasking.hpp</includes>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <includes id="_delegate_base_8hpp" name="DelegateBase.hpp" local="yes" imported="no">DelegateBase.hpp</includes>
    <includes id="_collective_8hpp" name="Collective.hpp" local="yes" imported="no">Collective.hpp</includes>
    <includes id="_timestamp_8hpp" name="Timestamp.hpp" local="yes" imported="no">Timestamp.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <class kind="struct">Grappa::CompletionTarget</class>
    <class kind="class">Grappa::GlobalCompletionEvent</class>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PRINT_MSG</name>
      <anchorfile>_global_completion_event_8hpp.html</anchorfile>
      <anchor>ae54e2e02b8cb2a81878098443dfa2f1e</anchor>
      <arglist>(m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>_global_completion_event_8hpp.html</anchorfile>
      <anchor>a9a5e6ffd036472ab14de72943cf00095</anchor>
      <arglist>(flatten_completions)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>_global_completion_event_8hpp.html</anchorfile>
      <anchor>ab242f540eaba5e7948c0843444d68fe6</anchor>
      <arglist>(enable_aggregation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_completion_event_8hpp.html</anchorfile>
      <anchor>a4d1724771a8b461419a9ce5a97d22147</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, gce_total_remote_completions)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_completion_event_8hpp.html</anchorfile>
      <anchor>a7b2855db6c6944f391467090bb1a9515</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, gce_completions_sent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompletionMessage</name>
      <anchorfile>_global_completion_event_8hpp.html</anchorfile>
      <anchor>a16c6c356d52d62d2f10461928d81f742</anchor>
      <arglist>(Core target=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>waiting_to_send</name>
      <anchorfile>_global_completion_event_8hpp.html</anchorfile>
      <anchor>a0bc25ad8bc1fde1cc1f2323f6bf3ee47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mark_sent</name>
      <anchorfile>_global_completion_event_8hpp.html</anchorfile>
      <anchor>a2d2312f5c2fa633db20891ae447544a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const size_t</type>
      <name>size</name>
      <anchorfile>_global_completion_event_8hpp.html</anchorfile>
      <anchor>ad946b8f6f79a9ee73d674f86a7964100</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CompletionTarget</type>
      <name>enroll</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga07bd1fb10deeb37fdaec5d0494be0d8a</anchor>
      <arglist>(GlobalAddress&lt; GlobalCompletionEvent &gt; ce, int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complete</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga6537761b39f5595a3d754483061a763c</anchor>
      <arglist>(GlobalAddress&lt; GlobalCompletionEvent &gt; ce, int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn</name>
      <anchorfile>group___tasking.html</anchorfile>
      <anchor>ga870395edc072b708200abb3d2e58bd04</anchor>
      <arglist>(TF tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>ae60d424e890e6dfc18f880b28b168127</anchor>
      <arglist>(F f)</arglist>
    </member>
    <member kind="variable">
      <type>Core</type>
      <name>target</name>
      <anchorfile>_global_completion_event_8hpp.html</anchorfile>
      <anchor>a3525a4b506b239918f69d5880f19638a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>completes_to_send</name>
      <anchorfile>_global_completion_event_8hpp.html</anchorfile>
      <anchor>a4bb4885d2af55406e49ca0b1a11994b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalCounter.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_global_counter_8hpp</filename>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <includes id="_flat_combiner_8hpp" name="FlatCombiner.hpp" local="yes" imported="no">FlatCombiner.hpp</includes>
    <includes id="_locale_shared_memory_8hpp" name="LocaleSharedMemory.hpp" local="yes" imported="no">LocaleSharedMemory.hpp</includes>
    <includes id="_global_allocator_8hpp" name="GlobalAllocator.hpp" local="yes" imported="no">GlobalAllocator.hpp</includes>
    <includes id="_collective_8hpp" name="Collective.hpp" local="yes" imported="no">Collective.hpp</includes>
    <class kind="class">Grappa::GlobalCounter</class>
    <class kind="struct">Grappa::GlobalCounter::Master</class>
    <class kind="struct">Grappa::GlobalCounter::Proxy</class>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>GlobalHashMap.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_global_hash_map_8cpp</filename>
    <includes id="_global_hash_set_8hpp" name="GlobalHashSet.hpp" local="yes" imported="no">GlobalHashSet.hpp</includes>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_hash_map_8cpp.html</anchorfile>
      <anchor>acbc7b6e0446673eb29d9d86298391b1f</anchor>
      <arglist>(SimpleMetric&lt; size_t &gt;, hashmap_insert_ops, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_hash_map_8cpp.html</anchorfile>
      <anchor>a721cbcc954ffb85fc324357207de43a7</anchor>
      <arglist>(SimpleMetric&lt; size_t &gt;, hashmap_insert_msgs, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_hash_map_8cpp.html</anchorfile>
      <anchor>a48584d1da23c1701ac61ebbb75c7e9e7</anchor>
      <arglist>(SimpleMetric&lt; size_t &gt;, hashmap_lookup_ops, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_hash_map_8cpp.html</anchorfile>
      <anchor>a278d52f2ace44ca586737edff0facda5</anchor>
      <arglist>(SimpleMetric&lt; size_t &gt;, hashmap_lookup_msgs, 0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalHashMap.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_global_hash_map_8hpp</filename>
    <includes id="_global_allocator_8hpp" name="GlobalAllocator.hpp" local="yes" imported="no">GlobalAllocator.hpp</includes>
    <includes id="_parallel_loop_8hpp" name="ParallelLoop.hpp" local="yes" imported="no">ParallelLoop.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <includes id="_flat_combiner_8hpp" name="FlatCombiner.hpp" local="yes" imported="no">FlatCombiner.hpp</includes>
    <class kind="class">Grappa::GlobalHashMap</class>
    <class kind="struct">Grappa::GlobalHashMap::Entry</class>
    <class kind="struct">Grappa::GlobalHashMap::ResultEntry</class>
    <class kind="struct">Grappa::GlobalHashMap::Cell</class>
    <class kind="struct">Grappa::GlobalHashMap::Proxy</class>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_hash_map_8hpp.html</anchorfile>
      <anchor>accfb277ef4fc83a5af5c7ba08c417883</anchor>
      <arglist>(SimpleMetric&lt; size_t &gt;, hashmap_insert_ops)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_hash_map_8hpp.html</anchorfile>
      <anchor>a9cafb52a761deb71d3351092c56ed9c0</anchor>
      <arglist>(SimpleMetric&lt; size_t &gt;, hashmap_insert_msgs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_hash_map_8hpp.html</anchorfile>
      <anchor>a8a2a9dba7c1f45e70dbaa252485f9303</anchor>
      <arglist>(SimpleMetric&lt; size_t &gt;, hashmap_lookup_ops)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_hash_map_8hpp.html</anchorfile>
      <anchor>abedd4d9b142fc7c8011d1f157b3b43cf</anchor>
      <arglist>(SimpleMetric&lt; size_t &gt;, hashmap_lookup_msgs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a86e9ff5650d22dfcf9226405071ee337</anchor>
      <arglist>(GlobalAddress&lt; GlobalHashMap&lt; K, V &gt;&gt; self, K key, F on_insert)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forall</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a1c507e85501aa5a02cee9c2dae4912fe</anchor>
      <arglist>(GlobalAddress&lt; GlobalHashMap&lt; T, V &gt;&gt; self, F visit)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalHashSet.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_global_hash_set_8cpp</filename>
    <includes id="_global_hash_set_8hpp" name="GlobalHashSet.hpp" local="yes" imported="no">GlobalHashSet.hpp</includes>
    <includes id="_simple_metric_impl_8hpp" name="SimpleMetricImpl.hpp" local="no" imported="no">SimpleMetricImpl.hpp</includes>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_hash_set_8cpp.html</anchorfile>
      <anchor>aaa925d2008f5e493db9c25e9ab00ed03</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, cell_traversal_length, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_hash_set_8cpp.html</anchorfile>
      <anchor>acfdfcbc9e03816f106d0bb3fe62285d0</anchor>
      <arglist>(SimpleMetric&lt; size_t &gt;, hashset_insert_ops, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_hash_set_8cpp.html</anchorfile>
      <anchor>a9c6afb794f5df43fd8b31f8c7c8b6994</anchor>
      <arglist>(SimpleMetric&lt; size_t &gt;, hashset_insert_msgs, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_hash_set_8cpp.html</anchorfile>
      <anchor>a117161258b2ad69f508005f33b34407f</anchor>
      <arglist>(SimpleMetric&lt; size_t &gt;, hashset_lookup_ops, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_hash_set_8cpp.html</anchorfile>
      <anchor>a3e89b4f7215335fe1975917bfb12014d</anchor>
      <arglist>(SimpleMetric&lt; size_t &gt;, hashset_lookup_msgs, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_hash_set_8cpp.html</anchorfile>
      <anchor>a8ef8a51cc056e2a01210cd927b1d4a73</anchor>
      <arglist>(SimpleMetric&lt; size_t &gt;, hashset_matched_lookups, 0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalHashSet.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_global_hash_set_8hpp</filename>
    <includes id="_global_allocator_8hpp" name="GlobalAllocator.hpp" local="yes" imported="no">GlobalAllocator.hpp</includes>
    <includes id="_parallel_loop_8hpp" name="ParallelLoop.hpp" local="yes" imported="no">ParallelLoop.hpp</includes>
    <includes id="_async_delegate_8hpp" name="AsyncDelegate.hpp" local="yes" imported="no">AsyncDelegate.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <includes id="_array_8hpp" name="Array.hpp" local="yes" imported="no">Array.hpp</includes>
    <includes id="_flat_combiner_8hpp" name="FlatCombiner.hpp" local="yes" imported="no">FlatCombiner.hpp</includes>
    <class kind="class">Grappa::GlobalHashSet</class>
    <class kind="struct">Grappa::GlobalHashSet::Entry</class>
    <class kind="struct">Grappa::GlobalHashSet::Cell</class>
    <class kind="struct">Grappa::GlobalHashSet::ResultEntry</class>
    <class kind="struct">Grappa::GlobalHashSet::Proxy</class>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_hash_set_8hpp.html</anchorfile>
      <anchor>af742462473ea3664423dd89255ba0476</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, cell_traversal_length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_hash_set_8hpp.html</anchorfile>
      <anchor>a9010fa2a605dc3d7c61bc6698508b1b0</anchor>
      <arglist>(SimpleMetric&lt; size_t &gt;, hashset_insert_ops)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_hash_set_8hpp.html</anchorfile>
      <anchor>afb544f6e8caa0660628d31c2970af212</anchor>
      <arglist>(SimpleMetric&lt; size_t &gt;, hashset_insert_msgs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_hash_set_8hpp.html</anchorfile>
      <anchor>a6f4af388044023472085836eb18b17c5</anchor>
      <arglist>(SimpleMetric&lt; size_t &gt;, hashset_lookup_ops)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_hash_set_8hpp.html</anchorfile>
      <anchor>a412aad3bfd3bbdb0ebdb628e9a4d9e35</anchor>
      <arglist>(SimpleMetric&lt; size_t &gt;, hashset_lookup_msgs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_hash_set_8hpp.html</anchorfile>
      <anchor>a817d2581b7bb2c78f78c1634f5c43c3e</anchor>
      <arglist>(SimpleMetric&lt; size_t &gt;, hashset_matched_lookups)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalMemory.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_global_memory_8cpp</filename>
    <includes id="_global_memory_8hpp" name="GlobalMemory.hpp" local="yes" imported="no">GlobalMemory.hpp</includes>
    <member kind="function">
      <type>size_t</type>
      <name>round_up_page_size</name>
      <anchorfile>_global_memory_8cpp.html</anchorfile>
      <anchor>a9f103472dfa52dfc4b6293704a07d260</anchor>
      <arglist>(size_t s)</arglist>
    </member>
    <member kind="variable">
      <type>GlobalMemory *</type>
      <name>global_memory</name>
      <anchorfile>_global_memory_8cpp.html</anchorfile>
      <anchor>aeaa643d320e1b9beaa8750bbddc70d9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalMemory.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_global_memory_8hpp</filename>
    <includes id="_global_memory_chunk_8hpp" name="GlobalMemoryChunk.hpp" local="yes" imported="no">GlobalMemoryChunk.hpp</includes>
    <includes id="_global_allocator_8hpp" name="GlobalAllocator.hpp" local="yes" imported="no">GlobalAllocator.hpp</includes>
    <class kind="class">GlobalMemory</class>
    <member kind="variable">
      <type>GlobalMemory *</type>
      <name>global_memory</name>
      <anchorfile>_global_memory_8hpp.html</anchorfile>
      <anchor>aeaa643d320e1b9beaa8750bbddc70d9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalMemoryChunk.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_global_memory_chunk_8cpp</filename>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_global_memory_chunk_8hpp" name="GlobalMemoryChunk.hpp" local="yes" imported="no">GlobalMemoryChunk.hpp</includes>
    <includes id="_locale_shared_memory_8hpp" name="LocaleSharedMemory.hpp" local="yes" imported="no">LocaleSharedMemory.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SHM_HUGETLB</name>
      <anchorfile>_global_memory_chunk_8cpp.html</anchorfile>
      <anchor>ac934a581f643233e1ac802d38d9178f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>USE_HUGEPAGES_DEFAULT</name>
      <anchorfile>_global_memory_chunk_8cpp.html</anchorfile>
      <anchor>a835341ff04455d15278277d3e8673959</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_bool</name>
      <anchorfile>_global_memory_chunk_8cpp.html</anchorfile>
      <anchor>a940c125c995244a3116af58af500c9a3</anchor>
      <arglist>(global_memory_use_hugepages, false,&quot;UNUSED: use 1GB huge pages for global heap&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_global_memory_chunk_8cpp.html</anchorfile>
      <anchor>a66e6126534ede36d9eef71f0fbcb959d</anchor>
      <arglist>(global_memory_per_node_base_address, 0x0000123400000000L,&quot;UNUSED: global memory base address&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalMemoryChunk.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_global_memory_chunk_8hpp</filename>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <class kind="class">GlobalMemoryChunk</class>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>GlobalQueue.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/tasks/</path>
    <filename>_global_queue_8cpp</filename>
    <includes id="_global_queue_8hpp" name="GlobalQueue.hpp" local="yes" imported="no">GlobalQueue.hpp</includes>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>aae240280aa26bb8257c100d97d92fcb0</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_pull_reserve_request_messages, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>a5253a5ef8be9353538b02c398c5f61ee</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_pull_reserve_request_total_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>afe55fabc45da9896a229b1fd86969b1b</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_pull_reserve_reply_messages, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>ab0a2cdd179f9e6a3e345bc584f407848</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_pull_reserve_reply_total_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>abac44b13e15c66dc543b8a9c1d1a1a9e</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_push_reserve_request_messages, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>a0e3d9c29a229c52bce24d1c50eea5751</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_push_reserve_request_total_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>a4f75e8bb8d77835f5458c18a62b1f7e5</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_push_entry_request_messages, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>a493d274562372d35b15a4492b1676073</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_push_entry_request_total_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>a8278e59e38eb1baddfccbc4739e5c51e</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_push_reserve_reply_messages, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>a1cfbd05c2b47ca305fc71d825cc2033f</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_push_reserve_reply_total_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>ab1f109e0661ea8ee3db4aa16ffb5fb62</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_pull_entry_request_messages, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>aefc80b7d30a07476d60b2414eddd14ad</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_pull_entry_request_total_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>a7882d3eca4825375e23c52c0a7bda21f</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_pull_entry_reply_messages, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>adfacf8b2761133d36d4cd9ac2c4de7ee</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_pull_entry_reply_total_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>a8e173e78ce10157d7926d1953bacb56e</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_pull_reserve_hadConsumer, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>acb4090c3eda217a289483531feea1942</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_pull_reserve_noConsumer, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>aedba9165b2afef4dc97a1262d978b988</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_push_request_accepted, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>a3680a218c6478a6c784662d6139e7113</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_push_request_rejected, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>afbf721ecfab3a5e4e8b0650ea8654f76</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_push_entry_hadConsumer, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_queue_8cpp.html</anchorfile>
      <anchor>ae58577f673730b42a446e86e970efa08</anchor>
      <arglist>(BasicMetric&lt; uint64_t &gt;, globalq_push_entry_noConsumer, 0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalQueue.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/tasks/</path>
    <filename>_global_queue_8hpp</filename>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">../Addressing.hpp</includes>
    <includes id="_global_allocator_8hpp" name="GlobalAllocator.hpp" local="yes" imported="no">../GlobalAllocator.hpp</includes>
    <includes id="_delegate_8hpp" name="Delegate.hpp" local="yes" imported="no">../Delegate.hpp</includes>
    <includes id="_cache_8hpp" name="Cache.hpp" local="yes" imported="no">../Cache.hpp</includes>
    <class kind="class">Grappa::Metrics::GlobalQueueMetrics</class>
    <namespace>Grappa</namespace>
    <namespace>Grappa::Metrics</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CAPACITY_PER_NODE</name>
      <anchorfile>_global_queue_8hpp.html</anchorfile>
      <anchor>ad7b330970d7478445d84500ec8977b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HOME_NODE</name>
      <anchorfile>_global_queue_8hpp.html</anchorfile>
      <anchor>a0f4163e1a97ad515ab7272d174bf6ff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>A_Entry</name>
      <anchorfile>_global_queue_8hpp.html</anchorfile>
      <anchor>a81726ce157b42bd5e391079ea4d8113b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>D_A_Entry</name>
      <anchorfile>_global_queue_8hpp.html</anchorfile>
      <anchor>a55875a47da8dd12e817d0a33ac2ab2c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>A_D_A_Entry</name>
      <anchorfile>_global_queue_8hpp.html</anchorfile>
      <anchor>aab43c9c2667b6c75d04bb2e2fb69d180</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalQueueMetrics</type>
      <name>global_queue_stats</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a7304e687e2e7286e11d10ff14e4534bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalVector.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_global_vector_8cpp</filename>
    <includes id="_global_vector_8hpp" name="GlobalVector.hpp" local="yes" imported="no">GlobalVector.hpp</includes>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_vector_8cpp.html</anchorfile>
      <anchor>aad5c051ec1c52dd8c1b8653400712b21</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, global_vector_push_ops, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_vector_8cpp.html</anchorfile>
      <anchor>a96e815d98b6a5fbb8f2f08b61f1858cb</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, global_vector_push_msgs, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_vector_8cpp.html</anchorfile>
      <anchor>abed63e2b91465cc2821c572e435fde8d</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, global_vector_pop_ops, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_vector_8cpp.html</anchorfile>
      <anchor>a7c6a152ca6eb97ed280f54e6161764f9</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, global_vector_pop_msgs, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_vector_8cpp.html</anchorfile>
      <anchor>ac9c81102b91adb69c0e805d7284432a9</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, global_vector_deq_ops, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_vector_8cpp.html</anchorfile>
      <anchor>a6ea97d3f11f6bc683cd428e650b31168</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, global_vector_deq_msgs, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_vector_8cpp.html</anchorfile>
      <anchor>a03fdac44078e9deeaecd0acf595fb024</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, global_vector_matched_pushes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_vector_8cpp.html</anchorfile>
      <anchor>adf61ca3fb63248c23763c87d24ba2c47</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, global_vector_matched_pops, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_vector_8cpp.html</anchorfile>
      <anchor>a41e621e53ee451436da7136c359bde6e</anchor>
      <arglist>(SummarizingMetric&lt; double &gt;, global_vector_push_latency, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_vector_8cpp.html</anchorfile>
      <anchor>a23e3d02f07e59fac2d5ace47aeb32f6b</anchor>
      <arglist>(SummarizingMetric&lt; double &gt;, global_vector_pop_latency, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_vector_8cpp.html</anchorfile>
      <anchor>add47ada5eb4b609573e51d629f8cce38</anchor>
      <arglist>(SummarizingMetric&lt; double &gt;, global_vector_deq_latency, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_global_vector_8cpp.html</anchorfile>
      <anchor>a0f13bfa1934ae2df7e868564b2832842</anchor>
      <arglist>(SummarizingMetric&lt; double &gt;, global_vector_master_combined, 0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalVector.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_global_vector_8hpp</filename>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_collective_8hpp" name="Collective.hpp" local="yes" imported="no">Collective.hpp</includes>
    <includes id="_global_allocator_8hpp" name="GlobalAllocator.hpp" local="yes" imported="no">GlobalAllocator.hpp</includes>
    <includes id="_cache_8hpp" name="Cache.hpp" local="yes" imported="no">Cache.hpp</includes>
    <includes id="_flat_combiner_8hpp" name="FlatCombiner.hpp" local="yes" imported="no">FlatCombiner.hpp</includes>
    <includes id="_parallel_loop_8hpp" name="ParallelLoop.hpp" local="yes" imported="no">ParallelLoop.hpp</includes>
    <includes id="_delegate_8hpp" name="Delegate.hpp" local="yes" imported="no">Delegate.hpp</includes>
    <class kind="class">Grappa::SuspendedDelegateQueue</class>
    <class kind="class">Grappa::GlobalVector</class>
    <class kind="struct">Grappa::GlobalVector::Master</class>
    <class kind="struct">Grappa::GlobalVector::Proxy</class>
    <class kind="struct">Grappa::GlobalVector::Range</class>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_vector_8hpp.html</anchorfile>
      <anchor>a8e18c9a81e65acce44f0a2445d9a63a1</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, global_vector_push_ops)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_vector_8hpp.html</anchorfile>
      <anchor>a4fb48a07a74d08bda0f25ad46ce8d661</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, global_vector_push_msgs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_vector_8hpp.html</anchorfile>
      <anchor>afc7a7e68f541b6fb3e1b1d555faac66f</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, global_vector_pop_ops)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_vector_8hpp.html</anchorfile>
      <anchor>ad18a15cb312d281597ad51fc2b4fdf99</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, global_vector_pop_msgs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_vector_8hpp.html</anchorfile>
      <anchor>a3851a05ac33ce4f3742742ef310077cf</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, global_vector_deq_ops)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_vector_8hpp.html</anchorfile>
      <anchor>aa8b9ea6bd706a7b2661b84d98c3d77c9</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, global_vector_deq_msgs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_vector_8hpp.html</anchorfile>
      <anchor>ab172b414cf5c31380cce87d89a81d631</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, global_vector_matched_pops)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_vector_8hpp.html</anchorfile>
      <anchor>a8e33ff86e9d2b1ed070f1fd9ecb73441</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, global_vector_matched_pushes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_vector_8hpp.html</anchorfile>
      <anchor>ad0f623dddae2b8e03c96ab6442b97711</anchor>
      <arglist>(SummarizingMetric&lt; double &gt;, global_vector_push_latency)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_vector_8hpp.html</anchorfile>
      <anchor>a34f43a4a47b70887ccab9a2fc98ef6f4</anchor>
      <arglist>(SummarizingMetric&lt; double &gt;, global_vector_deq_latency)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_vector_8hpp.html</anchorfile>
      <anchor>ac24f0e270f73d19a602507ea78cf677d</anchor>
      <arglist>(SummarizingMetric&lt; double &gt;, global_vector_pop_latency)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_global_vector_8hpp.html</anchorfile>
      <anchor>ae17616d5c003962176335c9ad757869e</anchor>
      <arglist>(SummarizingMetric&lt; double &gt;, global_vector_master_combined)</arglist>
    </member>
    <member kind="variable">
      <type>const Core</type>
      <name>MASTER</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>gae214c4f2d33524de8eb8bc336d6f6a67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Graph.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/graph/</path>
    <filename>_graph_8cpp</filename>
    <includes id="_graph_8hpp" name="Graph.hpp" local="yes" imported="no">Graph.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Graph.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/graph/</path>
    <filename>_graph_8hpp</filename>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="no" imported="no">Communicator.hpp</includes>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="no" imported="no">Addressing.hpp</includes>
    <includes id="_collective_8hpp" name="Collective.hpp" local="no" imported="no">Collective.hpp</includes>
    <includes id="_parallel_loop_8hpp" name="ParallelLoop.hpp" local="no" imported="no">ParallelLoop.hpp</includes>
    <includes id="_global_allocator_8hpp" name="GlobalAllocator.hpp" local="no" imported="no">GlobalAllocator.hpp</includes>
    <includes id="_delegate_8hpp" name="Delegate.hpp" local="no" imported="no">Delegate.hpp</includes>
    <includes id="_async_delegate_8hpp" name="AsyncDelegate.hpp" local="no" imported="no">AsyncDelegate.hpp</includes>
    <includes id="_array_8hpp" name="Array.hpp" local="no" imported="no">Array.hpp</includes>
    <includes id="_tuple_graph_8hpp" name="TupleGraph.hpp" local="yes" imported="no">TupleGraph.hpp</includes>
    <class kind="struct">Grappa::Empty</class>
    <class kind="struct">Grappa::Graph</class>
    <class kind="struct">Grappa::Graph::Edge</class>
    <class kind="struct">Grappa::AdjIterator</class>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OVERLOAD</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>ga654bb1c090bb3ceb861a4bfd74ac0bb3</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="typedef">
      <type>int64_t</type>
      <name>VertexID</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>gaba4880159fa2d1b4192538c5eee688fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AdjIterator&lt; G &gt;</type>
      <name>adj</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>ga6c416928a252552a745cd34526ecbf65</anchor>
      <arglist>(GlobalAddress&lt; G &gt; g, typename G::Vertex &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>AdjIterator&lt; G &gt;</type>
      <name>adj</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>ga54fb566e36dd360c4c595119840be672</anchor>
      <arglist>(GlobalAddress&lt; G &gt; g, GlobalAddress&lt; typename G::Vertex &gt; v)</arglist>
    </member>
    <member kind="function">
      <type>AdjIterator&lt; G &gt;</type>
      <name>adj</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>gad77bb4adddd0480478286d854c059aef</anchor>
      <arglist>(GlobalAddress&lt; G &gt; g, VertexID i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OVERLOAD</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>ga6c5d34aaf9546af9ce313a801e5934c4</anchor>
      <arglist>(SyncMode S=SyncMode::Blocking, GlobalCompletionEvent *C=&amp;impl::local_gce, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OVERLOAD</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>ga6ab22aa2cf82e7d4a56b4986263df8ac</anchor>
      <arglist>(GlobalCompletionEvent *C, SyncMode S=SyncMode::Blocking, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serial_for</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>ga1ba15c6220aea3dc5b3efbf1fdd795a2</anchor>
      <arglist>(AdjIterator&lt; G &gt; a, F body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forall</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>gac20551e77df87ef6621f445a2eb52159</anchor>
      <arglist>(GlobalAddress&lt; Graph&lt; V, E &gt;&gt; g, F loop_body)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Grappa.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_grappa_8cpp</filename>
    <includes id="_global_memory_8hpp" name="GlobalMemory.hpp" local="yes" imported="no">GlobalMemory.hpp</includes>
    <includes id="_task_8hpp" name="Task.hpp" local="yes" imported="no">tasks/Task.hpp</includes>
    <includes id="_cache_8hpp" name="Cache.hpp" local="yes" imported="no">Cache.hpp</includes>
    <includes id="_performance_tools_8hpp" name="PerformanceTools.hpp" local="yes" imported="no">PerformanceTools.hpp</includes>
    <includes id="_collective_8hpp" name="Collective.hpp" local="yes" imported="no">Collective.hpp</includes>
    <includes id="_metrics_tools_8hpp" name="MetricsTools.hpp" local="yes" imported="no">MetricsTools.hpp</includes>
    <includes id="_steal_queue_8hpp" name="StealQueue.hpp" local="yes" imported="no">tasks/StealQueue.hpp</includes>
    <includes id="_file_i_o_8hpp" name="FileIO.hpp" local="yes" imported="no">FileIO.hpp</includes>
    <includes id="_r_d_m_a_aggregator_8hpp" name="RDMAAggregator.hpp" local="yes" imported="no">RDMAAggregator.hpp</includes>
    <includes id="_locale_shared_memory_8hpp" name="LocaleSharedMemory.hpp" local="yes" imported="no">LocaleSharedMemory.hpp</includes>
    <includes id="_shared_message_pool_8hpp" name="SharedMessagePool.hpp" local="yes" imported="no">SharedMessagePool.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <includes id="_grappa_8hpp" name="Grappa.hpp" local="yes" imported="no">Grappa.hpp</includes>
    <namespace>Grappa</namespace>
    <namespace>google</namespace>
    <member kind="typedef">
      <type>void(*</type>
      <name>override_handler_t</name>
      <anchorfile>namespacegoogle.html</anchorfile>
      <anchor>a16ee460593cad2f219a4c03d9baf6597</anchor>
      <arglist>)(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_uint64</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>a890567633c50d67e04de9d0c02e400b4</anchor>
      <arglist>(num_starting_workers, 512,&quot;Number of starting workers in task-executer pool&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_bool</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>af6976007da888522a477dd4d39b8d222</anchor>
      <arglist>(set_affinity, false,&quot;Set processor affinity based on local rank&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>aed7a4eac89ec94cf31582f63d857c0b9</anchor>
      <arglist>(node_memsize,-1,&quot;User-specified node memory size; overrides autodetection&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_uint64</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>a1c1b7a1dd375af15bcc5327e2f90342b</anchor>
      <arglist>(io_blocks_per_node, 4,&quot;Maximum number of asynchronous IO operations to issue concurrently per node.&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_uint64</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>a8f453357f99c3bf03524cc1efeed6698</anchor>
      <arglist>(io_blocksize_mb, 4,&quot;Size of each asynchronous IO operation&apos;s buffer.&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>acd2a5ba2afdf4a0bfd1a6d699df8ed95</anchor>
      <arglist>(locale_shared_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_double</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>aa4ff288283bf1f7ada2908f3a56cea96</anchor>
      <arglist>(locale_shared_fraction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_double</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>a4c0d065f6bb8f9820fbb7ee5a8554583</anchor>
      <arglist>(locale_user_heap_fraction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_double</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>a732dae660b3c5b7c35a430c5a64a24a0</anchor>
      <arglist>(global_heap_fraction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>aea799afbdfdf47085a6bc92225aa8bc7</anchor>
      <arglist>(shared_pool_max_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>aeccab0a88880a1c32f2343ebe2a73061</anchor>
      <arglist>(global_memory_use_hugepages)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>a5ca1def5a8d64f95306757194c1783de</anchor>
      <arglist>(logtostderr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int32</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>a94556ace7c2a23e9bea2b1b30edbadb3</anchor>
      <arglist>(v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>global_heap_init</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a74fc633986a2fc14a1df80d3efc79d61</anchor>
      <arglist>(size_t init_size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Grappa_done</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>a986e379c4ea711bfdd8c6e5093e75f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OverrideDefaultSignalHandler</name>
      <anchorfile>namespacegoogle.html</anchorfile>
      <anchor>a316845d394d240007f9b36ae0b66fff6</anchor>
      <arglist>(override_handler_t handler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DumpStackTrace</name>
      <anchorfile>namespacegoogle.html</anchorfile>
      <anchor>a11ddcfa7e057d4868331aca1f55bd865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjust_footprints</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>a8551f7a05357efbf6b7d0c88b79b8866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Grappa_init</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>a32d4dc4d727f43ab30d1a72f17a3ab4e</anchor>
      <arglist>(int *argc_p, char **argv_p[], int64_t global_memory_size_bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Grappa_activate</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>a16c28b0a717ceaa942e0794354812d3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Grappa_global_queue_initialize</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>aafed1654f83c8df060a1d96ba078eb9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Grappa_global_queue_isInit</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>abb70141a4d19ac9490aa6f21436cdcf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Grappa_end_tasks</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>a2a8922f5deb1e008a23731e27f334f1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Grappa_finish</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>a1cc72656299a59523a06956d07e8af20</anchor>
      <arglist>(int retval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>af7b60a124d5f39fd448e002fa2a3e11f</anchor>
      <arglist>(int *argc_p, char **argv_p[], int64_t size=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>finalize</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a661c56b3ed1f67b0ae3228e67a738380</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Grappa_done_flag</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>ab82356a8cfd1f728643a8e5951f29e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Core *</type>
      <name>node_neighbors</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>a6f61ae25185bbef7cad85fa81d5dcfb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>tick_rate</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a8147fe9eb5940e2516172fe70e6000ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Worker *</type>
      <name>master_thread</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a3e3907937e4e1aca6bc5019ec38687e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>freeze_flag</name>
      <anchorfile>_grappa_8cpp.html</anchorfile>
      <anchor>a113cb2e671337747ee760725f3c9287d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Grappa.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_grappa_8hpp</filename>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_worker_8hpp" name="Worker.hpp" local="yes" imported="no">Worker.hpp</includes>
    <includes id="_tasking_scheduler_8hpp" name="TaskingScheduler.hpp" local="yes" imported="no">tasks/TaskingScheduler.hpp</includes>
    <includes id="_performance_tools_8hpp" name="PerformanceTools.hpp" local="yes" imported="no">PerformanceTools.hpp</includes>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <includes id="_tasking_8hpp" name="Tasking.hpp" local="yes" imported="no">Tasking.hpp</includes>
    <includes id="_state_timer_8hpp" name="StateTimer.hpp" local="yes" imported="no">StateTimer.hpp</includes>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <includes id="_delegate_8hpp" name="Delegate.hpp" local="yes" imported="no">Delegate.hpp</includes>
    <includes id="_async_delegate_8hpp" name="AsyncDelegate.hpp" local="yes" imported="no">AsyncDelegate.hpp</includes>
    <includes id="_collective_8hpp" name="Collective.hpp" local="yes" imported="no">Collective.hpp</includes>
    <includes id="_parallel_loop_8hpp" name="ParallelLoop.hpp" local="yes" imported="no">ParallelLoop.hpp</includes>
    <includes id="_global_allocator_8hpp" name="GlobalAllocator.hpp" local="yes" imported="no">GlobalAllocator.hpp</includes>
    <includes id="_array_8hpp" name="Array.hpp" local="yes" imported="no">Array.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_TEST_ARGS</name>
      <anchorfile>_grappa_8hpp.html</anchorfile>
      <anchor>a319fae853819981f369f058316ef6caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>unbound</name>
      <anchorfile>_grappa_8hpp.html</anchorfile>
      <anchor>a8c30457bc353d908bcd82438bc27c9ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>async</name>
      <anchorfile>_grappa_8hpp.html</anchorfile>
      <anchor>ada84521eeb4bb9ac422d21429806aff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>af7b60a124d5f39fd448e002fa2a3e11f</anchor>
      <arglist>(int *argc_p, char **argv_p[], int64_t size=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>finalize</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a661c56b3ed1f67b0ae3228e67a738380</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Grappa.md</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_grappa_8md</filename>
  </compound>
  <compound kind="file">
    <name>HistogramMetric.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_histogram_metric_8cpp</filename>
    <includes id="_histogram_metric_8hpp" name="HistogramMetric.hpp" local="yes" imported="no">HistogramMetric.hpp</includes>
    <namespace>Grappa</namespace>
    <namespace>Grappa::Metrics</namespace>
    <member kind="function">
      <type>void</type>
      <name>histogram_sample</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a932a94933dfd36f2a8afffa047abdc2b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HistogramMetric.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_histogram_metric_8hpp</filename>
    <includes id="_metric_base_8hpp" name="MetricBase.hpp" local="yes" imported="no">MetricBase.hpp</includes>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <class kind="class">Grappa::HistogramMetric</class>
    <namespace>Grappa</namespace>
    <namespace>Grappa::Metrics</namespace>
    <member kind="function">
      <type>void</type>
      <name>histogram_sample</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a932a94933dfd36f2a8afffa047abdc2b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IncoherentAcquirer.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_incoherent_acquirer_8cpp</filename>
    <includes id="_incoherent_acquirer_8hpp" name="IncoherentAcquirer.hpp" local="yes" imported="no">IncoherentAcquirer.hpp</includes>
    <includes id="common_8hpp" name="common.hpp" local="yes" imported="no">common.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_incoherent_acquirer_8cpp.html</anchorfile>
      <anchor>a05a1914e8775cc8b3677473d1f898f1f</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, acquire_ams, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_incoherent_acquirer_8cpp.html</anchorfile>
      <anchor>a41fffd90ed8e5faff80a4e1e92139d19</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, acquire_ams_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_incoherent_acquirer_8cpp.html</anchorfile>
      <anchor>adea855693c99f44a8935136acf8f2d7d</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, acquire_blocked, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_incoherent_acquirer_8cpp.html</anchorfile>
      <anchor>aaaad826c8a283ba92671e91c2674c1b0</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, acquire_blocked_ticks_total, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_incoherent_acquirer_8cpp.html</anchorfile>
      <anchor>acd0663507b781201cbb1c13b60a49e1b</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, acquire_network_ticks_total, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_incoherent_acquirer_8cpp.html</anchorfile>
      <anchor>ae82e3c6f7016cb7655bf0c32b0e1e6d6</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, acquire_wakeup_ticks_total, 0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IncoherentAcquirer.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_incoherent_acquirer_8hpp</filename>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <includes id="_tasking_scheduler_8hpp" name="TaskingScheduler.hpp" local="yes" imported="no">tasks/TaskingScheduler.hpp</includes>
    <class kind="class">IncoherentAcquirer</class>
    <class kind="class">IAMetrics</class>
    <class kind="class">IncoherentAcquirer</class>
    <class kind="struct">IncoherentAcquirer::RequestArgs</class>
  </compound>
  <compound kind="file">
    <name>IncoherentReleaser.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_incoherent_releaser_8cpp</filename>
    <includes id="_incoherent_releaser_8hpp" name="IncoherentReleaser.hpp" local="yes" imported="no">IncoherentReleaser.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_incoherent_releaser_8cpp.html</anchorfile>
      <anchor>a1b30c5347899f855b8752b0b86b3a0d7</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, release_ams, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_incoherent_releaser_8cpp.html</anchorfile>
      <anchor>a9636bd80bd55935d9a349dccfb746d3a</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, release_ams_bytes, 0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IncoherentReleaser.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_incoherent_releaser_8hpp</filename>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <includes id="_tasking_scheduler_8hpp" name="TaskingScheduler.hpp" local="yes" imported="no">tasks/TaskingScheduler.hpp</includes>
    <class kind="class">IncoherentReleaser</class>
    <class kind="class">IRMetrics</class>
    <class kind="class">IncoherentReleaser</class>
    <class kind="struct">IncoherentReleaser::RequestArgs</class>
  </compound>
  <compound kind="file">
    <name>KroneckerGenerator.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/graph/</path>
    <filename>_kronecker_generator_8cpp</filename>
    <includes id="_tuple_graph_8hpp" name="TupleGraph.hpp" local="yes" imported="no">TupleGraph.hpp</includes>
    <includes id="_parallel_loop_8hpp" name="ParallelLoop.hpp" local="yes" imported="no">ParallelLoop.hpp</includes>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>LocaleSharedMemory.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_locale_shared_memory_8cpp</filename>
    <includes id="_locale_shared_memory_8hpp" name="LocaleSharedMemory.hpp" local="yes" imported="no">LocaleSharedMemory.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_locale_shared_memory_8cpp.html</anchorfile>
      <anchor>a2bd3cc4e1357ac25194d696bc565e258</anchor>
      <arglist>(locale_shared_size, 0,&quot;Total shared memory between cores on node (when 0, defaults to locale_shared_fraction * total node memory)&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_double</name>
      <anchorfile>_locale_shared_memory_8cpp.html</anchorfile>
      <anchor>ac89c4668085fbfa55694f435c301f643</anchor>
      <arglist>(locale_shared_fraction, 0.5,&quot;Fraction of total node memory to allocate for Grappa&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_double</name>
      <anchorfile>_locale_shared_memory_8cpp.html</anchorfile>
      <anchor>aa0efc97c658dd79e4984ba4613da76be</anchor>
      <arglist>(locale_user_heap_fraction, 0.1,&quot;Fraction of locale shared memory to set aside for the user&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_double</name>
      <anchorfile>_locale_shared_memory_8cpp.html</anchorfile>
      <anchor>aa39e38243f054a20ac8868569de37ab7</anchor>
      <arglist>(global_heap_fraction, 0.25,&quot;Fraction of locale shared memory to set aside for global shared heap&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>_locale_shared_memory_8cpp.html</anchorfile>
      <anchor>a39ee29062d8973bfe1e9e9df58daf27c</anchor>
      <arglist>(node_memsize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>_locale_shared_memory_8cpp.html</anchorfile>
      <anchor>aeccab0a88880a1c32f2343ebe2a73061</anchor>
      <arglist>(global_memory_use_hugepages)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LocaleSharedMemory.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_locale_shared_memory_8hpp</filename>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>__LOCALE_SHARED_MEMORY_HPP__</name>
      <anchorfile>_locale_shared_memory_8hpp.html</anchorfile>
      <anchor>ac73f94c858c490fedd2fa26a276b698d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>locale_alloc</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga513650f0aa54bcb773e4d661ce46c775</anchor>
      <arglist>(size_t n=1)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>locale_alloc_aligned</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga61d5d896a65487f41e9a7533288ec660</anchor>
      <arglist>(size_t alignment, size_t n=1)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>locale_new</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>gab40a94f8698c8ad032dab7cf67cc26cf</anchor>
      <arglist>(Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>locale_new</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga05e445a68ba363b9639c11ffcc9c8373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>locale_new_array</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga43aafa32c14634d7f6f7faf54ed5c1c3</anchor>
      <arglist>(size_t n=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>locale_free</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>gaa4a3a0de4cfe636ab80665337cc8d7b0</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MaxMetric.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_max_metric_8cpp</filename>
    <includes id="_max_metric_8hpp" name="MaxMetric.hpp" local="yes" imported="no">MaxMetric.hpp</includes>
    <includes id="_max_metric_impl_8hpp" name="MaxMetricImpl.hpp" local="yes" imported="no">MaxMetricImpl.hpp</includes>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>MaxMetric.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_max_metric_8hpp</filename>
    <includes id="_metric_base_8hpp" name="MetricBase.hpp" local="yes" imported="no">MetricBase.hpp</includes>
    <class kind="class">Grappa::MaxMetric</class>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>MaxMetricImpl.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_max_metric_impl_8hpp</filename>
    <includes id="_max_metric_8hpp" name="MaxMetric.hpp" local="yes" imported="no">MaxMetric.hpp</includes>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <includes id="_completion_event_8hpp" name="CompletionEvent.hpp" local="yes" imported="no">CompletionEvent.hpp</includes>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>Message.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_message_8hpp</filename>
    <includes id="_message_base_8hpp" name="MessageBase.hpp" local="yes" imported="no">MessageBase.hpp</includes>
    <includes id="_message_base_impl_8hpp" name="MessageBaseImpl.hpp" local="yes" imported="no">MessageBaseImpl.hpp</includes>
    <includes id="_shared_message_pool_8hpp" name="SharedMessagePool.hpp" local="yes" imported="no">SharedMessagePool.hpp</includes>
    <class kind="class">Grappa::Message</class>
    <class kind="class">Grappa::PayloadMessage</class>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type>Grappa::Message Grappa::impl::MessageBase</type>
      <name>__attribute__</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gacabc44d6011d9326224811e47a96a6ef</anchor>
      <arglist>((aligned(64)))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Message</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>a840759a6e44179d1a96111e693a9ec08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Message</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>a72be15397e598158d6767cbe73c9c879</anchor>
      <arglist>(Core dest, T t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Message</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>a82be9d62c18c254e81250f10cca3002c</anchor>
      <arglist>(const Message &amp;m)=delete</arglist>
    </member>
    <member kind="function">
      <type>Message &amp;</type>
      <name>operator=</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>a5d036a3af0321dffdf88e0555bfc8393</anchor>
      <arglist>(const Message &amp;m)=delete</arglist>
    </member>
    <member kind="function">
      <type>Message &amp;</type>
      <name>operator=</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>a423f1fd313d91b8130b43af99f86c65a</anchor>
      <arglist>(Message &amp;&amp;m)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Message</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>aa4d570772adb65f3ba6a3be6d592624f</anchor>
      <arglist>(Message &amp;&amp;m)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Message</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>aa4070b0889efbb92d57ab43fe5d8f140</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typestr</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>a57acb79b8c39d0667002c63fa1212df9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>a3f534efce0b043d603eb8f5653268e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>a4442b1b9eab40e7939e1e01cdedcb7ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const size_t</type>
      <name>serialized_size</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>ac5d199c66aa422035259a92b1486d45b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const size_t</type>
      <name>size</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>af5fa5eac7598b3734428dab7388c96c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deliver_locally</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>a19ea0ae270847952b03b6e8595e0c8eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>serialize_to</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>a109dbc49c2ad9fcc06613f1761fa4dfa</anchor>
      <arglist>(char *p, size_t max_size)</arglist>
    </member>
    <member kind="function">
      <type>Grappa::PayloadMessage Grappa::impl::MessageBase</type>
      <name>__attribute__</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>gacabc44d6011d9326224811e47a96a6ef</anchor>
      <arglist>((aligned(64)))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PayloadMessage</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>a3e5e57c2004bfbe68de1d09c24793921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PayloadMessage</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>ad06d951331f6e988a3669a9ebf4998b4</anchor>
      <arglist>(Core dest, T t, void *payload, size_t payload_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PayloadMessage</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>ae80f1eeb7dc951aac75083edfc2af84f</anchor>
      <arglist>(const PayloadMessage &amp;m)=delete</arglist>
    </member>
    <member kind="function">
      <type>PayloadMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>a68dc6ca847ae463ebabf85fc6faac2df</anchor>
      <arglist>(const PayloadMessage &amp;m)=delete</arglist>
    </member>
    <member kind="function">
      <type>PayloadMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>a291772e815eef4792cb3158f9e43be9c</anchor>
      <arglist>(PayloadMessage &amp;&amp;m)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PayloadMessage</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>aadb572065907eb08cfd697a569107f15</anchor>
      <arglist>(PayloadMessage &amp;&amp;m)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PayloadMessage</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>af45c52b884577638e837d4d0cb99169a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_payload</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>aa68f22bb8afe242942c66dbe62e83229</anchor>
      <arglist>(void *payload, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delete_payload_after_send</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>a66dc28ce060b19a5b78d4c9f83648963</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>a2418727fc0fba4f52bc81883d6e3a5f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Message&lt; T &gt;</type>
      <name>message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga1b0faf3e8ee3ef69117c14c5d4547396</anchor>
      <arglist>(Core dest, T t)</arglist>
    </member>
    <member kind="function">
      <type>PayloadMessage&lt; T &gt;</type>
      <name>message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gab3bb6fb2dcd4b3e39012d2bdbb475267</anchor>
      <arglist>(Core dest, T t, void *payload, size_t payload_size)</arglist>
    </member>
    <member kind="function">
      <type>Message&lt; T &gt;</type>
      <name>send_message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga528d3be2db6c7577613bba8b60bf01d3</anchor>
      <arglist>(Core dest, T t)</arglist>
    </member>
    <member kind="function">
      <type>PayloadMessage&lt; T &gt;</type>
      <name>send_message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga6e65f7faed0d5d92611442f9b46cb3e8</anchor>
      <arglist>(Core dest, T t, void *payload, size_t payload_size)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>storage_</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>ab1094ec45491bbeda89a9633420f2182</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>payload_</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>ab502e7383aa7fdea135ff1aa172404ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>payload_size_</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>ade8f9e86cbef5a3fd330836551a56d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>delete_payload_after_send_</name>
      <anchorfile>_message_8hpp.html</anchorfile>
      <anchor>aa53bee4939c95efb38854abec9cf11c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MessageBase.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_message_base_8cpp</filename>
    <includes id="_aggregator_8hpp" name="Aggregator.hpp" local="yes" imported="no">Aggregator.hpp</includes>
    <includes id="_message_base_8hpp" name="MessageBase.hpp" local="yes" imported="no">MessageBase.hpp</includes>
    <includes id="_message_base_impl_8hpp" name="MessageBaseImpl.hpp" local="yes" imported="no">MessageBaseImpl.hpp</includes>
    <includes id="_condition_variable_8hpp" name="ConditionVariable.hpp" local="yes" imported="no">ConditionVariable.hpp</includes>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>MessageBase.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_message_base_8hpp</filename>
    <includes id="common_8hpp" name="common.hpp" local="yes" imported="no">common.hpp</includes>
    <includes id="_condition_variable_local_8hpp" name="ConditionVariableLocal.hpp" local="yes" imported="no">ConditionVariableLocal.hpp</includes>
    <includes id="_mutex_8hpp" name="Mutex.hpp" local="yes" imported="no">Mutex.hpp</includes>
    <includes id="_locale_shared_memory_8hpp" name="LocaleSharedMemory.hpp" local="yes" imported="no">LocaleSharedMemory.hpp</includes>
    <namespace>Grappa</namespace>
    <namespace>Grappa::SharedMessagePool</namespace>
    <member kind="typedef">
      <type>int16_t</type>
      <name>Core</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a3a0af41b6e127e7f96781ce84aa9d40e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga10f9c1f8a7a57a03d877938950bb97ac</anchor>
      <arglist>(impl::MessageBase *m, size_t sz)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mark_sent</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a2d2312f5c2fa633db20891ae447544a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>typestr</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a29f85cde13dc993263351837fc161c0f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>legacy_send</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a8f2a74e83b82dcb0843f0f4328291fff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>serialize_to</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a3d82f7961f68c9ee62187d0f676dd9bc</anchor>
      <arglist>(char *p, size_t max_size=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageBase</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>aa41fa9431a5298101123755fefb681d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageBase</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a093294c27099d3c3b0685dcb59322036</anchor>
      <arglist>(Core dest)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageBase</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a6907024fda866aa11cd329a50d94f976</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageBase</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a0c0390c8d8d921e37128e5182325ac55</anchor>
      <arglist>(const MessageBase &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>MessageBase &amp;</type>
      <name>operator=</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a21843728d6bd59f588b0dc3ad20498b6</anchor>
      <arglist>(const MessageBase &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>MessageBase &amp;</type>
      <name>operator=</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a6f31a6eb591c5ad219f5247500c93358</anchor>
      <arglist>(MessageBase &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageBase</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a1f4371331a9d786a114d0ba40a296622</anchor>
      <arglist>(MessageBase &amp;&amp;m)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>waiting_to_send</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a0bc25ad8bc1fde1cc1f2323f6bf3ee47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const size_t</type>
      <name>serialized_size</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a08a369e827135b69a72590d3d6a2fbbe</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const size_t</type>
      <name>size</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a582b11c0e1214ec2f1fd22ddf9e16b05</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enqueue</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a65c23553ddcbbaf8e5713aff6882ce45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enqueue</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a1047a33b971c1bfb3c285dbee8416a73</anchor>
      <arglist>(Core c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>locale_enqueue</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a9ab1c403a98a73f9b7399269dd31cdb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>locale_enqueue</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a377b637d31ddc4032dc591389d06b384</anchor>
      <arglist>(Core c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_immediate</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>ac0d57232b5c54e5523af97771e86d8ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_immediate</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a9e66077f7ccc3d74c1906105a2dcb2a3</anchor>
      <arglist>(Core c)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deliver_locally</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>af87282948850927b1e97e39fe8cd534c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delete_after_send</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>ad15611aa2ef7321173db4df239b37749</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a2418727fc0fba4f52bc81883d6e3a5f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>block_until_sent</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a9cca58a036dca2aee76b8e4a0bb2853f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>MessageBase *</type>
      <name>next_</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a3d57f5693731b29346230a567d13bcd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MessageBase *</type>
      <name>prefetch_</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a660472f50aff2fb5966a55507f52db54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConditionVariable</type>
      <name>cv_</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>ae4930eec9192061740066ddf6ecfe4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>delete_after_send_</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>ad8676cae98dbe23d3d1345e28783c359</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>is_enqueued_</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a48d6d931655b1335292554272838431f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>is_sent_</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a57d3673b6023f89311088e9f770de225</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>is_delivered_</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a79797e25158e55c73fea76e6771af23c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>is_moved_</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a7618cccd33a5be587c824dd9cb64b372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Core</type>
      <name>source_</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a3bc9721d369bf9439b67a1b3c0037df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Core</type>
      <name>destination_</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a1a8909b8ac08e5ca711dc12d1dad105b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>raw_</name>
      <anchorfile>_message_base_8hpp.html</anchorfile>
      <anchor>a9f6beb7330cc845fe7bc80cb97b62f1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MessageBaseImpl.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_message_base_impl_8hpp</filename>
    <includes id="common_8hpp" name="common.hpp" local="yes" imported="no">common.hpp</includes>
    <includes id="_message_base_8hpp" name="MessageBase.hpp" local="yes" imported="no">MessageBase.hpp</includes>
    <includes id="_r_d_m_a_aggregator_8hpp" name="RDMAAggregator.hpp" local="yes" imported="no">RDMAAggregator.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>__MESSAGE_BASE_IMPL_HPP__</name>
      <anchorfile>_message_base_impl_8hpp.html</anchorfile>
      <anchor>acaba9776f6bdab705df73933e5fbdfdb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MessagePool.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_message_pool_8cpp</filename>
    <includes id="_message_pool_8hpp" name="MessagePool.hpp" local="yes" imported="no">MessagePool.hpp</includes>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>_message_pool_8cpp.html</anchorfile>
      <anchor>a2a97db0f8a7b619add3420e510abc9aa</anchor>
      <arglist>(size_t size, Grappa::impl::MessagePoolBase &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MessagePool.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_message_pool_8hpp</filename>
    <includes id="_pool_allocator_8hpp" name="PoolAllocator.hpp" local="yes" imported="no">PoolAllocator.hpp</includes>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <class kind="class">Grappa::MessagePoolStatic</class>
    <class kind="class">Grappa::MessagePool</class>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>_message_pool_8hpp.html</anchorfile>
      <anchor>a2a97db0f8a7b619add3420e510abc9aa</anchor>
      <arglist>(size_t size, Grappa::impl::MessagePoolBase &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MetricBase.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_metric_base_8hpp</filename>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>Metrics.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_metrics_8cpp</filename>
    <includes id="_metric_base_8hpp" name="MetricBase.hpp" local="yes" imported="no">MetricBase.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <includes id="_simple_metric_impl_8hpp" name="SimpleMetricImpl.hpp" local="yes" imported="no">SimpleMetricImpl.hpp</includes>
    <includes id="_grappa_8hpp" name="Grappa.hpp" local="yes" imported="no">Grappa.hpp</includes>
    <includes id="_collective_8hpp" name="Collective.hpp" local="yes" imported="no">Collective.hpp</includes>
    <namespace>Grappa</namespace>
    <namespace>Grappa::Metrics</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PROFILER_FILENAME_LENGTH</name>
      <anchorfile>_metrics_8cpp.html</anchorfile>
      <anchor>aff036374a4df9e1dab835408cdb59b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_metrics_8cpp.html</anchorfile>
      <anchor>aa4028c03269b874d1fc7307bfdce0e32</anchor>
      <arglist>(stats_blob_ticks, 300000000000L,&quot;number of ticks to wait before dumping stats blob&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_string</name>
      <anchorfile>_metrics_8cpp.html</anchorfile>
      <anchor>a65029a80e35445ff0f7f63baee7432be</anchor>
      <arglist>(stats_blob_filename,&quot;stats.json&quot;,&quot;Stats blob filename&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_bool</name>
      <anchorfile>_metrics_8cpp.html</anchorfile>
      <anchor>a7c6fb891f3ca1733ee1c0f12c273347c</anchor>
      <arglist>(stats_blob_enable, true,&quot;Enable stats dumping&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_string</name>
      <anchorfile>_metrics_8cpp.html</anchorfile>
      <anchor>abdd8cd58cdaefe711bae80fe9f36c3e4</anchor>
      <arglist>(stats_blob_filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>aa152d23452727968868c2a05a8288886</anchor>
      <arglist>(MetricList &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a97bce41e248f7bf674b94d229001c71c</anchor>
      <arglist>(std::ostream &amp;out=std::cerr, MetricList &amp;stats=Grappa::impl::registered_stats(), const std::string &amp;legacy_stats=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge_and_print</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>aca9bbe0e21ee6db2c50a16a71b9de903</anchor>
      <arglist>(std::ostream &amp;out=std::cerr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge_and_dump_to_file</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a5885305b970c9a0361a742944e89b8d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump_stats_blob</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>ad93f838a8ca0402630a4d031edd1acd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>ad8251e7cf8b284d5243193fe2fce306e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_all_cores</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a051474b45ddbc61ef47e127ae9a9effd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_tracing</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a5d1f1b083a1ca74c0a276ffd26fd86cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_tracing_here</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a457a6426f95b5f174fa9fbf952edf5c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop_tracing_here</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a282d9e512fa6d6c465ab6172c241257c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop_tracing</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>acee0592f0f72403e5baf562e074e1f8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>addd864052a4b71fd2cab14978b2af510</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Metrics.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_metrics_8hpp</filename>
    <includes id="_metric_base_8hpp" name="MetricBase.hpp" local="yes" imported="no">MetricBase.hpp</includes>
    <includes id="_simple_metric_8hpp" name="SimpleMetric.hpp" local="yes" imported="no">SimpleMetric.hpp</includes>
    <includes id="_string_metric_8hpp" name="StringMetric.hpp" local="yes" imported="no">StringMetric.hpp</includes>
    <includes id="_summarizing_metric_8hpp" name="SummarizingMetric.hpp" local="yes" imported="no">SummarizingMetric.hpp</includes>
    <includes id="_callback_metric_8hpp" name="CallbackMetric.hpp" local="yes" imported="no">CallbackMetric.hpp</includes>
    <includes id="_max_metric_8hpp" name="MaxMetric.hpp" local="yes" imported="no">MaxMetric.hpp</includes>
    <namespace>Grappa</namespace>
    <namespace>Grappa::Metrics</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gaca7bf381c18a5f791155eb129c726fe7</anchor>
      <arglist>(type, name, arg1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga7f5ece86809bb5821095e992bf94f924</anchor>
      <arglist>(type, name)</arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; impl::MetricBase * &gt;</type>
      <name>MetricList</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a1b13a76f91c8d699d04a57ca34c9f206</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a97bce41e248f7bf674b94d229001c71c</anchor>
      <arglist>(std::ostream &amp;out=std::cerr, MetricList &amp;stats=Grappa::impl::registered_stats(), const std::string &amp;legacy_stats=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>aa152d23452727968868c2a05a8288886</anchor>
      <arglist>(MetricList &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge_and_print</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>aca9bbe0e21ee6db2c50a16a71b9de903</anchor>
      <arglist>(std::ostream &amp;out=std::cerr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge_and_dump_to_file</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a5885305b970c9a0361a742944e89b8d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump_stats_blob</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>ad93f838a8ca0402630a4d031edd1acd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>addd864052a4b71fd2cab14978b2af510</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>ad8251e7cf8b284d5243193fe2fce306e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_all_cores</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a051474b45ddbc61ef47e127ae9a9effd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_tracing</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a5d1f1b083a1ca74c0a276ffd26fd86cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_tracing_here</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a457a6426f95b5f174fa9fbf952edf5c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop_tracing</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>acee0592f0f72403e5baf562e074e1f8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop_tracing_here</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a282d9e512fa6d6c465ab6172c241257c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga7506f8eee493c73c91c5beeb016b7111</anchor>
      <arglist>(std::ostream &amp;o, const Grappa::impl::MetricBase &amp;stat)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MetricsTools.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_metrics_tools_8hpp</filename>
    <class kind="class">RunningStandardDeviation</class>
    <class kind="class">TotalMetric</class>
    <member kind="define">
      <type>#define</type>
      <name>MERGE_STAT_COUNT</name>
      <anchorfile>_metrics_tools_8hpp.html</anchorfile>
      <anchor>a9a2abb39f1dc02312b0e51c6f7da87ef</anchor>
      <arglist>(name, other)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MERGE_STAT_TOTAL</name>
      <anchorfile>_metrics_tools_8hpp.html</anchorfile>
      <anchor>a1d513b86b0e3285a5f6ef6dd75ccb599</anchor>
      <arglist>(name, other)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STRINGIFY</name>
      <anchorfile>_metrics_tools_8hpp.html</anchorfile>
      <anchor>a4689212d5a549893cabb9d7782eecfb6</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DICT_ADD_STAT_TOTAL</name>
      <anchorfile>_metrics_tools_8hpp.html</anchorfile>
      <anchor>a873cd6cad332547a40f0b1401db138f3</anchor>
      <arglist>(d, name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inc_avg</name>
      <anchorfile>_metrics_tools_8hpp.html</anchorfile>
      <anchor>a7e72954aa6c163d6f2f47b53de041989</anchor>
      <arglist>(double curr_avg, uint64_t count, double val)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>max2</name>
      <anchorfile>_metrics_tools_8hpp.html</anchorfile>
      <anchor>addefe3b311fa53d47bed4262f191c086</anchor>
      <arglist>(uint64_t a, uint64_t b)</arglist>
    </member>
    <member kind="function">
      <type>StatType</type>
      <name>stat_reduce</name>
      <anchorfile>_metrics_tools_8hpp.html</anchorfile>
      <anchor>a00ebfa4cd13bfa24ff1a7f35a07b25ba</anchor>
      <arglist>(const StatType &amp;a, const StatType &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Mutex.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_mutex_8hpp</filename>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_tasking_scheduler_8hpp" name="TaskingScheduler.hpp" local="yes" imported="no">TaskingScheduler.hpp</includes>
    <includes id="_synchronization_8hpp" name="Synchronization.hpp" local="yes" imported="no">Synchronization.hpp</includes>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <includes id="_condition_variable_local_8hpp" name="ConditionVariableLocal.hpp" local="yes" imported="no">ConditionVariableLocal.hpp</includes>
    <class kind="class">Grappa::Mutex</class>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a81c7e266c2e554a1d10e104046d29ac2</anchor>
      <arglist>(Mutex *t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trylock</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a2975c4b14aa78038878b3eaa92814c18</anchor>
      <arglist>(Mutex *t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_unlocked</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a0146884e44ffee06c1d1b5707abe05d7</anchor>
      <arglist>(Mutex *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a78c4f1011c916cae114063a5d10d8986</anchor>
      <arglist>(Mutex *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>aef028f67a25fc24e4af7c1b864505f61</anchor>
      <arglist>(GlobalAddress&lt; Mutex &gt; m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trylock</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a518b56ccfeecd7415bf2964888061023</anchor>
      <arglist>(GlobalAddress&lt; Mutex &gt; m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a02cf76a15f014e47a2766912301baf61</anchor>
      <arglist>(GlobalAddress&lt; Mutex &gt; m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NTBuffer.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_n_t_buffer_8cpp</filename>
    <includes id="_n_t_buffer_8hpp" name="NTBuffer.hpp" local="yes" imported="no">NTBuffer.hpp</includes>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>NTBuffer.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_n_t_buffer_8hpp</filename>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>BUFFER_SIZE</name>
      <anchorfile>_n_t_buffer_8hpp.html</anchorfile>
      <anchor>a6b20d41d6252e9871430c242cb1a56e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTBuffer</name>
      <anchorfile>_n_t_buffer_8hpp.html</anchorfile>
      <anchor>ac01d1454222f0c30b4f5e1ad405110fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>_n_t_buffer_8hpp.html</anchorfile>
      <anchor>a822baa224c73c9b4a970b5289ae66e4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>new_buffer</name>
      <anchorfile>_n_t_buffer_8hpp.html</anchorfile>
      <anchor>a09d60835ebcc85065862a1cb21171c7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; void *, int &gt;</type>
      <name>take_buffer</name>
      <anchorfile>_n_t_buffer_8hpp.html</anchorfile>
      <anchor>aa587b3cd0656c88f903d5b70d67b4b86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flush</name>
      <anchorfile>_n_t_buffer_8hpp.html</anchorfile>
      <anchor>a70970ad48097f3b77801d4c7f4598224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>actual_enqueue</name>
      <anchorfile>_n_t_buffer_8hpp.html</anchorfile>
      <anchor>a13e2635370af95d107f48e1a961c7295</anchor>
      <arglist>(uint64_t *word_p, int word_size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>enqueue</name>
      <anchorfile>_n_t_buffer_8hpp.html</anchorfile>
      <anchor>aaa6ea35c411f1a500f53a0573b235849</anchor>
      <arglist>(uint64_t *word_p, int word_size)</arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>localbuf_</name>
      <anchorfile>_n_t_buffer_8hpp.html</anchorfile>
      <anchor>ad1318e0d76d23bddde37522599c4d829</anchor>
      <arglist>[local_buffer_size]</arglist>
    </member>
    <member kind="variable">
      <type>uint64_t *</type>
      <name>buffer_</name>
      <anchorfile>_n_t_buffer_8hpp.html</anchorfile>
      <anchor>ae8f452f519943d24aed864a0888aecfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>position_</name>
      <anchorfile>_n_t_buffer_8hpp.html</anchorfile>
      <anchor>af530c0f421cbad2022cee31eea42f886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>local_position_</name>
      <anchorfile>_n_t_buffer_8hpp.html</anchorfile>
      <anchor>a774de56620b0362aec30cac979c828c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NTMessage.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_n_t_message_8cpp</filename>
    <includes id="_n_t_message_8hpp" name="NTMessage.hpp" local="yes" imported="no">NTMessage.hpp</includes>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>NTMessage.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_n_t_message_8hpp</filename>
    <namespace>Grappa</namespace>
    <member kind="typedef">
      <type>int16_t</type>
      <name>Core</name>
      <anchorfile>_n_t_message_8hpp.html</anchorfile>
      <anchor>a3a0af41b6e127e7f96781ce84aa9d40e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTMessageBase</name>
      <anchorfile>_n_t_message_8hpp.html</anchorfile>
      <anchor>a7ee970741242d7a90c22ccb411a5efed</anchor>
      <arglist>(Core dest, uint16_t size, uint32_t fp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTMessageBase</name>
      <anchorfile>_n_t_message_8hpp.html</anchorfile>
      <anchor>a75ed409176b70863b709c156c2716c04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTMessageBase</name>
      <anchorfile>_n_t_message_8hpp.html</anchorfile>
      <anchor>adfbb9d05677ef75591ebc586d4b37c5a</anchor>
      <arglist>(const NTMessageBase &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTMessageBase</name>
      <anchorfile>_n_t_message_8hpp.html</anchorfile>
      <anchor>ade2a37d934d9524f6002b209107ddcb7</anchor>
      <arglist>(NTMessageBase &amp;&amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTMessage</name>
      <anchorfile>_n_t_message_8hpp.html</anchorfile>
      <anchor>ae130e4a589d910a379759bcde48b050c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTMessage</name>
      <anchorfile>_n_t_message_8hpp.html</anchorfile>
      <anchor>abb1fa10bdc3842842adfe00b7b4d0f33</anchor>
      <arglist>(Core dest, T t)</arglist>
    </member>
    <member kind="function">
      <type>friend char *</type>
      <name>run_deserialize_and_call</name>
      <anchorfile>_n_t_message_8hpp.html</anchorfile>
      <anchor>a75dea8cec2604000d3d4cd2ef6338849</anchor>
      <arglist>(char *c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTMessage</name>
      <anchorfile>_n_t_message_8hpp.html</anchorfile>
      <anchor>a52f3df3acf4ea735e09cb5893c538bad</anchor>
      <arglist>(const NTMessage &amp;m)=delete</arglist>
    </member>
    <member kind="function">
      <type>NTMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>_n_t_message_8hpp.html</anchorfile>
      <anchor>a1f64c7f7d62d9713aaf1b52e687d08a0</anchor>
      <arglist>(const NTMessage &amp;m)=delete</arglist>
    </member>
    <member kind="function">
      <type>NTMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>_n_t_message_8hpp.html</anchorfile>
      <anchor>a74b8fee2cbb316c5a50aa2b911c9dbf8</anchor>
      <arglist>(NTMessage &amp;&amp;m)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NTMessage</name>
      <anchorfile>_n_t_message_8hpp.html</anchorfile>
      <anchor>ab2ca39efaa7f1f9c4570fe1ee0a61381</anchor>
      <arglist>(NTMessage &amp;&amp;m)=default</arglist>
    </member>
    <member kind="variable">
      <type>Core</type>
      <name>dest_</name>
      <anchorfile>_n_t_message_8hpp.html</anchorfile>
      <anchor>ae7d7314e8687359fc22082c2637dcd28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>size_</name>
      <anchorfile>_n_t_message_8hpp.html</anchorfile>
      <anchor>a2ed1144c56293e756013bd537bb3112b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>fp_</name>
      <anchorfile>_n_t_message_8hpp.html</anchorfile>
      <anchor>a78bb07ad926e0a0a2940e5c7eee586ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>storage_</name>
      <anchorfile>_n_t_message_8hpp.html</anchorfile>
      <anchor>ab1094ec45491bbeda89a9633420f2182</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParallelLoop.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_parallel_loop_8cpp</filename>
    <includes id="_parallel_loop_8hpp" name="ParallelLoop.hpp" local="yes" imported="no">ParallelLoop.hpp</includes>
    <includes id="_completion_event_8hpp" name="CompletionEvent.hpp" local="yes" imported="no">CompletionEvent.hpp</includes>
    <includes id="_global_completion_event_8hpp" name="GlobalCompletionEvent.hpp" local="yes" imported="no">GlobalCompletionEvent.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_parallel_loop_8cpp.html</anchorfile>
      <anchor>a46bda548104521394203446701e5944a</anchor>
      <arglist>(loop_threshold, 16,&quot;threshold for how small a group of iterations should be to perform them serially&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParallelLoop.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_parallel_loop_8hpp</filename>
    <includes id="_completion_event_8hpp" name="CompletionEvent.hpp" local="yes" imported="no">CompletionEvent.hpp</includes>
    <includes id="_condition_variable_8hpp" name="ConditionVariable.hpp" local="yes" imported="no">ConditionVariable.hpp</includes>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <includes id="_tasking_8hpp" name="Tasking.hpp" local="yes" imported="no">Tasking.hpp</includes>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_global_completion_event_8hpp" name="GlobalCompletionEvent.hpp" local="yes" imported="no">GlobalCompletionEvent.hpp</includes>
    <includes id="_barrier_8hpp" name="Barrier.hpp" local="yes" imported="no">Barrier.hpp</includes>
    <includes id="_collective_8hpp" name="Collective.hpp" local="yes" imported="no">Collective.hpp</includes>
    <includes id="function__traits_8hpp" name="function_traits.hpp" local="yes" imported="no">function_traits.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FORALL_HERE_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga26d8f38beec11c2ac6ca0dcb21d61535</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORALL_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga496ac706b889a39151f5f230e1293c1e</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>_parallel_loop_8hpp.html</anchorfile>
      <anchor>a8f08216fd22ad99d10636f1135220283</anchor>
      <arglist>(loop_threshold)</arglist>
    </member>
    <member kind="function">
      <type>GlobalCompletionEvent &amp;</type>
      <name>default_gce</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga13d0c5158646eeaac0bdcbe406abffe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forall_here</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gabbb9de70beb4444082d136d65c1ad22a</anchor>
      <arglist>(int64_t start, int64_t iters, F loop_body)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_HERE_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga52fb488a99dbaa95c3b9d02bd3f6afc2</anchor>
      <arglist>(TaskMode B, SyncMode S=SyncMode::Blocking, GlobalCompletionEvent *GCE=nullptr, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_HERE_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga6b706f6f75a9db4ad7c563aaddcab2a4</anchor>
      <arglist>(SyncMode S, GlobalCompletionEvent *GCE, TaskMode B=TaskMode::Bound, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_HERE_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga3d9ca6ee1346a410f561463173d54d20</anchor>
      <arglist>(SyncMode S, GlobalCompletionEvent *GCE, int64_t Threshold, TaskMode B=TaskMode::Bound)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_HERE_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gaabdbef5ebe07bd8e56ffb499e5f83bf0</anchor>
      <arglist>(GlobalCompletionEvent *GCE, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG, TaskMode B=TaskMode::Bound, SyncMode S=SyncMode::Blocking)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_HERE_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gab9fa3386ab8032333b1e9bc2ccd1a54b</anchor>
      <arglist>(int64_t Threshold, GlobalCompletionEvent *GCE=nullptr, TaskMode B=TaskMode::Bound, SyncMode S=SyncMode::Blocking)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga46e720d695f9b662f0f78724838417e0</anchor>
      <arglist>(TaskMode B=TaskMode::Bound, SyncMode S=SyncMode::Blocking, GlobalCompletionEvent *C=&amp;impl::local_gce, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga53f1a7c4703aae6e51f8d1ed6a2ce7fa</anchor>
      <arglist>(SyncMode S, TaskMode B=TaskMode::Bound, GlobalCompletionEvent *C=&amp;impl::local_gce, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga80c2d6b9782cc07da723a36929dbe996</anchor>
      <arglist>(GlobalCompletionEvent *C, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG, TaskMode B=TaskMode::Bound, SyncMode S=SyncMode::Blocking)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gac78f2e294c32a361e93bb3d1aec4cb66</anchor>
      <arglist>(int64_t Threshold, GlobalCompletionEvent *C=&amp;impl::local_gce, TaskMode B=TaskMode::Bound, SyncMode S=SyncMode::Blocking)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga4c51943d29119ebd9c68e580d7d6061f</anchor>
      <arglist>(TaskMode B, GlobalCompletionEvent *C, SyncMode S=SyncMode::Blocking, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Core, Core &gt;</type>
      <name>cores_with_elements</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gae0930fb0b5ce9c40ceb40f26e5c3be4a</anchor>
      <arglist>(GlobalAddress&lt; T &gt; base, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_cores_localized_async</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gadf2bb62c4a3ba1ae301a59dbec04cda7</anchor>
      <arglist>(GlobalAddress&lt; T &gt; base, int64_t nelems, F do_on_core)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forall</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gaaa1df0d48a6d67442b59fc06c16e9c33</anchor>
      <arglist>(GlobalAddress&lt; T &gt; base, int64_t nelems, F loop_body)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PerformanceTools.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_performance_tools_8cpp</filename>
    <includes id="_performance_tools_8hpp" name="PerformanceTools.hpp" local="yes" imported="no">PerformanceTools.hpp</includes>
    <includes id="_worker_8hpp" name="Worker.hpp" local="yes" imported="no">Worker.hpp</includes>
    <member kind="function">
      <type></type>
      <name>DEFINE_bool</name>
      <anchorfile>_performance_tools_8cpp.html</anchorfile>
      <anchor>adbe201d09deba3d862e132c524a9ce8a</anchor>
      <arglist>(record_grappa_events, true,&quot;Sampling rate of Grappa tracing events.&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump_all_task_profiles</name>
      <anchorfile>_performance_tools_8cpp.html</anchorfile>
      <anchor>a51ce2c9ffcd35c5800e2a7442af0f23f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PerformanceTools.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_performance_tools_8hpp</filename>
    <member kind="define">
      <type>#define</type>
      <name>SAMPLE_RATE</name>
      <anchorfile>_performance_tools_8hpp.html</anchorfile>
      <anchor>a4b76a0c2859cfd819a343a780070ee2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_PROFILE_CREATE</name>
      <anchorfile>_performance_tools_8hpp.html</anchorfile>
      <anchor>a6622e2faf0ff407c51d7df4ea744d2a6</anchor>
      <arglist>(timer, nametext, typetext, group)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_PROFILE_THREAD_START</name>
      <anchorfile>_performance_tools_8hpp.html</anchorfile>
      <anchor>aa4b3819b716e03756ee26818db50e355</anchor>
      <arglist>(timer, thread)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_PROFILE_THREAD_STOP</name>
      <anchorfile>_performance_tools_8hpp.html</anchorfile>
      <anchor>a5e57a884e89a59ba722b0bbba7696914</anchor>
      <arglist>(timer, thread)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_PROFILE_START</name>
      <anchorfile>_performance_tools_8hpp.html</anchorfile>
      <anchor>ad2e9ad1f9b2a8142c9468d3f1b021d78</anchor>
      <arglist>(timer)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_PROFILE_STOP</name>
      <anchorfile>_performance_tools_8hpp.html</anchorfile>
      <anchor>a508429ae9144f8b8058dc8b0859f5534</anchor>
      <arglist>(timer)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_THREAD_PROFILE</name>
      <anchorfile>_performance_tools_8hpp.html</anchorfile>
      <anchor>aae10fc1557eff64648e1ecb9e4f272d5</anchor>
      <arglist>(timer, nametext, typetext, group, thread)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_PROFILE</name>
      <anchorfile>_performance_tools_8hpp.html</anchorfile>
      <anchor>abace267d462563290b9ce5d7e6e34dde</anchor>
      <arglist>(timer, nametext, typetext, group)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_FUNCTION_PROFILE</name>
      <anchorfile>_performance_tools_8hpp.html</anchorfile>
      <anchor>aa9e53940547c448769ed52c72588e8e0</anchor>
      <arglist>(group)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_THREAD_FUNCTION_PROFILE</name>
      <anchorfile>_performance_tools_8hpp.html</anchorfile>
      <anchor>a65ec277536d7ea39c2f615b0d2d8abe2</anchor>
      <arglist>(group, thread)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>_performance_tools_8hpp.html</anchorfile>
      <anchor>ade114ae22c29c8f1a3646deefab0b190</anchor>
      <arglist>(record_grappa_events)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump_all_task_profiles</name>
      <anchorfile>_performance_tools_8hpp.html</anchorfile>
      <anchor>a51ce2c9ffcd35c5800e2a7442af0f23f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PoolAllocator.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_pool_allocator_8hpp</filename>
    <includes id="_locale_shared_memory_8hpp" name="LocaleSharedMemory.hpp" local="yes" imported="no">LocaleSharedMemory.hpp</includes>
    <class kind="class">Grappa::PoolAllocator</class>
    <class kind="class">Grappa::PoolAllocatorInternal</class>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>_pool_allocator_8hpp.html</anchorfile>
      <anchor>a9aab05922a18caccc286beb2be79eb42</anchor>
      <arglist>(size_t size, Grappa::PoolAllocator&lt; Base &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PushBuffer.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_push_buffer_8hpp</filename>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <includes id="_cache_8hpp" name="Cache.hpp" local="yes" imported="no">Cache.hpp</includes>
    <includes id="_delegate_8hpp" name="Delegate.hpp" local="yes" imported="no">Delegate.hpp</includes>
    <class kind="struct">PushBuffer</class>
  </compound>
  <compound kind="file">
    <name>RDMAAggregator.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_r_d_m_a_aggregator_8cpp</filename>
    <includes id="_r_d_m_a_aggregator_8hpp" name="RDMAAggregator.hpp" local="yes" imported="no">RDMAAggregator.hpp</includes>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <includes id="_aggregator_8hpp" name="Aggregator.hpp" local="yes" imported="no">Aggregator.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type></type>
      <name>DEFINE_bool</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a9576fb0bfc27caa717b8d52554a6f332</anchor>
      <arglist>(enable_aggregation, true,&quot;Enable message aggregation.&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a34ab238a8eca5afd643045bb4df62df9</anchor>
      <arglist>(target_size, 0,&quot;Deprecated; do not use. Target size for aggregated messages capacity flushes; disabled by default&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>ae18e76ba60a062d273cdcab7937a486f</anchor>
      <arglist>(aggregator_target_size, 1&lt;&lt; 10,&quot;Target size for aggregated messages&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a70f73dd720522cfc7054732d2e358ae9</anchor>
      <arglist>(log2_concurrent_receives)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>adc992ffb80c7276712d7302df6ff81a1</anchor>
      <arglist>(log2_concurrent_sends)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a6673a584b178b0cf6b21348d8c1c414c</anchor>
      <arglist>(rdma_workers_per_core, 1&lt;&lt; 6,&quot;Number of RDMA deaggregation worker threads&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>afd30b98a6dbfac9ef7dbef3089688c31</anchor>
      <arglist>(rdma_buffers_per_core, 1&lt;&lt; 7,&quot;Number of RDMA aggregated message buffers per core&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a6a9bf047f653df34dee6f55a2b356721</anchor>
      <arglist>(rdma_threshold, 64,&quot;Threshold in bytes below which we send immediately instead of using RDMA&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_string</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a31c2b650aed83a1fa0623cf104aa6e05</anchor>
      <arglist>(route_graph_filename,&quot;&quot;,&quot;Name of file for routing graph output (no output if empty)&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_bool</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a0ff87736d5bac6465ef2a8aae662403a</anchor>
      <arglist>(rdma_flush_on_idle, true,&quot;Flush RDMA buffers when idle&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a895ebbc6d6820edee40801446690049f</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, app_messages_enqueue, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a6f29a226b62d41a409d6277886334f6c</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, app_messages_enqueue_cas, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a1fd7975eefbb27833c2828d8da971051</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, app_messages_immediate, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a9035542a1eb023fcf077f8424ab76612</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, app_messages_serialized, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a0bd8338641c27ebf80c9986a308da8b4</anchor>
      <arglist>(SummarizingMetric&lt; int64_t &gt;, app_bytes_serialized, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>aa9d1f0de5a6f2af68d7f0f532bbb71fa</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, app_messages_deserialized, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>ade43eaf86e54ab4a0ab4f642d5757471</anchor>
      <arglist>(SummarizingMetric&lt; int64_t &gt;, app_nt_message_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>ae2fa2173ae6ba2b73e5402555a1c14ae</anchor>
      <arglist>(SummarizingMetric&lt; int64_t &gt;, aggregated_nt_message_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a288d9aeaef2bdc29b10659c9969029ee</anchor>
      <arglist>(SummarizingMetric&lt; int64_t &gt;, app_messages_delivered_locally, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a6b1f9834a43dcecd14cfa702bc08b936</anchor>
      <arglist>(SummarizingMetric&lt; int64_t &gt;, app_bytes_delivered_locally, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>af1c0264407c5993987e709a1153e5d3e</anchor>
      <arglist>(SummarizingMetric&lt; int64_t &gt;, rdma_message_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a89b8facc0fd3cfded7d9417bb21859af</anchor>
      <arglist>(SummarizingMetric&lt; int64_t &gt;, rdma_first_buffer_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a65a6ef2d4f820a2667a12ec23b5b5d69</anchor>
      <arglist>(SummarizingMetric&lt; int64_t &gt;, rdma_buffers_used_for_send, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>aa42ed873782a217bb74367c2e173a3fb</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_receive_start, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>af10799a27f31732f5df09633ed1fda0a</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_receive_end, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a36a665e46ce20c9413501b3960759685</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_send_start, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a208378de1304f1d67d88ec9ed8a4be4d</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_send_end, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a6cf88704ca0270e2b5c9fb4cc3ff3218</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_capacity_flushes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>ac0dd8fc26cb88aedcc7cc3a18adcbee3</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_idle_flushes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a1bfb9e1ded8749c2c4581d7bff1bd170</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_core_idle_flushes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>aa9a8818bff9693d9ab3e2534aa01831e</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_requested_flushes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a964061a1f2d3e819787094a6d7cc3d87</anchor>
      <arglist>(SummarizingMetric&lt; int64_t &gt;, rdma_buffers_inuse, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a8f745ecafb8b69f44f7ad69b802e0e19</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_buffers_blocked, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>accfc82db84d7469b826cbf0a4448d163</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_poll, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>ac0f88a042dec8b58b88a049f506fc3f7</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_poll_send, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a4391ac026b868f283f1e3ffcb736c577</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_poll_receive, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a551b173931819d0ff1ab9b8524391154</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_poll_send_success, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a72a8ed050295dc4495a1efc527113ecc</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_poll_receive_success, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a453a85599791baa2cd350e1c5d23ab6d</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_poll_yields, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>acc990b26079b0264528fb08be34609db</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_flush_send, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>aff4937c917daeb38f57af80c66fd7e82</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_flush_receive, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a9d8622eee11cd396c217ac22f5b13c9f</anchor>
      <arglist>(SummarizingMetric&lt; double &gt;, rdma_local_delivery_time, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a16e6b09a48d13abc4d1019326870a4eb</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, workers_send_blocked, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a0f0ef8c4ff546cc72d9152ec78cb043f</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, workers_idle_blocked, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>aace46bd8de952916313f7a2e6b66e9f9</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, workers_receive_blocked, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a59762c27d47df7f86a948550023414a6</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, workers_block_remote_buffer, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>aa167cede38c9a507331ace5767195270</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, workers_block_local_buffer, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>acf09df24d46922a90f78fe552f80733b</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, workers_active_send, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a14f7dfdc57e9edd14987db1dfa8ef156</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_enqueue_buffer_am, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>a66ff43accf4e55edbbe94e8414687105</anchor>
      <arglist>(HistogramMetric, app_bytes_sent_histogram, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>aa0776d29afcb4e0e1349f69b485b99b8</anchor>
      <arglist>(HistogramMetric, rdma_bytes_sent_histogram, 0)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Grappa_done_flag</name>
      <anchorfile>_r_d_m_a_aggregator_8cpp.html</anchorfile>
      <anchor>ab82356a8cfd1f728643a8e5951f29e1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RDMAAggregator.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_r_d_m_a_aggregator_8hpp</filename>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_worker_8hpp" name="Worker.hpp" local="yes" imported="no">Worker.hpp</includes>
    <includes id="_tasking_scheduler_8hpp" name="TaskingScheduler.hpp" local="yes" imported="no">tasks/TaskingScheduler.hpp</includes>
    <includes id="_tasking_8hpp" name="Tasking.hpp" local="yes" imported="no">Tasking.hpp</includes>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <includes id="_locale_shared_memory_8hpp" name="LocaleSharedMemory.hpp" local="yes" imported="no">LocaleSharedMemory.hpp</includes>
    <includes id="_message_base_8hpp" name="MessageBase.hpp" local="yes" imported="no">MessageBase.hpp</includes>
    <includes id="_r_d_m_a_buffer_8hpp" name="RDMABuffer.hpp" local="yes" imported="no">RDMABuffer.hpp</includes>
    <includes id="_condition_variable_local_8hpp" name="ConditionVariableLocal.hpp" local="yes" imported="no">ConditionVariableLocal.hpp</includes>
    <includes id="_counting_semaphore_local_8hpp" name="CountingSemaphoreLocal.hpp" local="yes" imported="no">CountingSemaphoreLocal.hpp</includes>
    <includes id="_full_empty_local_8hpp" name="FullEmptyLocal.hpp" local="yes" imported="no">FullEmptyLocal.hpp</includes>
    <includes id="_reuse_pool_8hpp" name="ReusePool.hpp" local="yes" imported="no">ReusePool.hpp</includes>
    <includes id="_reuse_list_8hpp" name="ReuseList.hpp" local="yes" imported="no">ReuseList.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <includes id="_n_t_message_8hpp" name="NTMessage.hpp" local="yes" imported="no">NTMessage.hpp</includes>
    <includes id="_n_t_buffer_8hpp" name="NTBuffer.hpp" local="yes" imported="no">NTBuffer.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="typedef">
      <type>Core</type>
      <name>Core</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a2d83baf92a7c7db4fe0db5a99b72ffc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>ab021ff4b9675cff7e8086c312d6802fc</anchor>
      <arglist>(target_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>af53876840cf76240336ce8f903b47eec</anchor>
      <arglist>(aggregator_target_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>af8cb5e0002f3c4743081f468eab7b0d8</anchor>
      <arglist>(aggregator_autoflush_ticks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>ab242f540eaba5e7948c0843444d68fe6</anchor>
      <arglist>(enable_aggregation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>aad8ff3b975fb029b8d3cba7783f69116</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, app_messages_enqueue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>a80cca695a6000f98534f525e80fc834c</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, app_messages_enqueue_cas)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>a122ce54e4d1fa54721bc7f03ef54446a</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, app_messages_immediate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>a57a79a01b14ea04a134933832fd15bee</anchor>
      <arglist>(SummarizingMetric&lt; int64_t &gt;, app_nt_message_bytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>aed5146ba6c425319147a2ea465b4e404</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_capacity_flushes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>a269931533bd13fd69c0df404ba9b197f</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_requested_flushes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>a7dbd9814d05003c062bb8cb8b9f78d16</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_poll)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>a1554000012ebaccac2a6d1e2e24d524d</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_poll_send)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>ab7214b0030503c160aa351397810a789</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_poll_receive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>a7e38dea110c0d19c0353ee8bc7f58020</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_poll_send_success)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>a0608303aae8e6e24773dd83196dab2ab</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_poll_receive_success)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>aa16eebf3f839feb6cbe5999355c6f88e</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, rdma_poll_yields)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>aaa6ef2bb391da30242f149b79d861826</anchor>
      <arglist>(SummarizingMetric&lt; double &gt;, rdma_local_delivery_time)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoreData</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>a22231aef3cacd8708cf8835343628a76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Grappa::impl::MessageList</type>
      <name>messages_</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>a56108de0d467c77ff0bcd80d5c3345fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Grappa::impl::PrefetchEntry</type>
      <name>prefetch_queue_</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>ad4f2ddc82bb2dfa084600fce862c35fe</anchor>
      <arglist>[prefetch_dist]</arglist>
    </member>
    <member kind="variable">
      <type>Core</type>
      <name>representative_core_</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>afe9ad104d0cc21d0c16a473c610a9d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Locale</type>
      <name>mylocale_</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>aedcca8259bd2fe63100191d91ec96c18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>pad32</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>a8c90d2c909557e3b4d784728e5858b87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConditionVariable</type>
      <name>send_cv_</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>a4f8018182f0e9f338eea72b6d1f8609f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Grappa::Timestamp</type>
      <name>last_sent_</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>ae675f973f851989dd108fbeb053e5c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Grappa::impl::ReusePool&lt; RDMABuffer, CountingSemaphore, remote_buffer_pool_size &gt;</type>
      <name>remote_buffers_</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>a8e8a0b44f39d06a48d5281635e016a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>locale_byte_count_</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>a1179eafab15a804f0895b2010eb121de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Grappa::Timestamp</type>
      <name>earliest_message_for_locale_</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>aa057088d3d2f14c06c0e52386923a2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>pad2</name>
      <anchorfile>_r_d_m_a_aggregator_8hpp.html</anchorfile>
      <anchor>a7006d8dd66b61312a6476c24b016008c</anchor>
      <arglist>[7]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RDMABuffer.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_r_d_m_a_buffer_8hpp</filename>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>BUFFER_SIZE</name>
      <anchorfile>_r_d_m_a_buffer_8hpp.html</anchorfile>
      <anchor>a6b20d41d6252e9871430c242cb1a56e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Reducer.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_reducer_8hpp</filename>
    <includes id="_collective_8hpp" name="Collective.hpp" local="no" imported="no">Collective.hpp</includes>
    <class kind="class">AllReducer</class>
    <class kind="class">ReducerImpl</class>
    <class kind="class">Reducer</class>
    <class kind="class">Reducer&lt; T, ReducerType::Add &gt;</class>
    <class kind="class">Reducer&lt; T, ReducerType::Or &gt;</class>
    <class kind="class">Reducer&lt; T, ReducerType::And &gt;</class>
    <class kind="class">Reducer&lt; T, ReducerType::Max &gt;</class>
    <class kind="class">Reducer&lt; T, ReducerType::Min &gt;</class>
    <class kind="class">CmpElement</class>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>Super</name>
      <anchorfile>_reducer_8hpp.html</anchorfile>
      <anchor>a2a0f08ba4e687f980b5d5cf434cc1527</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ReducerType</name>
      <anchorfile>_reducer_8hpp.html</anchorfile>
      <anchor>a83a796198571b0d978a1b57faf77b9e0</anchor>
      <arglist></arglist>
      <enumvalue file="_reducer_8hpp.html" anchor="a83a796198571b0d978a1b57faf77b9e0aec211f7c20af43e742bf2570c3cb84f9">Add</enumvalue>
      <enumvalue file="_reducer_8hpp.html" anchor="a83a796198571b0d978a1b57faf77b9e0a3a2d5fe857d8f9541136a124c2edec6c">Or</enumvalue>
      <enumvalue file="_reducer_8hpp.html" anchor="a83a796198571b0d978a1b57faf77b9e0ac33315685a0cba3ce53be378b3c7874b">And</enumvalue>
      <enumvalue file="_reducer_8hpp.html" anchor="a83a796198571b0d978a1b57faf77b9e0a6a061313d22e51e0f25b7cd4dc065233">Max</enumvalue>
      <enumvalue file="_reducer_8hpp.html" anchor="a83a796198571b0d978a1b57faf77b9e0a78d811e98514cd165dda532286610fd2">Min</enumvalue>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reduction</name>
      <anchorfile>_reducer_8hpp.html</anchorfile>
      <anchor>ab5bf6d1451d66365cfab1cdce765df56</anchor>
      <arglist>(T init, CF f)</arglist>
    </member>
    <member kind="variable">
      <type>class AllReducer</type>
      <name>GRAPPA_BLOCK_ALIGNED</name>
      <anchorfile>_reducer_8hpp.html</anchorfile>
      <anchor>ace72483400b143a2990407662d67fcde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>***Or to use it for global boolean</type>
      <name>checks</name>
      <anchorfile>_reducer_8hpp.html</anchorfile>
      <anchor>a5eb90477e0e5dec3689d9e353a25effc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ReuseList.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_reuse_list_8hpp</filename>
    <includes id="_full_empty_local_8hpp" name="FullEmptyLocal.hpp" local="yes" imported="no">FullEmptyLocal.hpp</includes>
    <includes id="_condition_variable_local_8hpp" name="ConditionVariableLocal.hpp" local="yes" imported="no">ConditionVariableLocal.hpp</includes>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>ReuseMessage.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_reuse_message_8hpp</filename>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <includes id="_reuse_list_8hpp" name="ReuseList.hpp" local="yes" imported="no">ReuseList.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <class kind="class">Grappa::ReuseMessage</class>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type>Grappa::ReuseMessage Grappa::Message</type>
      <name>__attribute__</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>gacabc44d6011d9326224811e47a96a6ef</anchor>
      <arglist>((aligned(64)))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ReuseMessage *</type>
      <name>get_next</name>
      <anchorfile>_reuse_message_8hpp.html</anchorfile>
      <anchor>a5df358974bfa5cefee4fc64bf6a4c36c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_next</name>
      <anchorfile>_reuse_message_8hpp.html</anchorfile>
      <anchor>aeb7788f6e25bef4a8ec90552f27f147f</anchor>
      <arglist>(ReuseMessage *next)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>mark_sent</name>
      <anchorfile>_reuse_message_8hpp.html</anchorfile>
      <anchor>a2d2312f5c2fa633db20891ae447544a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Grappa::impl::ReuseList&lt; ReuseMessage &gt; *</type>
      <name>list_</name>
      <anchorfile>_reuse_message_8hpp.html</anchorfile>
      <anchor>a8935f36b7a9990a5291f2d0cfcdc3dac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ReuseMessageList.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_reuse_message_list_8hpp</filename>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <includes id="_reuse_list_8hpp" name="ReuseList.hpp" local="yes" imported="no">ReuseList.hpp</includes>
    <includes id="_reuse_message_8hpp" name="ReuseMessage.hpp" local="yes" imported="no">ReuseMessage.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <class kind="class">Grappa::ReuseMessageList</class>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_reuse_message_list_8hpp.html</anchorfile>
      <anchor>a28614edb7e7c764eb16f9ba78c8a3f40</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, reuse_message_list_ops, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_reuse_message_list_8hpp.html</anchorfile>
      <anchor>ac970b6b0eb551d1a675fdcb7a716eaa1</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, reuse_message_list_blocked_ops, 0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ReusePool.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_reuse_pool_8hpp</filename>
    <includes id="_semaphore_8hpp" name="Semaphore.hpp" local="yes" imported="no">Semaphore.hpp</includes>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>Scheduler.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/tasks/</path>
    <filename>_scheduler_8hpp</filename>
    <includes id="_worker_8hpp" name="Worker.hpp" local="yes" imported="no">Worker.hpp</includes>
    <class kind="class">Grappa::Scheduler</class>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>Semaphore.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_semaphore_8hpp</filename>
    <includes id="_tasking_scheduler_8hpp" name="TaskingScheduler.hpp" local="yes" imported="no">TaskingScheduler.hpp</includes>
    <includes id="_synchronization_8hpp" name="Synchronization.hpp" local="yes" imported="no">Synchronization.hpp</includes>
    <includes id="_condition_variable_local_8hpp" name="ConditionVariableLocal.hpp" local="yes" imported="no">ConditionVariableLocal.hpp</includes>
    <includes id="_counting_semaphore_local_8hpp" name="CountingSemaphoreLocal.hpp" local="yes" imported="no">CountingSemaphoreLocal.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga0ea422ccad00a9098e197c9e8c9951db</anchor>
      <arglist>(Semaphore *s, int64_t incr=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrement</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga440cce540d8b12c421c3c48c133c8ab8</anchor>
      <arglist>(Semaphore *s, int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_decrement</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga80fcd0303be8f096417ed05a4f46cb78</anchor>
      <arglist>(Semaphore *s, int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>get_value</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gaaa921e944ca0d46b3cd144add50d273b</anchor>
      <arglist>(Semaphore *s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SharedMessagePool.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_shared_message_pool_8cpp</filename>
    <includes id="_shared_message_pool_8hpp" name="SharedMessagePool.hpp" local="yes" imported="no">SharedMessagePool.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <includes id="_condition_variable_8hpp" name="ConditionVariable.hpp" local="yes" imported="no">ConditionVariable.hpp</includes>
    <includes id="common_8hpp" name="common.hpp" local="yes" imported="no">common.hpp</includes>
    <includes id="_chunk_allocator_8hpp" name="ChunkAllocator.hpp" local="yes" imported="no">ChunkAllocator.hpp</includes>
    <namespace>Grappa</namespace>
    <namespace>Grappa::SharedMessagePool</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MAX_POOL_MESSAGE_SIZE</name>
      <anchorfile>_shared_message_pool_8cpp.html</anchorfile>
      <anchor>afc01e083fdb1513e94b66e0f5d27ee88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_POOL_MESSAGE_SIZE_PREALLOCATED_CUTOFF</name>
      <anchorfile>_shared_message_pool_8cpp.html</anchorfile>
      <anchor>ab40ddfac970a72a907f99654d0b00be4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_POOL_CACHELINE_COUNT</name>
      <anchorfile>_shared_message_pool_8cpp.html</anchorfile>
      <anchor>a920ede9fbfd169862a896ad412757b4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_shared_message_pool_8cpp.html</anchorfile>
      <anchor>ae937cc17d3decf6fc03538a941eca52b</anchor>
      <arglist>(shared_pool_chunk_size, 1&lt;&lt; 13,&quot;Number of bytes to allocate when shared message pool is empty&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>_shared_message_pool_8cpp.html</anchorfile>
      <anchor>acd2a5ba2afdf4a0bfd1a6d699df8ed95</anchor>
      <arglist>(locale_shared_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_shared_message_pool_8cpp.html</anchorfile>
      <anchor>a79ab0ca49010e0a8c5fb219b00acb387</anchor>
      <arglist>(shared_pool_max_size, 0,&quot;Soft maximum size (in bytes) of shared message pool storage (on each Core) (0 sets automatically base on memory fraction)&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_double</name>
      <anchorfile>_shared_message_pool_8cpp.html</anchorfile>
      <anchor>af2a9b978211c91057f7b09720ee2b3fd</anchor>
      <arglist>(shared_pool_memory_fraction, 0.25,&quot;Fraction of locale shared heap to use for shared pool&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_shared_message_pool_8cpp.html</anchorfile>
      <anchor>a611303beea594baca6698922ffb7d8f0</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, shared_message_pools_allocated, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_shared_message_pool_8cpp.html</anchorfile>
      <anchor>a018068ba746051c624529d82382007b9</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, shared_pool_alloc_1cl, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_shared_message_pool_8cpp.html</anchorfile>
      <anchor>a8d3f61938e8dd3f609c2b381360cdd45</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, shared_pool_alloc_2cl, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_shared_message_pool_8cpp.html</anchorfile>
      <anchor>ad533b1f64e3922879659ffa68c5e5b85</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, shared_pool_alloc_3cl, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_shared_message_pool_8cpp.html</anchorfile>
      <anchor>aa1f2a23af08c2b92564379fc436f6888</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, shared_pool_alloc_ncl, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_shared_message_pool_8cpp.html</anchorfile>
      <anchor>a9fb9bed7cb2bbaaf0d89b9f3c502d28f</anchor>
      <arglist>(SimpleMetric&lt; int64_t &gt;, shared_pool_alloc_toobig, 0)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>estimate_footprint</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gad2eeab83740d1071de86dd136d4f6e6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>adjust_footprint</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga7eebf9c77f58cdb967f14e1967adcc03</anchor>
      <arglist>(size_t target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga2b310467dda74e5fcf6c08d78d557b35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga977387ef51f496d550fab32712db2e24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>alloc</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gad187f11c851c22ee5b3e8032f0e6521b</anchor>
      <arglist>(size_t sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga10f9c1f8a7a57a03d877938950bb97ac</anchor>
      <arglist>(impl::MessageBase *m, size_t sz)</arglist>
    </member>
    <member kind="variable">
      <type>struct aligned_pool_allocator</type>
      <name>message_pool</name>
      <anchorfile>namespace_grappa_1_1_shared_message_pool.html</anchorfile>
      <anchor>ac25c60f4d10243b169b72561dc71c852</anchor>
      <arglist>[MAX_POOL_CACHELINE_COUNT]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SharedMessagePool.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_shared_message_pool_8hpp</filename>
    <includes id="_message_base_8hpp" name="MessageBase.hpp" local="yes" imported="no">MessageBase.hpp</includes>
    <includes id="_message_base_impl_8hpp" name="MessageBaseImpl.hpp" local="yes" imported="no">MessageBaseImpl.hpp</includes>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <namespace>Grappa</namespace>
    <namespace>Grappa::SharedMessagePool</namespace>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga2b310467dda74e5fcf6c08d78d557b35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga977387ef51f496d550fab32712db2e24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>estimate_footprint</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gad2eeab83740d1071de86dd136d4f6e6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>adjust_footprint</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga7eebf9c77f58cdb967f14e1967adcc03</anchor>
      <arglist>(size_t target)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>alloc</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gad187f11c851c22ee5b3e8032f0e6521b</anchor>
      <arglist>(size_t sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga10f9c1f8a7a57a03d877938950bb97ac</anchor>
      <arglist>(impl::MessageBase *m, size_t sz)</arglist>
    </member>
    <member kind="function">
      <type>Message&lt; T &gt; *</type>
      <name>heap_message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga02e73aabbd5b68bc579361d6373abae1</anchor>
      <arglist>(Core dest, T t)</arglist>
    </member>
    <member kind="function">
      <type>PayloadMessage&lt; T &gt; *</type>
      <name>heap_message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga4037ea3ff68f1f75cca95bbc4265d0bd</anchor>
      <arglist>(Core dest, T t, void *payload, size_t payload_size)</arglist>
    </member>
    <member kind="function">
      <type>Message&lt; T &gt; *</type>
      <name>send_heap_message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gae63d3f9cc55e63791365cd2d1811aa29</anchor>
      <arglist>(Core dest, T t)</arglist>
    </member>
    <member kind="function">
      <type>PayloadMessage&lt; T &gt; *</type>
      <name>send_heap_message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga0b75498515ae24362c7ae4f383d7a7d3</anchor>
      <arglist>(Core dest, T t, void *payload, size_t payload_size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleMetric.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_simple_metric_8cpp</filename>
    <includes id="_simple_metric_8hpp" name="SimpleMetric.hpp" local="yes" imported="no">SimpleMetric.hpp</includes>
    <includes id="_simple_metric_impl_8hpp" name="SimpleMetricImpl.hpp" local="yes" imported="no">SimpleMetricImpl.hpp</includes>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleMetric.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_simple_metric_8hpp</filename>
    <includes id="_metric_base_8hpp" name="MetricBase.hpp" local="yes" imported="no">MetricBase.hpp</includes>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleMetricImpl.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_simple_metric_impl_8hpp</filename>
    <includes id="_simple_metric_8hpp" name="SimpleMetric.hpp" local="yes" imported="no">SimpleMetric.hpp</includes>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <includes id="_completion_event_8hpp" name="CompletionEvent.hpp" local="yes" imported="no">CompletionEvent.hpp</includes>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>SmallLocalSet.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_small_local_set_8hpp</filename>
    <class kind="class">SmallLocalSet</class>
    <class kind="struct">SmallLocalSet::iterator</class>
    <member kind="function">
      <type>T</type>
      <name>intersect_choose_random</name>
      <anchorfile>_small_local_set_8hpp.html</anchorfile>
      <anchor>a03c89e06bbd1a6c1d7ec6b8ce22c92b0</anchor>
      <arglist>(const SmallLocalSet&lt; T, S &gt; &amp;a, const SmallLocalSet&lt; T, S &gt; &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stack.h</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>stack_8h</filename>
    <namespace>Grappa</namespace>
    <member kind="typedef">
      <type>void(*</type>
      <name>coro_func</name>
      <anchorfile>stack_8h.html</anchorfile>
      <anchor>afadeb119584df4e9b26846bccc2dbde2</anchor>
      <arglist>)(Grappa::Worker *, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>swapstacks</name>
      <anchorfile>stack_8h.html</anchorfile>
      <anchor>a22368901500aafd5853d73ac59125ea6</anchor>
      <arglist>(void **olds, void **news, void *ret) asm(&quot;_swapstacks&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makestack</name>
      <anchorfile>stack_8h.html</anchorfile>
      <anchor>a2dfdbc3d4c9defd5bd48fda24d675159</anchor>
      <arglist>(void **me, void **stack, coro_func f, Grappa::Worker *it) asm(&quot;_makestack&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StateTimer.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_state_timer_8cpp</filename>
    <includes id="_state_timer_8hpp" name="StateTimer.hpp" local="yes" imported="no">StateTimer.hpp</includes>
    <includes id="_grappa_8hpp" name="Grappa.hpp" local="yes" imported="no">Grappa.hpp</includes>
    <member kind="variable">
      <type>StateTimer *</type>
      <name>state_timer</name>
      <anchorfile>_state_timer_8cpp.html</anchorfile>
      <anchor>a80afd4324a401c92b45ad98e70f882b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StateTimer.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_state_timer_8hpp</filename>
    <class kind="class">StateTimer</class>
    <member kind="define">
      <type>#define</type>
      <name>TAU_CREATE_TASK</name>
      <anchorfile>_state_timer_8hpp.html</anchorfile>
      <anchor>a2d2f20a7731fbbaefcddfbb7e0f3aa39</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAU_PROFILER_START_TASK</name>
      <anchorfile>_state_timer_8hpp.html</anchorfile>
      <anchor>a4649f3876b078b1a2dc84aad7d6ba6b2</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TAU_PROFILER_STOP_TASK</name>
      <anchorfile>_state_timer_8hpp.html</anchorfile>
      <anchor>ac716a7f6d9ae0d4185d7e2d8980483b5</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STATE_TIMER_ON</name>
      <anchorfile>_state_timer_8hpp.html</anchorfile>
      <anchor>aef46c20c56d932d7ea024a7001e6995b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ST_START</name>
      <anchorfile>_state_timer_8hpp.html</anchorfile>
      <anchor>a588c816099dc1a16210a4fc8b768eb4f</anchor>
      <arglist>(timer)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ST_STOP</name>
      <anchorfile>_state_timer_8hpp.html</anchorfile>
      <anchor>a2ab6045367053ae09fa9af1c7e1f7149</anchor>
      <arglist>(timer)</arglist>
    </member>
    <member kind="variable">
      <type>StateTimer *</type>
      <name>state_timer</name>
      <anchorfile>_state_timer_8hpp.html</anchorfile>
      <anchor>a80afd4324a401c92b45ad98e70f882b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StealQueue.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/tasks/</path>
    <filename>_steal_queue_8cpp</filename>
    <includes id="_steal_queue_8hpp" name="StealQueue.hpp" local="yes" imported="no">StealQueue.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <includes id="_dict_out_8hpp" name="DictOut.hpp" local="yes" imported="no">DictOut.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>a5192e875fc6a35554f84984b1c123c84</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, stealq_reply_messages, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>add14050bf8fc6682c5d611874fb9776c</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, stealq_reply_total_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>acb7bfcb6019de10a0baaeac7180783c0</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, stealq_request_messages, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>aa9e6dbf7b06031bfbe8e63826be60c34</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, stealq_request_total_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>ac1c9d02d4e47e83de0cccd3c62566bcd</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, workshare_request_messages, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>a1c7b493158b1ef118bea60cc28f160d6</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, workshare_request_total_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>a4e44e6bd7f0204bbfa247cd8b5e81b75</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, workshare_reply_messages, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>ada3f547afe1a13b3a3ee6079309fd18c</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, workshare_reply_total_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>a8b221ec78c6b45789f77078f9fc6abe7</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, workshare_request_elements_denied, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>a319a4ccb84ed64ad7e398e2832db2559</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, workshare_request_elements_received, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>afde77f7b2cc3fe051a24e76cab73c61d</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, workshare_reply_elements_sent, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>a2583b52ab786203cf75eafd07591945e</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, workshare_requests_client_smaller, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>a4aec95ffe36a312ac2174a03fa05a3f8</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, workshare_requests_client_larger, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>ac2bd9110e530fe57c511160c26506083</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, workshare_reply_nacks, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>ae8d28bdd47579aef4aa85318763b4802</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, globalq_data_pull_request_messages, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>aa05521fad808bc7fd784cddd4c27cbd3</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, globalq_data_pull_request_total_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>a253d0d3631208bdce1d42ea3e1333a1d</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, globalq_data_pull_reply_messages, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>a31ee9bb0bd34198401d845664b7ebc44</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, globalq_data_pull_reply_total_bytes, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>a16197a4024d1ae95828b053c814e9e15</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, globalq_data_pull_request_num_elements, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_steal_queue_8cpp.html</anchorfile>
      <anchor>ac3d57421a16cf0ef4583c5c841f9c62d</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, globalq_data_pull_reply_num_elements, 0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StealQueue.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/tasks/</path>
    <filename>_steal_queue_8hpp</filename>
    <includes id="_performance_tools_8hpp" name="PerformanceTools.hpp" local="yes" imported="no">../PerformanceTools.hpp</includes>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">../Addressing.hpp</includes>
    <includes id="_full_empty_local_8hpp" name="FullEmptyLocal.hpp" local="yes" imported="no">../FullEmptyLocal.hpp</includes>
    <includes id="_locale_shared_memory_8hpp" name="LocaleSharedMemory.hpp" local="yes" imported="no">../LocaleSharedMemory.hpp</includes>
    <includes id="_aggregator_8hpp" name="Aggregator.hpp" local="yes" imported="no">../Aggregator.hpp</includes>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="no" imported="no">Communicator.hpp</includes>
    <includes id="_tasking_scheduler_8hpp" name="TaskingScheduler.hpp" local="no" imported="no">tasks/TaskingScheduler.hpp</includes>
    <includes id="_worker_8hpp" name="Worker.hpp" local="yes" imported="no">Worker.hpp</includes>
    <includes id="_message_8hpp" name="Message.hpp" local="no" imported="no">Message.hpp</includes>
    <includes id="_external_count_payload_message_8hpp" name="ExternalCountPayloadMessage.hpp" local="no" imported="no">ExternalCountPayloadMessage.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RECLAIM_SPACE</name>
      <anchorfile>_steal_queue_8hpp.html</anchorfile>
      <anchor>a8dba3f9bc9041bccfc673f0bc2989783</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_INT</name>
      <anchorfile>_steal_queue_8hpp.html</anchorfile>
      <anchor>a4d6b570c4898bbf4654a85762a84c1eb</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SS_NSTATES</name>
      <anchorfile>_steal_queue_8hpp.html</anchorfile>
      <anchor>a410f098df86e5f9eaca7fe3ee6501bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int16_t</type>
      <name>Core</name>
      <anchorfile>_steal_queue_8hpp.html</anchorfile>
      <anchor>a3a0af41b6e127e7f96781ce84aa9d40e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int32</name>
      <anchorfile>_steal_queue_8hpp.html</anchorfile>
      <anchor>aec023de29f8cd00869854602138a4bbf</anchor>
      <arglist>(chunk_size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StringMetric.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_string_metric_8cpp</filename>
    <includes id="_string_metric_8hpp" name="StringMetric.hpp" local="yes" imported="no">StringMetric.hpp</includes>
    <includes id="_string_metric_impl_8hpp" name="StringMetricImpl.hpp" local="yes" imported="no">StringMetricImpl.hpp</includes>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>StringMetric.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_string_metric_8hpp</filename>
    <includes id="_metric_base_8hpp" name="MetricBase.hpp" local="yes" imported="no">MetricBase.hpp</includes>
    <class kind="class">Grappa::StringMetric</class>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>StringMetricImpl.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_string_metric_impl_8hpp</filename>
    <includes id="_string_metric_8hpp" name="StringMetric.hpp" local="yes" imported="no">StringMetric.hpp</includes>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <includes id="_completion_event_8hpp" name="CompletionEvent.hpp" local="yes" imported="no">CompletionEvent.hpp</includes>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>SummarizingMetric.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_summarizing_metric_8cpp</filename>
    <includes id="_summarizing_metric_8hpp" name="SummarizingMetric.hpp" local="yes" imported="no">SummarizingMetric.hpp</includes>
    <includes id="_summarizing_metric_impl_8hpp" name="SummarizingMetricImpl.hpp" local="yes" imported="no">SummarizingMetricImpl.hpp</includes>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>SummarizingMetric.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_summarizing_metric_8hpp</filename>
    <includes id="_metric_base_8hpp" name="MetricBase.hpp" local="yes" imported="no">MetricBase.hpp</includes>
    <class kind="class">Grappa::SummarizingMetric</class>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>SummarizingMetricImpl.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_summarizing_metric_impl_8hpp</filename>
    <includes id="_summarizing_metric_8hpp" name="SummarizingMetric.hpp" local="yes" imported="no">SummarizingMetric.hpp</includes>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <includes id="_message_8hpp" name="Message.hpp" local="yes" imported="no">Message.hpp</includes>
    <includes id="_completion_event_8hpp" name="CompletionEvent.hpp" local="yes" imported="no">CompletionEvent.hpp</includes>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>SuspendedDelegate.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_suspended_delegate_8hpp</filename>
    <includes id="_tasking_scheduler_8hpp" name="TaskingScheduler.hpp" local="no" imported="no">TaskingScheduler.hpp</includes>
    <class kind="class">Grappa::SuspendedDelegate</class>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type>void</type>
      <name>invoke</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a71018ba89353f75b1a4159b95295b801</anchor>
      <arglist>(SuspendedDelegate *c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_suspended_delegate</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a695f264ea02b232ac3a716f1cb919567</anchor>
      <arglist>(Worker *w)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Synchronization.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_synchronization_8hpp</filename>
    <includes id="_tasking_scheduler_8hpp" name="TaskingScheduler.hpp" local="no" imported="no">TaskingScheduler.hpp</includes>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>Task.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/tasks/</path>
    <filename>_task_8cpp</filename>
    <includes id="_tasking_scheduler_8hpp" name="TaskingScheduler.hpp" local="yes" imported="no">TaskingScheduler.hpp</includes>
    <includes id="_task_8hpp" name="Task.hpp" local="yes" imported="no">Task.hpp</includes>
    <includes id="_performance_tools_8hpp" name="PerformanceTools.hpp" local="yes" imported="no">../PerformanceTools.hpp</includes>
    <includes id="common_8hpp" name="common.hpp" local="yes" imported="no">common.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <includes id="_steal_queue_8hpp" name="StealQueue.hpp" local="yes" imported="no">StealQueue.hpp</includes>
    <includes id="_grappa_8hpp" name="Grappa.hpp" local="yes" imported="no">../Grappa.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>publicQ</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>a2f476ac44ba8f77ae9e952250e3aaa41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_int32</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>ac275ac10d38b62422827f0817dab06bd</anchor>
      <arglist>(chunk_size, 10,&quot;Max amount of work transfered per load balance&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_string</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>a8b080860e88e40c16b1bedce067f8e29</anchor>
      <arglist>(load_balance,&quot;none&quot;,&quot;Type of dynamic load balancing {none (default), steal, share, gq}&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_uint64</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>aa0abbdd2ca2a237d74b2133d4726bcd5</anchor>
      <arglist>(global_queue_threshold, 1024,&quot;Threshold to trigger release of tasks to global queue&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>a589be0636ba3912d1b57b5dc46e33f2c</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, single_steal_successes_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>a1fdf9db9395ce9d2fb15833530f9334e</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, steal_amt_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>a117769fbf7af2999239bca4fd780f19c</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, single_steal_fails_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>af76571b2cd5fce4f49fa155a3b47f001</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, session_steal_successes_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>aeaf49a102bda382d82d3f906772439cb</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, session_steal_fails_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>a925434054bc6d09bc690e972f60f4f78</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, acquire_successes_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>a132345e102b0353168e003a18c3e6310</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, acquire_fails_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>aa5a202c85c993b0afab33569ca6d2837</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, releases_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>a8da8d43769dd702d934ee652e632335d</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, public_tasks_dequeued_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>ada78da77348d20171b5200a494c1f5b2</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, private_tasks_dequeued_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>ad363daa817a0085aefb8b55af523fbdf</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, remote_private_tasks_spawned_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>a0fdfcdac93bdd00d154bc1071ac638b5</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, globalq_pushes_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>aba9aee0e88e4839937fd6cced15b92aa</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, globalq_push_attempts_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>ac7a528c4a25bc5bed7c53835ad0114b8</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, globalq_elements_pushed_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>a8e464d9290b7f9b0e6a4d96dcf77ab2b</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, globalq_pulls_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>acf5a6350fab3f3a015832a2078e646bf</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, globalq_pull_attempts_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>a591e6be4041116e2ed42476e184d3228</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, globalq_elements_pulled_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>a8b4abf91110d066583640e65074c6917</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, workshare_tests_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>a40faebb0c258dd83f4a67c696cde4372</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, workshares_initiated_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>a83ac2c6bc3ee864b387afdd2805b8250</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, workshares_initiated_received_elements_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>afa1ade543b74895417171ad109e0d1ce</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, workshares_initiated_pushed_elements_, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>ad5f72b75192ec3c12ba1592e39fceace</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, sample_calls, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>a4ed7adcb6b04d67f79ceabc4c82f8337</anchor>
      <arglist>(CallbackMetric&lt; uint64_t &gt;, public_queue_size, [](){return Grappa::impl::global_task_manager.numLocalPublicTasks();})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>a764a145378eeeef519ef589825897032</anchor>
      <arglist>(CallbackMetric&lt; uint64_t &gt;, private_queue_size, [](){return Grappa::impl::global_task_manager.numLocalPrivateTasks();})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>a096c0dfbe1c04947ebb7222aa84924fd</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, tasks_heap_allocated, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>a4f5058b63f6d4b633135c15ac9bf2692</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, tasks_created, 0)</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>steal_queue_size</name>
      <anchorfile>_task_8cpp.html</anchorfile>
      <anchor>ad477e1a5ef284bc2fcb8dbff5ecfafba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Task.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/tasks/</path>
    <filename>_task_8hpp</filename>
    <includes id="_worker_8hpp" name="Worker.hpp" local="yes" imported="no">Worker.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PRIVATEQ_LIFO</name>
      <anchorfile>_task_8hpp.html</anchorfile>
      <anchor>acb59463e703a6b1bc315e85d263d95b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Tasking.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_tasking_8hpp</filename>
    <includes id="_task_8hpp" name="Task.hpp" local="yes" imported="no">tasks/Task.hpp</includes>
    <includes id="_tasking_scheduler_8hpp" name="TaskingScheduler.hpp" local="yes" imported="no">tasks/TaskingScheduler.hpp</includes>
    <includes id="_state_timer_8hpp" name="StateTimer.hpp" local="yes" imported="no">StateTimer.hpp</includes>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <class kind="struct">remote_task_spawn_args</class>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>STATIC_ASSERT_SIZE_8</name>
      <anchorfile>_tasking_8hpp.html</anchorfile>
      <anchor>aa1e160add04321dd52b9290857251dc7</anchor>
      <arglist>(type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_uint64</name>
      <anchorfile>_tasking_8hpp.html</anchorfile>
      <anchor>a5d8ccebf5b8e100208a131fedefbb593</anchor>
      <arglist>(num_starting_workers)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_tasking_8hpp.html</anchorfile>
      <anchor>a04551785fd3fa3dd3cf09cdf3b510bde</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, tasks_heap_allocated)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_tasking_8hpp.html</anchorfile>
      <anchor>a91005539f094b0213adbbf012455344f</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, tasks_created)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Grappa_global_queue_initialize</name>
      <anchorfile>_tasking_8hpp.html</anchorfile>
      <anchor>aafed1654f83c8df060a1d96ba078eb9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Grappa_end_tasks</name>
      <anchorfile>_tasking_8hpp.html</anchorfile>
      <anchor>a2a8922f5deb1e008a23731e27f334f1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>privateTask</name>
      <anchorfile>group___tasking.html</anchorfile>
      <anchor>gaf80429bfcdf0167257fdc0fcc02842fb</anchor>
      <arglist>(TF tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>publicTask</name>
      <anchorfile>group___tasking.html</anchorfile>
      <anchor>gac76febfd95f119e47f8d2b77ba779669</anchor>
      <arglist>(TF tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_worker</name>
      <anchorfile>group___tasking.html</anchorfile>
      <anchor>ga1de878db1bbbe31c277e36f9ca7bee47</anchor>
      <arglist>(TF &amp;&amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn</name>
      <anchorfile>group___tasking.html</anchorfile>
      <anchor>gafa22065aa5dcd33b21d43655c8e27d0a</anchor>
      <arglist>(F f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>group___tasking.html</anchorfile>
      <anchor>ga1fa04570855ffc3d360a5264f950eb24</anchor>
      <arglist>(FP fp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Grappa_privateTask</name>
      <anchorfile>_tasking_8hpp.html</anchorfile>
      <anchor>abcaefaeae1b7ae4ff0ad61e54641442b</anchor>
      <arglist>(void(*fn_p)(A0, A1, A2), A0 arg0, A1 arg1, A2 arg2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Grappa_privateTask</name>
      <anchorfile>_tasking_8hpp.html</anchorfile>
      <anchor>a6c1f8ec1addc9bdaecab3cb14613811d</anchor>
      <arglist>(void(*fn_p)(A0, A1), A0 arg, A1 shared_arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Grappa_privateTask</name>
      <anchorfile>_tasking_8hpp.html</anchorfile>
      <anchor>a798bb914dd93d4d333f1e2fba2021b9f</anchor>
      <arglist>(void(*fn_p)(T), T arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Grappa_publicTask</name>
      <anchorfile>_tasking_8hpp.html</anchorfile>
      <anchor>ae2fd2e0fbb5fce7ab781c08f737bc6c3</anchor>
      <arglist>(void(*fn_p)(A0, A1, A2), A0 arg0, A1 arg1, A2 arg2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Grappa_publicTask</name>
      <anchorfile>_tasking_8hpp.html</anchorfile>
      <anchor>a6f91fbf7743c74ff18e02935a51c1cc5</anchor>
      <arglist>(void(*fn_p)(A0, A1), A0 arg, A1 shared_arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Grappa_publicTask</name>
      <anchorfile>_tasking_8hpp.html</anchorfile>
      <anchor>aa40bc4bb8aa3918d02aa127b32d25574</anchor>
      <arglist>(void(*fn_p)(A0), A0 arg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Grappa_run_user_main</name>
      <anchorfile>_tasking_8hpp.html</anchorfile>
      <anchor>a688ce206d35fbab2c406ef44b7c11a6b</anchor>
      <arglist>(void(*fp)(A), A args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Grappa_remote_privateTask</name>
      <anchorfile>_tasking_8hpp.html</anchorfile>
      <anchor>a4d25ca45ff7ecc0a1dbff009651ce36a</anchor>
      <arglist>(void(*fn_p)(A0, A1, A2), A0 arg0, A1 arg1, A2 arg2, Core target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Grappa_remote_privateTask</name>
      <anchorfile>_tasking_8hpp.html</anchorfile>
      <anchor>af28f286e23de9bafa76fd706bceb02c6</anchor>
      <arglist>(void(*fn_p)(A0, A1), A0 args, A1 shared_arg, Core target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Grappa_remote_privateTask</name>
      <anchorfile>_tasking_8hpp.html</anchorfile>
      <anchor>a591e1215aa9dbd796d1f20b5ce46de7b</anchor>
      <arglist>(void(*fn_p)(A), A args, Core target)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TaskingScheduler.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/tasks/</path>
    <filename>_tasking_scheduler_8cpp</filename>
    <includes id="_tasking_scheduler_8hpp" name="TaskingScheduler.hpp" local="yes" imported="no">TaskingScheduler.hpp</includes>
    <includes id="_task_8hpp" name="Task.hpp" local="yes" imported="no">Task.hpp</includes>
    <includes id="_performance_tools_8hpp" name="PerformanceTools.hpp" local="yes" imported="no">../PerformanceTools.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>BASIC_MAX_WORKERS</name>
      <anchorfile>_tasking_scheduler_8cpp.html</anchorfile>
      <anchor>a842de92e3d54722d691ca2e974469e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_tasking_scheduler_8cpp.html</anchorfile>
      <anchor>a72c9257ff8d00653be65f667d4c2a0de</anchor>
      <arglist>(periodic_poll_ticks, 0,&quot;number of ticks to wait before polling periodic queue for one core (set to 0 for auto-growth)&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_tasking_scheduler_8cpp.html</anchorfile>
      <anchor>ae9d70ca0d2bfe5e8c19b9b8fb77725ad</anchor>
      <arglist>(periodic_poll_ticks_base, 28000,&quot;number of ticks to wait before polling periodic queue for one core (see _growth for increase)&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_tasking_scheduler_8cpp.html</anchorfile>
      <anchor>acf48cf70b6c31098f23fa2de4e501909</anchor>
      <arglist>(periodic_poll_ticks_growth, 281,&quot;number of ticks to add per core&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_bool</name>
      <anchorfile>_tasking_scheduler_8cpp.html</anchorfile>
      <anchor>aabc0c9af0aead0ab050791d350ada06e</anchor>
      <arglist>(poll_on_idle, true,&quot;have tasking layer poll aggregator if it has nothing better to do&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_uint64</name>
      <anchorfile>_tasking_scheduler_8cpp.html</anchorfile>
      <anchor>a335b7d305af623bde9b0dee70d7c6951</anchor>
      <arglist>(readyq_prefetch_distance, 4,&quot;How far ahead in the ready queue to prefetch contexts&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_tasking_scheduler_8cpp.html</anchorfile>
      <anchor>ad6531b03cecdeaa71519792eb5bf8e2d</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, scheduler_context_switches, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_tasking_scheduler_8cpp.html</anchorfile>
      <anchor>a36f83874efe922548a9f34f02b50e5a2</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, scheduler_count, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_tasking_scheduler_8cpp.html</anchorfile>
      <anchor>a51c2794f74aaff550588d491290bdac9</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, scheduler_samples, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_tasking_scheduler_8cpp.html</anchorfile>
      <anchor>aa693b2605dba55385f97f36f02d2f165</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, active_tasks_sampled, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_tasking_scheduler_8cpp.html</anchorfile>
      <anchor>a27e4bd2078d72308d9134b8127515185</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, ready_tasks_sampled, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_tasking_scheduler_8cpp.html</anchorfile>
      <anchor>a6089dcdcec8477c4c45b58ab9f5ebb4f</anchor>
      <arglist>(SummarizingMetric&lt; uint64_t &gt;, idle_workers_sampled, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_tasking_scheduler_8cpp.html</anchorfile>
      <anchor>a8ace6185f8d06dedc27595cda44c49d1</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, scheduler_polling_thread_ticks, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_tasking_scheduler_8cpp.html</anchorfile>
      <anchor>abb92d76954ff2dcfddc3a2d94814b248</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, scheduler_ready_thread_ticks, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_tasking_scheduler_8cpp.html</anchorfile>
      <anchor>a4cc375a53e6d19533442d55b4ffaa925</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, scheduler_idle_thread_ticks, 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>_tasking_scheduler_8cpp.html</anchorfile>
      <anchor>a0ce9fd020bcca07bbd832923a0da2adb</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, scheduler_idle_useful_thread_ticks, 0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TaskingScheduler.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/tasks/</path>
    <filename>_tasking_scheduler_8hpp</filename>
    <includes id="_worker_8hpp" name="Worker.hpp" local="yes" imported="no">Worker.hpp</includes>
    <includes id="_thread_queue_8hpp" name="ThreadQueue.hpp" local="yes" imported="no">ThreadQueue.hpp</includes>
    <includes id="_scheduler_8hpp" name="Scheduler.hpp" local="yes" imported="no">Scheduler.hpp</includes>
    <includes id="_communicator_8hpp" name="Communicator.hpp" local="yes" imported="no">Communicator.hpp</includes>
    <includes id="_timestamp_8hpp" name="Timestamp.hpp" local="no" imported="no">Timestamp.hpp</includes>
    <includes id="_metrics_8hpp" name="Metrics.hpp" local="yes" imported="no">Metrics.hpp</includes>
    <includes id="_histogram_metric_8hpp" name="HistogramMetric.hpp" local="yes" imported="no">HistogramMetric.hpp</includes>
    <includes id="_performance_tools_8hpp" name="PerformanceTools.hpp" local="yes" imported="no">PerformanceTools.hpp</includes>
    <includes id="_metrics_tools_8hpp" name="MetricsTools.hpp" local="yes" imported="no">MetricsTools.hpp</includes>
    <includes id="_state_timer_8hpp" name="StateTimer.hpp" local="yes" imported="no">StateTimer.hpp</includes>
    <namespace>Grappa</namespace>
    <namespace>Grappa::Metrics</namespace>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_tasking_scheduler_8hpp.html</anchorfile>
      <anchor>a9e8715259ff0b3db8bbb0e2491d9a207</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, scheduler_context_switches)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>_tasking_scheduler_8hpp.html</anchorfile>
      <anchor>ad1594d06b295bf7fd89b9c81043e9649</anchor>
      <arglist>(SimpleMetric&lt; uint64_t &gt;, scheduler_count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample_all</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a3ab8a511598f810695a65e4cb2472d92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>idle_flush_aggregator</name>
      <anchorfile>_tasking_scheduler_8hpp.html</anchorfile>
      <anchor>a9bdded3d492ba033be3bdb8dbc2dee7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>_tasking_scheduler_8hpp.html</anchorfile>
      <anchor>a16813a5ac9ba2e434c1e7a053b4814e8</anchor>
      <arglist>(periodic_poll_ticks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>_tasking_scheduler_8hpp.html</anchorfile>
      <anchor>aaa9eba5226fb60ee67dc0a518b72cbbc</anchor>
      <arglist>(poll_on_idle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>_tasking_scheduler_8hpp.html</anchorfile>
      <anchor>a1b0d07e6acbe74f682cce5f88a36d8b0</anchor>
      <arglist>(flush_on_idle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>_tasking_scheduler_8hpp.html</anchorfile>
      <anchor>afac12ca97f98aae761a3ed2bc9d1b582</anchor>
      <arglist>(rdma_flush_on_idle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_bool</name>
      <anchorfile>_tasking_scheduler_8hpp.html</anchorfile>
      <anchor>a9bfafae5d496e847e120a242fd1f936f</anchor>
      <arglist>(stats_blob_enable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_string</name>
      <anchorfile>_tasking_scheduler_8hpp.html</anchorfile>
      <anchor>abdd8cd58cdaefe711bae80fe9f36c3e4</anchor>
      <arglist>(stats_blob_filename)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>_tasking_scheduler_8hpp.html</anchorfile>
      <anchor>a00ced4cc0d995bc7474606ab4b3fa070</anchor>
      <arglist>(stats_blob_ticks)</arglist>
    </member>
    <member kind="function">
      <type>Worker *</type>
      <name>current_worker</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gad7f339c8363a6361960ecbc10d9c7a33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ThreadQueue.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_thread_queue_8cpp</filename>
    <includes id="_thread_queue_8hpp" name="ThreadQueue.hpp" local="yes" imported="no">ThreadQueue.hpp</includes>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_thread_queue_8cpp.html</anchorfile>
      <anchor>af683408d5e24e088ffe0dce5dba57b37</anchor>
      <arglist>(std::ostream &amp;o, const Grappa::ThreadQueue &amp;tq)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_thread_queue_8cpp.html</anchorfile>
      <anchor>a337c49a8e152dd7d766db1504b44be31</anchor>
      <arglist>(std::ostream &amp;o, const Grappa::PrefetchingThreadQueue &amp;tq)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ThreadQueue.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_thread_queue_8hpp</filename>
    <includes id="_worker_8hpp" name="Worker.hpp" local="yes" imported="no">Worker.hpp</includes>
    <class kind="class">Grappa::ThreadQueue</class>
    <class kind="class">Grappa::PrefetchingThreadQueue</class>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type>T</type>
      <name>_max</name>
      <anchorfile>_thread_queue_8hpp.html</anchorfile>
      <anchor>a4cfe9c8c3600070913d2a1b3bb74bf00</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>_min</name>
      <anchorfile>_thread_queue_8hpp.html</anchorfile>
      <anchor>ac352b12260cea57226feba7ae2358f00</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_thread_queue_8hpp.html</anchorfile>
      <anchor>af683408d5e24e088ffe0dce5dba57b37</anchor>
      <arglist>(std::ostream &amp;o, const Grappa::ThreadQueue &amp;tq)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>_thread_queue_8hpp.html</anchorfile>
      <anchor>a337c49a8e152dd7d766db1504b44be31</anchor>
      <arglist>(std::ostream &amp;o, const Grappa::PrefetchingThreadQueue &amp;tq)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timestamp.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_timestamp_8cpp</filename>
    <includes id="_timestamp_8hpp" name="Timestamp.hpp" local="yes" imported="no">Timestamp.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type></type>
      <name>DEFINE_uint64</name>
      <anchorfile>_timestamp_8cpp.html</anchorfile>
      <anchor>a0cb8b1b6f56c7f37a7a1df8e23dd69ce</anchor>
      <arglist>(timestamp_tick_freq, 1,&quot;Interval (in number of calls to the scheduler) between updates to the current Grappa::Timestamp&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timestamp.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_timestamp_8hpp</filename>
    <includes id="common_8hpp" name="common.hpp" local="yes" imported="no">common.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="typedef">
      <type>int64_t</type>
      <name>Timestamp</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>af14b6d972703cb9a89e4160362cf0d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_uint64</name>
      <anchorfile>_timestamp_8hpp.html</anchorfile>
      <anchor>ac4d5d4c5f3cfa285cbeafcd1cd3aa6d6</anchor>
      <arglist>(timestamp_tick_freq)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TupleGraph.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/graph/</path>
    <filename>_tuple_graph_8cpp</filename>
    <includes id="_tuple_graph_8hpp" name="TupleGraph.hpp" local="yes" imported="no">TupleGraph.hpp</includes>
    <includes id="_parallel_loop_8hpp" name="ParallelLoop.hpp" local="yes" imported="no">ParallelLoop.hpp</includes>
    <includes id="_file_i_o_8hpp" name="FileIO.hpp" local="yes" imported="no">FileIO.hpp</includes>
    <includes id="_delegate_8hpp" name="Delegate.hpp" local="yes" imported="no">Delegate.hpp</includes>
    <class kind="struct">Int32Edge</class>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_FILE_OFFSET_BITS</name>
      <anchorfile>_tuple_graph_8cpp.html</anchorfile>
      <anchor>a44d01ba0a136b8e27ad362f5a823d14e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DEFINE_bool</name>
      <anchorfile>_tuple_graph_8cpp.html</anchorfile>
      <anchor>ac58a4f919633fafe713b92cb3318f7f1</anchor>
      <arglist>(use_mpi_io, false,&quot;Use MPI IO optimizations&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>local_load_bintsv4</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a7256570ad424f9fb6a03b901280f192f</anchor>
      <arglist>(const char *filename, Grappa::TupleGraph::Edge *local_ptr, Grappa::TupleGraph::Edge *local_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>local_save_bintsv4</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a427e092a084e1dedae14353d8bb054a1</anchor>
      <arglist>(const char *filename, Grappa::TupleGraph::Edge *local_ptr, Grappa::TupleGraph::Edge *local_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>local_save_tsv</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>ab66563762ea551cb86f0f4bf199cb4be</anchor>
      <arglist>(const char *filename, Grappa::TupleGraph::Edge *local_ptr, Grappa::TupleGraph::Edge *local_end)</arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>max_path_length</name>
      <anchorfile>_tuple_graph_8cpp.html</anchorfile>
      <anchor>ab100096fef6121ea90290da5758a25ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TupleGraph.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/graph/</path>
    <filename>_tuple_graph_8hpp</filename>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="no" imported="no">Addressing.hpp</includes>
    <includes id="_global_allocator_8hpp" name="GlobalAllocator.hpp" local="no" imported="no">GlobalAllocator.hpp</includes>
    <class kind="class">Grappa::TupleGraph</class>
    <class kind="struct">Grappa::TupleGraph::Edge</class>
    <namespace>Grappa</namespace>
  </compound>
  <compound kind="file">
    <name>Worker.cpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_worker_8cpp</filename>
    <includes id="stack_8h" name="stack.h" local="yes" imported="no">stack.h</includes>
    <includes id="_worker_8hpp" name="Worker.hpp" local="yes" imported="no">Worker.hpp</includes>
    <includes id="_scheduler_8hpp" name="Scheduler.hpp" local="yes" imported="no">Scheduler.hpp</includes>
    <includes id="_performance_tools_8hpp" name="PerformanceTools.hpp" local="yes" imported="no">PerformanceTools.hpp</includes>
    <includes id="_locale_shared_memory_8hpp" name="LocaleSharedMemory.hpp" local="yes" imported="no">LocaleSharedMemory.hpp</includes>
    <namespace>Grappa</namespace>
    <member kind="function">
      <type></type>
      <name>DEFINE_int64</name>
      <anchorfile>_worker_8cpp.html</anchorfile>
      <anchor>acd7ff8b922851f2bb977845b1526112f</anchor>
      <arglist>(stack_size, MIN_STACK_SIZE,&quot;Default stack size&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Worker.hpp</name>
    <path>/Users/nelson/grappa-doxygen/grappa/system/</path>
    <filename>_worker_8hpp</filename>
    <includes id="stack_8h" name="stack.h" local="yes" imported="no">stack.h</includes>
    <includes id="_state_timer_8hpp" name="StateTimer.hpp" local="yes" imported="no">StateTimer.hpp</includes>
    <includes id="_performance_tools_8hpp" name="PerformanceTools.hpp" local="yes" imported="no">PerformanceTools.hpp</includes>
    <includes id="_addressing_8hpp" name="Addressing.hpp" local="yes" imported="no">Addressing.hpp</includes>
    <class kind="class">Grappa::Worker</class>
    <namespace>Grappa</namespace>
    <member kind="define">
      <type>#define</type>
      <name>STACK_SIZE</name>
      <anchorfile>_worker_8hpp.html</anchorfile>
      <anchor>a6423a880df59733d2d9b509c7718d3a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>threadid_t</name>
      <anchorfile>_worker_8hpp.html</anchorfile>
      <anchor>af5983c8e7e25d73aa0b47a6f607d5c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_int64</name>
      <anchorfile>_worker_8hpp.html</anchorfile>
      <anchor>a8b59285853a3ab08c27787c3ee85ede6</anchor>
      <arglist>(stack_size)</arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>MIN_STACK_SIZE</name>
      <anchorfile>_worker_8hpp.html</anchorfile>
      <anchor>a265c70ac4aea1722bb1ed9a0e4a124d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::AdjIterator</name>
    <filename>struct_grappa_1_1_adj_iterator.html</filename>
    <templarg>G</templarg>
    <member kind="function">
      <type></type>
      <name>AdjIterator</name>
      <anchorfile>struct_grappa_1_1_adj_iterator.html</anchorfile>
      <anchor>a7c0ce4060fa352a748bd59f1afc1a9f5</anchor>
      <arglist>(GlobalAddress&lt; G &gt; g, VertexID i)</arglist>
    </member>
    <member kind="variable">
      <type>GlobalAddress&lt; G &gt;</type>
      <name>g</name>
      <anchorfile>struct_grappa_1_1_adj_iterator.html</anchorfile>
      <anchor>afc5c729b2de7b1fc5ea0bef9044e2fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VertexID</type>
      <name>i</name>
      <anchorfile>struct_grappa_1_1_adj_iterator.html</anchorfile>
      <anchor>aad94a38b0bd49a2f625ffe95e63e8ede</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Aggregator</name>
    <filename>class_aggregator.html</filename>
    <member kind="function">
      <type></type>
      <name>Aggregator</name>
      <anchorfile>class_aggregator.html</anchorfile>
      <anchor>a5ea92877f1b7ce0d642fb0ef11a87b26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>class_aggregator.html</anchorfile>
      <anchor>ad96b6d01b16013eced39923b71cf3843</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Aggregator</name>
      <anchorfile>class_aggregator.html</anchorfile>
      <anchor>a7d43c66b841c5e2f7a597eee0e0426e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>class_aggregator.html</anchorfile>
      <anchor>a588bd8337bc3763cb0545be1c5f0c234</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Core</type>
      <name>get_target_for_node</name>
      <anchorfile>class_aggregator.html</anchorfile>
      <anchor>ac412dfcecd0b814f3b8ade798b681447</anchor>
      <arglist>(Core n) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_target_for_node</name>
      <anchorfile>class_aggregator.html</anchorfile>
      <anchor>af4b878d8fc6f8b8f98656bd00f43e5d6</anchor>
      <arglist>(Core node, Core target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>class_aggregator.html</anchorfile>
      <anchor>a005f447411a704f2b17edd1e731c74fc</anchor>
      <arglist>(Core node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>idle_flush_poll</name>
      <anchorfile>class_aggregator.html</anchorfile>
      <anchor>aa9490a8fb1a2a81718464242a9d666e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>get_timestamp</name>
      <anchorfile>class_aggregator.html</anchorfile>
      <anchor>acd369ae64540bbb991a0e073835bf6f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>get_previous_timestamp</name>
      <anchorfile>class_aggregator.html</anchorfile>
      <anchor>a743cd4a4d5b6d3171de4be7418b76dae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>poll</name>
      <anchorfile>class_aggregator.html</anchorfile>
      <anchor>a0af557f8ed7bc938de13d43642726901</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const size_t</type>
      <name>max_size</name>
      <anchorfile>class_aggregator.html</anchorfile>
      <anchor>a85a8e3a43c53bd3c07c7cf13df230351</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const size_t</type>
      <name>remaining_size</name>
      <anchorfile>class_aggregator.html</anchorfile>
      <anchor>a990a2018b61467b5ab1df326020d7756</anchor>
      <arglist>(Core destination) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>aggregate</name>
      <anchorfile>class_aggregator.html</anchorfile>
      <anchor>ae89c4f339e89c48d9c915a73a41bf2aa</anchor>
      <arglist>(Core destination, AggregatorAMHandler fn_p, const void *args, const size_t args_size, const void *payload, const size_t payload_size)</arglist>
    </member>
    <member kind="variable">
      <type>AggregatorMetrics</type>
      <name>stats</name>
      <anchorfile>class_aggregator.html</anchorfile>
      <anchor>a366fa4cb53aeed3f525285f9e9ba8194</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>Aggregator_deaggregate_am</name>
      <anchorfile>class_aggregator.html</anchorfile>
      <anchor>a47991aeea7aca3832acc087b7befd72a</anchor>
      <arglist>(void *buf, size_t size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AggregatorBuffer</name>
    <filename>class_aggregator_buffer.html</filename>
    <templarg>max_size_</templarg>
    <member kind="function">
      <type></type>
      <name>AggregatorBuffer</name>
      <anchorfile>class_aggregator_buffer.html</anchorfile>
      <anchor>a28e817d2a006567a571da0379ed81d38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fits</name>
      <anchorfile>class_aggregator_buffer.html</anchorfile>
      <anchor>a469c9e3a49d87b6485fbe624131cabe2</anchor>
      <arglist>(size_t size) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>class_aggregator_buffer.html</anchorfile>
      <anchor>a26ff953e13af4ce7a8ad4de4a4e253b1</anchor>
      <arglist>(const void *data, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>class_aggregator_buffer.html</anchorfile>
      <anchor>a14730a0a7a6ecd7489726a85044a4167</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Grappa::Timestamp</type>
      <name>oldest_ts_</name>
      <anchorfile>class_aggregator_buffer.html</anchorfile>
      <anchor>a82317a0818bf1258a788f5c36462e6c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Grappa::Timestamp</type>
      <name>newest_ts_</name>
      <anchorfile>class_aggregator_buffer.html</anchorfile>
      <anchor>a067f49467ea6dc60db00173e797baa79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>current_position_</name>
      <anchorfile>class_aggregator_buffer.html</anchorfile>
      <anchor>a35b1f3d63b8875c4ecb0e2ab0afd94a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>buffer_</name>
      <anchorfile>class_aggregator_buffer.html</anchorfile>
      <anchor>aa01cf35db69643dc3cf4542dd440ec0d</anchor>
      <arglist>[max_size_]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AggregatorBuffer&lt; buffer_size_ &gt;</name>
    <filename>class_aggregator_buffer.html</filename>
    <member kind="function">
      <type></type>
      <name>AggregatorBuffer</name>
      <anchorfile>class_aggregator_buffer.html</anchorfile>
      <anchor>a28e817d2a006567a571da0379ed81d38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fits</name>
      <anchorfile>class_aggregator_buffer.html</anchorfile>
      <anchor>a469c9e3a49d87b6485fbe624131cabe2</anchor>
      <arglist>(size_t size) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>class_aggregator_buffer.html</anchorfile>
      <anchor>a26ff953e13af4ce7a8ad4de4a4e253b1</anchor>
      <arglist>(const void *data, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>class_aggregator_buffer.html</anchorfile>
      <anchor>a14730a0a7a6ecd7489726a85044a4167</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Grappa::Timestamp</type>
      <name>oldest_ts_</name>
      <anchorfile>class_aggregator_buffer.html</anchorfile>
      <anchor>a82317a0818bf1258a788f5c36462e6c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Grappa::Timestamp</type>
      <name>newest_ts_</name>
      <anchorfile>class_aggregator_buffer.html</anchorfile>
      <anchor>a067f49467ea6dc60db00173e797baa79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>current_position_</name>
      <anchorfile>class_aggregator_buffer.html</anchorfile>
      <anchor>a35b1f3d63b8875c4ecb0e2ab0afd94a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>buffer_</name>
      <anchorfile>class_aggregator_buffer.html</anchorfile>
      <anchor>aa01cf35db69643dc3cf4542dd440ec0d</anchor>
      <arglist>[max_size_]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AggregatorGenericCallHeader</name>
    <filename>struct_aggregator_generic_call_header.html</filename>
    <member kind="variable">
      <type>uintptr_t</type>
      <name>function_pointer</name>
      <anchorfile>struct_aggregator_generic_call_header.html</anchorfile>
      <anchor>a6f4d6203183f9078715cf67eef54660f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Core</type>
      <name>destination</name>
      <anchorfile>struct_aggregator_generic_call_header.html</anchorfile>
      <anchor>aeb2bc51b5b53010cc4c29e4b40a4f3cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>args_size</name>
      <anchorfile>struct_aggregator_generic_call_header.html</anchorfile>
      <anchor>af65c359d6ebf38330fbf5fc8f9c1ce10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>payload_size</name>
      <anchorfile>struct_aggregator_generic_call_header.html</anchorfile>
      <anchor>aaa2333a5af64dbb58260c225cc6d6355</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AggregatorMetrics</name>
    <filename>class_aggregator_metrics.html</filename>
    <member kind="function">
      <type></type>
      <name>AggregatorMetrics</name>
      <anchorfile>class_aggregator_metrics.html</anchorfile>
      <anchor>a144b6c20cba39b741c7f2a885073a2c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record_poll</name>
      <anchorfile>class_aggregator_metrics.html</anchorfile>
      <anchor>aedc861316430d1245ea3e818bd0fe7e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record_flush</name>
      <anchorfile>class_aggregator_metrics.html</anchorfile>
      <anchor>afb08618b04aebd1c5ddebd7078d80477</anchor>
      <arglist>(Grappa::Timestamp oldest_ts, Grappa::Timestamp newest_ts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record_idle_flush</name>
      <anchorfile>class_aggregator_metrics.html</anchorfile>
      <anchor>abcd72c74fc6b495c188cbc686c126b77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record_multiflush</name>
      <anchorfile>class_aggregator_metrics.html</anchorfile>
      <anchor>afa817c31415f0b6a992a327e009309fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record_timeout</name>
      <anchorfile>class_aggregator_metrics.html</anchorfile>
      <anchor>a4f0cf78bcdd6a92b025f22294870c67b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record_idle_poll</name>
      <anchorfile>class_aggregator_metrics.html</anchorfile>
      <anchor>a6a0dbbc9dfdb4934bd142b3275cdb393</anchor>
      <arglist>(bool useful)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record_capacity_flush</name>
      <anchorfile>class_aggregator_metrics.html</anchorfile>
      <anchor>afd0bb3747a77686a5a6a2fef44376312</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record_aggregation</name>
      <anchorfile>class_aggregator_metrics.html</anchorfile>
      <anchor>a851b8eacf2b8f5498b34d49ff0d9004f</anchor>
      <arglist>(size_t bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record_deaggregation</name>
      <anchorfile>class_aggregator_metrics.html</anchorfile>
      <anchor>a559ff4805477c03b0d95035ec6658249</anchor>
      <arglist>(size_t bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record_forward</name>
      <anchorfile>class_aggregator_metrics.html</anchorfile>
      <anchor>a3c8f53144375f89285f866af9cd03c14</anchor>
      <arglist>(size_t bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record_receive_bundle</name>
      <anchorfile>class_aggregator_metrics.html</anchorfile>
      <anchor>ad6ea0e6ff162a8c507f85279c8a5bac0</anchor>
      <arglist>(size_t bytes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Allocator</name>
    <filename>class_allocator.html</filename>
    <class kind="class">Allocator::Exception</class>
    <member kind="function">
      <type></type>
      <name>Allocator</name>
      <anchorfile>class_allocator.html</anchorfile>
      <anchor>aa1108e66e1e235b2c3f72d76609dcb22</anchor>
      <arglist>(void *base, int64_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>class_allocator.html</anchorfile>
      <anchor>a784b2a49428b36eefb10d1095ad294dd</anchor>
      <arglist>(void *void_address)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>malloc</name>
      <anchorfile>class_allocator.html</anchorfile>
      <anchor>a7d6aa01468d9a71182c8285901e40de8</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>num_chunks</name>
      <anchorfile>class_allocator.html</anchorfile>
      <anchor>afc1815cc35584299d460c20fb4628ad0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>total_bytes</name>
      <anchorfile>class_allocator.html</anchorfile>
      <anchor>aed64a7875a9b003092a60d787b6e55ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>total_bytes_in_use</name>
      <anchorfile>class_allocator.html</anchorfile>
      <anchor>a9606f44569a9fcc051b3d53a1ea2bd8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>total_bytes_free</name>
      <anchorfile>class_allocator.html</anchorfile>
      <anchor>a957030558ee69a68c47208ecaa41b61e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump</name>
      <anchorfile>class_allocator.html</anchorfile>
      <anchor>aebdff9443e32269e64fce3c9b8130c2f</anchor>
      <arglist>(std::ostream &amp;o=std::cout) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Allocator&lt; T &gt;</name>
    <filename>class_allocator.html</filename>
    <member kind="function">
      <type></type>
      <name>Allocator</name>
      <anchorfile>class_allocator.html</anchorfile>
      <anchor>aa1108e66e1e235b2c3f72d76609dcb22</anchor>
      <arglist>(void *base, int64_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>class_allocator.html</anchorfile>
      <anchor>a784b2a49428b36eefb10d1095ad294dd</anchor>
      <arglist>(void *void_address)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>malloc</name>
      <anchorfile>class_allocator.html</anchorfile>
      <anchor>a7d6aa01468d9a71182c8285901e40de8</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>num_chunks</name>
      <anchorfile>class_allocator.html</anchorfile>
      <anchor>afc1815cc35584299d460c20fb4628ad0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>total_bytes</name>
      <anchorfile>class_allocator.html</anchorfile>
      <anchor>aed64a7875a9b003092a60d787b6e55ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>total_bytes_in_use</name>
      <anchorfile>class_allocator.html</anchorfile>
      <anchor>a9606f44569a9fcc051b3d53a1ea2bd8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>total_bytes_free</name>
      <anchorfile>class_allocator.html</anchorfile>
      <anchor>a957030558ee69a68c47208ecaa41b61e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump</name>
      <anchorfile>class_allocator.html</anchorfile>
      <anchor>aebdff9443e32269e64fce3c9b8130c2f</anchor>
      <arglist>(std::ostream &amp;o=std::cout) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>AllocatorChunk</name>
    <filename>struct_allocator_chunk.html</filename>
    <member kind="function">
      <type></type>
      <name>AllocatorChunk</name>
      <anchorfile>struct_allocator_chunk.html</anchorfile>
      <anchor>ab8df88a718d9ec27e0a579580b7e7870</anchor>
      <arglist>(AllocatorAddress address, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump</name>
      <anchorfile>struct_allocator_chunk.html</anchorfile>
      <anchor>a5fc619dfc53f4587602ed4985a65c64d</anchor>
      <arglist>(std::ostream &amp;o) const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>in_use</name>
      <anchorfile>struct_allocator_chunk.html</anchorfile>
      <anchor>af2613421b6f92e1b02b691585f2027a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AllocatorAddress</type>
      <name>address</name>
      <anchorfile>struct_allocator_chunk.html</anchorfile>
      <anchor>a6fea51662714584ea24c618bbd5ee62f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>struct_allocator_chunk.html</anchorfile>
      <anchor>a01614ba1c71b3114afb11a6f312f6a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FreeList::iterator</type>
      <name>free_list_slot</name>
      <anchorfile>struct_allocator_chunk.html</anchorfile>
      <anchor>abb5b2b251a30d9c8c991ee9285ffa022</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AllReducer</name>
    <filename>class_all_reducer.html</filename>
    <templarg></templarg>
    <templarg>ReduceOp</templarg>
    <member kind="function">
      <type></type>
      <name>AllReducer</name>
      <anchorfile>class_all_reducer.html</anchorfile>
      <anchor>aa23594c224120d915b67331b6b25e3f5</anchor>
      <arglist>(T initV)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AllReducer</name>
      <anchorfile>class_all_reducer.html</anchorfile>
      <anchor>ad51e15e08c741d1b416a46eb269f529e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_all_reducer.html</anchorfile>
      <anchor>a7e2047e92701d49d776fd6adf46933ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulate</name>
      <anchorfile>class_all_reducer.html</anchorfile>
      <anchor>abd48b7c5d3d9985ed49b90835a444dcf</anchor>
      <arglist>(T val)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>finish</name>
      <anchorfile>class_all_reducer.html</anchorfile>
      <anchor>a35e9c25162e4ce5ad7c656373a4f2899</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>function_traits&lt; ReturnType(ClassType::*)(Args...) const  &gt;::arg</name>
    <filename>structfunction__traits_3_01_return_type_07_class_type_1_1_5_08_07_args_8_8_8_08_01const_01_01_4_1_1arg.html</filename>
    <templarg>i</templarg>
    <member kind="typedef">
      <type>std::tuple_element&lt; i, std::tuple&lt; Args... &gt; &gt;::type</type>
      <name>type</name>
      <anchorfile>structfunction__traits_3_01_return_type_07_class_type_1_1_5_08_07_args_8_8_8_08_01const_01_01_4_1_1arg.html</anchorfile>
      <anchor>a9e609bcd686cae88a8c50a104dd01bab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::BasicScheduler</name>
    <filename>class_grappa_1_1_basic_scheduler.html</filename>
    <base>Grappa::Scheduler</base>
    <member kind="function">
      <type></type>
      <name>BasicScheduler</name>
      <anchorfile>class_grappa_1_1_basic_scheduler.html</anchorfile>
      <anchor>a6eafe03db2d2e95c52e2cacf13e9fdff</anchor>
      <arglist>(Worker *master)</arglist>
    </member>
    <member kind="function">
      <type>Worker *</type>
      <name>get_current_thread</name>
      <anchorfile>class_grappa_1_1_basic_scheduler.html</anchorfile>
      <anchor>afe57da25c9f7b63bc11141b84b87806e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignTid</name>
      <anchorfile>class_grappa_1_1_basic_scheduler.html</anchorfile>
      <anchor>a5806ef92f07c39ca3817412a95e3b116</anchor>
      <arglist>(Worker *thr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ready</name>
      <anchorfile>class_grappa_1_1_basic_scheduler.html</anchorfile>
      <anchor>ad5238c1226228ddcc24012e1a72f5b3a</anchor>
      <arglist>(Worker *thr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>periodic</name>
      <anchorfile>class_grappa_1_1_basic_scheduler.html</anchorfile>
      <anchor>aefcd7067d12f816a460fa886e3973fac</anchor>
      <arglist>(Worker *thr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>class_grappa_1_1_basic_scheduler.html</anchorfile>
      <anchor>ac85c5d642323a382822ab1dbdc03d622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>thread_yield</name>
      <anchorfile>class_grappa_1_1_basic_scheduler.html</anchorfile>
      <anchor>ae9042da7079d66dbe1e66f62235a48bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thread_suspend</name>
      <anchorfile>class_grappa_1_1_basic_scheduler.html</anchorfile>
      <anchor>ad5f128be1ae0efde57594c557cfb5656</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thread_wake</name>
      <anchorfile>class_grappa_1_1_basic_scheduler.html</anchorfile>
      <anchor>a2bd6690f54d5ac9086268a7f969ad432</anchor>
      <arglist>(Worker *next)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thread_yield_wake</name>
      <anchorfile>class_grappa_1_1_basic_scheduler.html</anchorfile>
      <anchor>a1caa116eec21829db2b3703f414f4f63</anchor>
      <arglist>(Worker *next)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thread_suspend_wake</name>
      <anchorfile>class_grappa_1_1_basic_scheduler.html</anchorfile>
      <anchor>a68af84206fbd82dc904cc6e806383667</anchor>
      <arglist>(Worker *next)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thread_join</name>
      <anchorfile>class_grappa_1_1_basic_scheduler.html</anchorfile>
      <anchor>a5f56e0807b35d257808873f59d036207</anchor>
      <arglist>(Worker *wait_on)</arglist>
    </member>
    <member kind="function">
      <type>Worker *</type>
      <name>thread_wait</name>
      <anchorfile>class_grappa_1_1_basic_scheduler.html</anchorfile>
      <anchor>ac520270380b4aca02b3f35cf2f4b861c</anchor>
      <arglist>(void **result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thread_on_exit</name>
      <anchorfile>class_grappa_1_1_basic_scheduler.html</anchorfile>
      <anchor>ae33cf77d777530fd101740047ebe0447</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>block_offset_t</name>
    <filename>structblock__offset__t.html</filename>
    <member kind="variable">
      <type>int64_t</type>
      <name>block</name>
      <anchorfile>structblock__offset__t.html</anchorfile>
      <anchor>a3f8772471e123a5baa91bce2033ef386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>offset</name>
      <anchorfile>structblock__offset__t.html</anchorfile>
      <anchor>a167b49fb2c8fa55c02b133676d445106</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BufferVector</name>
    <filename>class_buffer_vector.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BufferVector</name>
      <anchorfile>class_buffer_vector.html</anchorfile>
      <anchor>a5d06d0bc762c610c68eb4f493b1b5e53</anchor>
      <arglist>(size_t capacity=2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BufferVector</name>
      <anchorfile>class_buffer_vector.html</anchorfile>
      <anchor>a1960b72908981f8bc497505ef7bb294b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWriteMode</name>
      <anchorfile>class_buffer_vector.html</anchorfile>
      <anchor>af9ab501348ce95fdbc5c469a9cc672fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReadMode</name>
      <anchorfile>class_buffer_vector.html</anchorfile>
      <anchor>a920a7520536276d32fc5369c488ec51b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>class_buffer_vector.html</anchorfile>
      <anchor>aa89d74e350fb489564ee2a0ce6834500</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; const T &gt;</type>
      <name>getReadBuffer</name>
      <anchorfile>class_buffer_vector.html</anchorfile>
      <anchor>ac5573b372544188526d66e6fb9450dc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getLength</name>
      <anchorfile>class_buffer_vector.html</anchorfile>
      <anchor>a10d92bf973db0d0678ca7fca476b3323</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_buffer_vector.html</anchorfile>
      <anchor>a094ef7f183c98a8a27d8bb8a41f9810d</anchor>
      <arglist>(std::ostream &amp;o, const BufferVector&lt; T1 &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CacheAllocator</name>
    <filename>class_cache_allocator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>CacheAllocator</name>
      <anchorfile>class_cache_allocator.html</anchorfile>
      <anchor>a0b36ee5582f29fe17f9ec6d3611c5d2f</anchor>
      <arglist>(T *buffer, size_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CacheAllocator</name>
      <anchorfile>class_cache_allocator.html</anchorfile>
      <anchor>a191d6054e92670b40a216f6c10096b6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *</name>
      <anchorfile>class_cache_allocator.html</anchorfile>
      <anchor>a771a5be162d72c0f72dfa153ec7723fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *</name>
      <anchorfile>class_cache_allocator.html</anchorfile>
      <anchor>a044bb309cd69e489ea3cc9a84b4791df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>class_cache_allocator.html</anchorfile>
      <anchor>ad0c47346ea9b48ea9b186f667c82161f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>const_pointer</name>
      <anchorfile>class_cache_allocator.html</anchorfile>
      <anchor>a25228867c322dfab4c8ffc3f22626ae3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>storage_</name>
      <anchorfile>class_cache_allocator.html</anchorfile>
      <anchor>a3e7089a44f4f1b5dd548216161a95046</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>heap_</name>
      <anchorfile>class_cache_allocator.html</anchorfile>
      <anchor>a9e8a0156531741e56f1fd5becc1d71d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Cacheline</name>
    <filename>struct_cacheline.html</filename>
    <member kind="variable">
      <type>uint64_t</type>
      <name>val</name>
      <anchorfile>struct_cacheline.html</anchorfile>
      <anchor>ae6010297898123072db22aae35183937</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>padding</name>
      <anchorfile>struct_cacheline.html</anchorfile>
      <anchor>afd073c62f76e454b728bcbffd88f7fd6</anchor>
      <arglist>[56]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CacheMetrics</name>
    <filename>class_cache_metrics.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>count_ro_acquire</name>
      <anchorfile>class_cache_metrics.html</anchorfile>
      <anchor>a59999b62fed326fe33b48e5c23dc9162</anchor>
      <arglist>(uint64_t bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>count_wo_release</name>
      <anchorfile>class_cache_metrics.html</anchorfile>
      <anchor>a21e71654f951c3722b51081cc1b52cb9</anchor>
      <arglist>(uint64_t bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>count_rw_acquire</name>
      <anchorfile>class_cache_metrics.html</anchorfile>
      <anchor>a88b023abf81dc4d2846297de6299c119</anchor>
      <arglist>(uint64_t bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>count_rw_release</name>
      <anchorfile>class_cache_metrics.html</anchorfile>
      <anchor>ac455d584367ae78d8477b2a0a17f09f5</anchor>
      <arglist>(uint64_t bytes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CacheRO</name>
    <filename>class_cache_r_o.html</filename>
    <templarg></templarg>
    <templarg>Allocator</templarg>
    <templarg>Acquirer</templarg>
    <templarg>Releaser</templarg>
    <member kind="function">
      <type></type>
      <name>CacheRO</name>
      <anchorfile>class_cache_r_o.html</anchorfile>
      <anchor>a9a4a6de1c8a3aa29d0b81a8ab79dd137</anchor>
      <arglist>(GlobalAddress&lt; T &gt; address, size_t count, T *buffer=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_acquire</name>
      <anchorfile>class_cache_r_o.html</anchorfile>
      <anchor>a950c00632a45b36fec0050c64c0e3c70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>block_until_acquired</name>
      <anchorfile>class_cache_r_o.html</anchorfile>
      <anchor>acaa3ad1242c36907ebaf5564ad84f0f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_release</name>
      <anchorfile>class_cache_r_o.html</anchorfile>
      <anchor>a3f24ace9cc4c114db109ab7a22aed253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>block_until_released</name>
      <anchorfile>class_cache_r_o.html</anchorfile>
      <anchor>aafc81a1d13e6c40c49c4ddba4fe04eaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_cache_r_o.html</anchorfile>
      <anchor>a32f732e52d2381ea1e1f77a58527d23b</anchor>
      <arglist>(GlobalAddress&lt; T &gt; address, size_t count)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>address</name>
      <anchorfile>class_cache_r_o.html</anchorfile>
      <anchor>a9170349463b988098b644380b1dac4a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T *</name>
      <anchorfile>class_cache_r_o.html</anchorfile>
      <anchor>a4164433340f21137d06be4c15a722880</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const void *</name>
      <anchorfile>class_cache_r_o.html</anchorfile>
      <anchor>a98c0c69ce82f531d5a839455ecab53ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>address_</name>
      <anchorfile>class_cache_r_o.html</anchorfile>
      <anchor>ae3516f1836511c85978cc605991e0523</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>count_</name>
      <anchorfile>class_cache_r_o.html</anchorfile>
      <anchor>ad1722df7116887189dbbeede769d6651</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Allocator&lt; T &gt;</type>
      <name>storage_</name>
      <anchorfile>class_cache_r_o.html</anchorfile>
      <anchor>a27d4c2e0fab2345267a46ec6ebf26182</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>pointer_</name>
      <anchorfile>class_cache_r_o.html</anchorfile>
      <anchor>a6d8115ab9408ce46db832b5439deedc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Acquirer&lt; T &gt;</type>
      <name>acquirer_</name>
      <anchorfile>class_cache_r_o.html</anchorfile>
      <anchor>a5c14e814a31493b351bc88e4c4e18a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Releaser&lt; T &gt;</type>
      <name>releaser_</name>
      <anchorfile>class_cache_r_o.html</anchorfile>
      <anchor>aa050608bac2505e93e7afcc24c0ab63a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CacheRW</name>
    <filename>class_cache_r_w.html</filename>
    <templarg></templarg>
    <templarg>Allocator</templarg>
    <templarg>Acquirer</templarg>
    <templarg>Releaser</templarg>
    <member kind="function">
      <type></type>
      <name>CacheRW</name>
      <anchorfile>class_cache_r_w.html</anchorfile>
      <anchor>a6cd50a5fc78f0eccdbc7abf5ffdbdded</anchor>
      <arglist>(GlobalAddress&lt; T &gt; address, size_t count, T *buffer=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CacheRW</name>
      <anchorfile>class_cache_r_w.html</anchorfile>
      <anchor>a5aaa69709dca0c7a39a4aabeab31ec5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_acquire</name>
      <anchorfile>class_cache_r_w.html</anchorfile>
      <anchor>a972a534cdb44767245fe0570a21d07fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>block_until_acquired</name>
      <anchorfile>class_cache_r_w.html</anchorfile>
      <anchor>a0dc84cfaf780df0d2157f88109a66d17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_release</name>
      <anchorfile>class_cache_r_w.html</anchorfile>
      <anchor>a337ebd63c8733ad3e90de8dd971e16f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>block_until_released</name>
      <anchorfile>class_cache_r_w.html</anchorfile>
      <anchor>aa85e72aa7d52fd26efc34c3aaa4eb946</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_cache_r_w.html</anchorfile>
      <anchor>af0ce7c06f68159415818545293f6579a</anchor>
      <arglist>(GlobalAddress&lt; T &gt; address, size_t count)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>address</name>
      <anchorfile>class_cache_r_w.html</anchorfile>
      <anchor>abbe46d33a9530eee34ff0523ca2d04c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *</name>
      <anchorfile>class_cache_r_w.html</anchorfile>
      <anchor>a6b7bbd7101e6d9c52cdee609263b45fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>class_cache_r_w.html</anchorfile>
      <anchor>a66924fd28cf543fcc7ae48a99fb08c81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>address_</name>
      <anchorfile>class_cache_r_w.html</anchorfile>
      <anchor>a115e4a65346583c65195c2db6247e35c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>count_</name>
      <anchorfile>class_cache_r_w.html</anchorfile>
      <anchor>a65529192e861d785f3ef0e09ccd78573</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Allocator&lt; T &gt;</type>
      <name>storage_</name>
      <anchorfile>class_cache_r_w.html</anchorfile>
      <anchor>a4c9129ac11eb550e35a42d703155c777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>pointer_</name>
      <anchorfile>class_cache_r_w.html</anchorfile>
      <anchor>a20574e903f97e1cda73eacd07593124a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Acquirer&lt; T &gt;</type>
      <name>acquirer_</name>
      <anchorfile>class_cache_r_w.html</anchorfile>
      <anchor>a5e2d53bdd0aa907ec881007a62603ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Releaser&lt; T &gt;</type>
      <name>releaser_</name>
      <anchorfile>class_cache_r_w.html</anchorfile>
      <anchor>a1287bc4cdc905fe12450d0db87507efc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CacheWO</name>
    <filename>class_cache_w_o.html</filename>
    <templarg></templarg>
    <templarg>Allocator</templarg>
    <templarg>Acquirer</templarg>
    <templarg>Releaser</templarg>
    <member kind="function">
      <type></type>
      <name>CacheWO</name>
      <anchorfile>class_cache_w_o.html</anchorfile>
      <anchor>a36d50d3256deef0e8dfc68b753416f25</anchor>
      <arglist>(GlobalAddress&lt; T &gt; address, size_t count, T *buffer=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CacheWO</name>
      <anchorfile>class_cache_w_o.html</anchorfile>
      <anchor>a22084ce613af9f3479e50e71b331bd3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_acquire</name>
      <anchorfile>class_cache_w_o.html</anchorfile>
      <anchor>af4e01fe34077e3468beb08f2ba1ad8db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>block_until_acquired</name>
      <anchorfile>class_cache_w_o.html</anchorfile>
      <anchor>af1c14602abcbf76c3be3ba857aba6271</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_release</name>
      <anchorfile>class_cache_w_o.html</anchorfile>
      <anchor>ac9ff8051837a709b5fe9b7ff6b30d6fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>block_until_released</name>
      <anchorfile>class_cache_w_o.html</anchorfile>
      <anchor>a3c663ff78050c9402433422e29452fdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_cache_w_o.html</anchorfile>
      <anchor>a5772dc8082790e588b131646ef835f59</anchor>
      <arglist>(GlobalAddress&lt; T &gt; address, size_t count)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>address</name>
      <anchorfile>class_cache_w_o.html</anchorfile>
      <anchor>a46c2d0657255f23eb78759b4a22441d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *</name>
      <anchorfile>class_cache_w_o.html</anchorfile>
      <anchor>a23eae193c5df1d33e773b1cdbfbb96ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>class_cache_w_o.html</anchorfile>
      <anchor>ad614b73a94082f25cab6f2eea4b5f542</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>address_</name>
      <anchorfile>class_cache_w_o.html</anchorfile>
      <anchor>ad6b71375afecc1ba2f51998e2b2ad2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>count_</name>
      <anchorfile>class_cache_w_o.html</anchorfile>
      <anchor>a7a37e0ab16589bc55aa711d34bb97e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Allocator&lt; T &gt;</type>
      <name>storage_</name>
      <anchorfile>class_cache_w_o.html</anchorfile>
      <anchor>ac06f343ef9f826125c99150f3107e02c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>pointer_</name>
      <anchorfile>class_cache_w_o.html</anchorfile>
      <anchor>ac4ff02b5e580367b5c3d9f569010e1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Acquirer&lt; T &gt;</type>
      <name>acquirer_</name>
      <anchorfile>class_cache_w_o.html</anchorfile>
      <anchor>ac32fae3fa810d9cfed40d5c3cc770d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Releaser&lt; T &gt;</type>
      <name>releaser_</name>
      <anchorfile>class_cache_w_o.html</anchorfile>
      <anchor>a87fc382dc166017509fc960bbb2fd98d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::CallbackMetric</name>
    <filename>class_grappa_1_1_callback_metric.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>CallbackMetric</name>
      <anchorfile>class_grappa_1_1_callback_metric.html</anchorfile>
      <anchor>a67b11852fae56b6c9449e399192be18a</anchor>
      <arglist>(const char *name, CallbackFn f, bool reg_new=true)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value</name>
      <anchorfile>class_grappa_1_1_callback_metric.html</anchorfile>
      <anchor>aa68daf23e054de7188222e5f0209a45e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_merging</name>
      <anchorfile>class_grappa_1_1_callback_metric.html</anchorfile>
      <anchor>af07f6c0f379cd7a98c9e0c3ce6c5d8e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CallbackMetric&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>class_grappa_1_1_callback_metric.html</anchorfile>
      <anchor>a446df98ae1b2162cd746babf6dc66189</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>json</name>
      <anchorfile>class_grappa_1_1_callback_metric.html</anchorfile>
      <anchor>aafbd76d5bc915b352d04ed9c17803a77</anchor>
      <arglist>(std::ostream &amp;o) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>class_grappa_1_1_callback_metric.html</anchorfile>
      <anchor>a591dca2b9d7ed2a6fcd82887b62ce3da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>class_grappa_1_1_callback_metric.html</anchorfile>
      <anchor>a6bcafba450ae2306f907e69a343b8465</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge_all</name>
      <anchorfile>class_grappa_1_1_callback_metric.html</anchorfile>
      <anchor>a638b22b13e17c723a9c805e55ad5de4e</anchor>
      <arglist>(impl::MetricBase *static_stat_ptr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::GlobalHashMap::Cell</name>
    <filename>struct_grappa_1_1_global_hash_map_1_1_cell.html</filename>
    <member kind="function">
      <type></type>
      <name>Cell</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_cell.html</anchorfile>
      <anchor>aa49302e9712cfe8abf9dc8a44ecf37aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_cell.html</anchorfile>
      <anchor>a0a22180a172790678407d39bdc09fa70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, V &gt;</type>
      <name>lookup</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_cell.html</anchorfile>
      <anchor>a4a118c73bcc7fa983eb871a7b0748490</anchor>
      <arglist>(K key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_cell.html</anchorfile>
      <anchor>a50d5cf9efa3dfc578a619597f5412bac</anchor>
      <arglist>(const K &amp;key, const V &amp;val)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Entry &gt;</type>
      <name>entries</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_cell.html</anchorfile>
      <anchor>a4a82c545f6b7c32317d804b19201e6fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::GlobalHashSet::Cell</name>
    <filename>struct_grappa_1_1_global_hash_set_1_1_cell.html</filename>
    <member kind="function">
      <type></type>
      <name>Cell</name>
      <anchorfile>struct_grappa_1_1_global_hash_set_1_1_cell.html</anchorfile>
      <anchor>a95bdcc24599f5a49a07384c7ceb8136c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Entry &gt;</type>
      <name>entries</name>
      <anchorfile>struct_grappa_1_1_global_hash_set_1_1_cell.html</anchorfile>
      <anchor>a6b456f36a9795e8ae34bf2e29597a638</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CmpElement</name>
    <filename>class_cmp_element.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>CmpElement</name>
      <anchorfile>class_cmp_element.html</anchorfile>
      <anchor>a0bf529be0fa724b5fe09beb558724b8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CmpElement</name>
      <anchorfile>class_cmp_element.html</anchorfile>
      <anchor>abda1724ffd82aa3e198b0ace213e4ce8</anchor>
      <arglist>(Id i, Cmp c)</arglist>
    </member>
    <member kind="function">
      <type>Id</type>
      <name>idx</name>
      <anchorfile>class_cmp_element.html</anchorfile>
      <anchor>a86a0bb28e5421b2a0221b85bafa2c195</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Cmp</type>
      <name>elem</name>
      <anchorfile>class_cmp_element.html</anchorfile>
      <anchor>ae6a8eb4483b45da21e205219450e8e54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_cmp_element.html</anchorfile>
      <anchor>a3246b5125538fbd5c5cd6797ccd9db2d</anchor>
      <arglist>(const CmpElement &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>class_cmp_element.html</anchorfile>
      <anchor>af0d7cb9dde6589d18a41ef0bd676be9c</anchor>
      <arglist>(const CmpElement &amp;e) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Communicator</name>
    <filename>class_communicator.html</filename>
    <member kind="function">
      <type>void</type>
      <name>garbage_collect</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>afac0480acec5dbbf3ea900f3fe180837</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repost_receive_buffers</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>a38e23c0ebc2826c60fd2112522222eb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Communicator</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>abd4c26c6a901e571bc9cfc4259e65de3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>adjust_footprint</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>ab0f4c1801ad749ea2c4c719f90b73683</anchor>
      <arglist>(size_t target)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>estimate_footprint</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>a08b92a09595f1c645adee43bd887e0d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>a8a7b18bc1a9e386f54483264380026b4</anchor>
      <arglist>(int *argc_p, char **argv_p[])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>aae81c7b2e5bcbf229f50b6e5e8c44b72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>a17e451c0d3a99b4baa328e0d3ea7af0c</anchor>
      <arglist>(int retval=0)</arglist>
    </member>
    <member kind="function">
      <type>Locale</type>
      <name>locale_of</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>a986691bd7d29970eb920469424664495</anchor>
      <arglist>(Core c) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>hostname</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>adbace0ae20cee7fdb339c78894e92bef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send_context_available</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>af771a9762e642547ebb9dad135bebb39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CommunicatorContext *</type>
      <name>try_get_send_context</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>a2ed8f0dde12ccbdbb9278ef8d9de2962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>post_send</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>ac8776d6a331eaa2a467612cdc092d679</anchor>
      <arglist>(CommunicatorContext *c, int dest, size_t size, int tag=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>post_external_send</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>ab25ddf5aa64410f9d14aa1b84d3614a1</anchor>
      <arglist>(CommunicatorContext *c, int dest, size_t size, int tag=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>post_receive</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>a200365524c9908fa16847c883cd491ad</anchor>
      <arglist>(CommunicatorContext *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_immediate</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>a317526085a50b4762a3796a90c1e4dd2</anchor>
      <arglist>(int dest, F f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_immediate_with_payload</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>a6df7b089ff4272e58cb847430f27b889</anchor>
      <arglist>(int dest, F f, void *payload, size_t payload_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>poll</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>a5df466f0663d29fc0b1cb1d67840913c</anchor>
      <arglist>(unsigned int max_receives=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>with_request_do_blocking</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>ad2413697215f406ae12999e88f2ca2eb</anchor>
      <arglist>(F f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>barrier</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>aad4a56618eda5b736b29f105aae2dfa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allreduce_inplace</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>a056607615009777760f734bb6679a53a</anchor>
      <arglist>(T *p, MPI_Datatype type, MPI_Op op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>barrier_notify</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>a23506735326ee657383bced6961f4576</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>barrier_try</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>ad95e1c9e8d5bb7426942fccb237c9983</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>MPI_Comm</type>
      <name>locale_comm</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>a87524454c39cf7048e480c3a2b62f1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPI_Comm</type>
      <name>grappa_comm</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>a2fdc3b5d25ff3b8104b9a266eb987198</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Core &amp;</type>
      <name>mycore</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>a173fe24fd5667a30f36e59691cd4946f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Core &amp;</type>
      <name>cores</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>a4ba1ec35ac79bc6b4ca0857b553315fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Core &amp;</type>
      <name>mylocale</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>a84ef29de56b0cfa60a31ad53e025d492</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Core &amp;</type>
      <name>locales</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>a62e288f18a8900140afc9c395f58c158</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Core &amp;</type>
      <name>locale_mycore</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>a85a0558e85a58b39317a3096aba3cc15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Core &amp;</type>
      <name>locale_cores</name>
      <anchorfile>class_communicator.html</anchorfile>
      <anchor>ab929a0c4a23534e8e7089c4dfeb390d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CommunicatorContext</name>
    <filename>struct_communicator_context.html</filename>
    <member kind="function">
      <type></type>
      <name>CommunicatorContext</name>
      <anchorfile>struct_communicator_context.html</anchorfile>
      <anchor>a420d4fde33e1c0b527202dfcdc073783</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>MPI_Request</type>
      <name>request</name>
      <anchorfile>struct_communicator_context.html</anchorfile>
      <anchor>a7b81d9d9b9c593e287cd9a6641f2c09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>buf</name>
      <anchorfile>struct_communicator_context.html</anchorfile>
      <anchor>a39dde000f17d8d1e61027425732a8e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>size</name>
      <anchorfile>struct_communicator_context.html</anchorfile>
      <anchor>a06f866c5581940984701d53e79a6bf93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>reference_count</name>
      <anchorfile>struct_communicator_context.html</anchorfile>
      <anchor>a601d4260e8e28668062c2271cc80c143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>callback</name>
      <anchorfile>struct_communicator_context.html</anchorfile>
      <anchor>a88b65abcba8d2a998c5d925735fbbb51</anchor>
      <arglist>)(CommunicatorContext *c, int source, int tag, int received_size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::CompletionEvent</name>
    <filename>class_grappa_1_1_completion_event.html</filename>
    <member kind="function">
      <type></type>
      <name>CompletionEvent</name>
      <anchorfile>class_grappa_1_1_completion_event.html</anchorfile>
      <anchor>a52e97d6aaf0817e5072893408c212d6a</anchor>
      <arglist>(int64_t count=0)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>get_count</name>
      <anchorfile>class_grappa_1_1_completion_event.html</anchorfile>
      <anchor>a58a64c1a1d927296bd8d9126e4d872e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enroll</name>
      <anchorfile>class_grappa_1_1_completion_event.html</anchorfile>
      <anchor>ab815f0eedf4fcfa07a14bf9a42f8593d</anchor>
      <arglist>(int64_t inc=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complete</name>
      <anchorfile>class_grappa_1_1_completion_event.html</anchorfile>
      <anchor>ab313d13cc31ea7541ac3f4feed84d601</anchor>
      <arglist>(int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>class_grappa_1_1_completion_event.html</anchorfile>
      <anchor>a39c2a668356d24988b5ec80bcd1a1093</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>class_grappa_1_1_completion_event.html</anchorfile>
      <anchor>a424aeb9d2d2facb7641857d35c8df2b8</anchor>
      <arglist>(SuspendedDelegate *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_grappa_1_1_completion_event.html</anchorfile>
      <anchor>a7f3822ab750d649cb5c8a72ca513772c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_completion</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga6b8e8e7035b2e57a779a02ec835fc24f</anchor>
      <arglist>(Core origin, int64_t decr=1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConditionVariable</type>
      <name>cv</name>
      <anchorfile>class_grappa_1_1_completion_event.html</anchorfile>
      <anchor>a3e4b0ee9b312f324421b83bc663b33e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int64_t</type>
      <name>count</name>
      <anchorfile>class_grappa_1_1_completion_event.html</anchorfile>
      <anchor>a7dac94a812a0d356903f4abe9e6b3e73</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::CompletionTarget</name>
    <filename>struct_grappa_1_1_completion_target.html</filename>
    <member kind="variable">
      <type>Core</type>
      <name>core</name>
      <anchorfile>struct_grappa_1_1_completion_target.html</anchorfile>
      <anchor>a370f07804a5df711727c3ffe65518596</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::ConditionVariable</name>
    <filename>class_grappa_1_1_condition_variable.html</filename>
    <member kind="function">
      <type></type>
      <name>ConditionVariable</name>
      <anchorfile>class_grappa_1_1_condition_variable.html</anchorfile>
      <anchor>a3589a4c95f5725aeae17571cdccab8af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>intptr_t</type>
      <name>waiters_</name>
      <anchorfile>class_grappa_1_1_condition_variable.html</anchorfile>
      <anchor>a41d3b9ab6064161c8d15ebc0a1e8d438</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::CountingSemaphore</name>
    <filename>class_grappa_1_1_counting_semaphore.html</filename>
    <member kind="function">
      <type></type>
      <name>CountingSemaphore</name>
      <anchorfile>class_grappa_1_1_counting_semaphore.html</anchorfile>
      <anchor>ac527404c41d7207c530b4774a0b5bb12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CountingSemaphore</name>
      <anchorfile>class_grappa_1_1_counting_semaphore.html</anchorfile>
      <anchor>a7b50e0191e8b006d71fbe12471e38db5</anchor>
      <arglist>(int64_t initial_count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>class_grappa_1_1_counting_semaphore.html</anchorfile>
      <anchor>a89c7a9f7c588c2bac802db6faf88e761</anchor>
      <arglist>(int64_t incr=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrement</name>
      <anchorfile>class_grappa_1_1_counting_semaphore.html</anchorfile>
      <anchor>a5d7da9b584c97744f040640147142ff4</anchor>
      <arglist>(int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_decrement</name>
      <anchorfile>class_grappa_1_1_counting_semaphore.html</anchorfile>
      <anchor>af9d6142bee72ce8bd3ae32bfd1a28d1f</anchor>
      <arglist>(int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>int16_t</type>
      <name>get_value</name>
      <anchorfile>class_grappa_1_1_counting_semaphore.html</anchorfile>
      <anchor>a0a655f701709eff6ba5d5c815ba41540</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>int16_t</type>
      <name>count_</name>
      <anchorfile>class_grappa_1_1_counting_semaphore.html</anchorfile>
      <anchor>a1c3cd130e26d6de29ca69250980e8f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>intptr_t</type>
      <name>waiters_</name>
      <anchorfile>class_grappa_1_1_counting_semaphore.html</anchorfile>
      <anchor>a8a70ade4dc720faf22ff39c0d1850559</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>intptr_t</type>
      <name>raw_</name>
      <anchorfile>class_grappa_1_1_counting_semaphore.html</anchorfile>
      <anchor>a85fde99f236492d914a184c8d87e3e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>max_value</name>
      <anchorfile>class_grappa_1_1_counting_semaphore.html</anchorfile>
      <anchor>a662c76d82899e4da791346189cfe0778</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DictOut</name>
    <filename>class_dict_out.html</filename>
    <member kind="function">
      <type></type>
      <name>DictOut</name>
      <anchorfile>class_dict_out.html</anchorfile>
      <anchor>a9df92d216a48bb5f3fd3e8ad4ce7cfa6</anchor>
      <arglist>(const std::string map_symbol=&quot;:&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DictOut</name>
      <anchorfile>class_dict_out.html</anchorfile>
      <anchor>a2310d1d45e85be730416b511bd23af82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>class_dict_out.html</anchorfile>
      <anchor>ae80560e6e93098de036339dfb4a05c88</anchor>
      <arglist>(std::string name, std::string value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>class_dict_out.html</anchorfile>
      <anchor>a3ba847ab3c9aa1a77792ceac929297e3</anchor>
      <arglist>(std::string name, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>class_dict_out.html</anchorfile>
      <anchor>a898ec35978dcb9dcb4049c9f11119070</anchor>
      <arglist>(std::string name, uint64_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>class_dict_out.html</anchorfile>
      <anchor>ab45e063a10ed1bb81f1d02847da21907</anchor>
      <arglist>(std::string name, int64_t value)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>toString</name>
      <anchorfile>class_dict_out.html</anchorfile>
      <anchor>ad904254d6687bb3027527a4011756907</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::Graph::Edge</name>
    <filename>struct_grappa_1_1_graph_1_1_edge.html</filename>
    <member kind="function">
      <type>EdgeState *</type>
      <name>operator-&gt;</name>
      <anchorfile>struct_grappa_1_1_graph_1_1_edge.html</anchorfile>
      <anchor>af57658d702be80856ec589c6dc80ed83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EdgeState *</type>
      <name>operator-&gt;</name>
      <anchorfile>struct_grappa_1_1_graph_1_1_edge.html</anchorfile>
      <anchor>a5ff3db78d3193e0a29fe63b60a2e4153</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>VertexID</type>
      <name>id</name>
      <anchorfile>struct_grappa_1_1_graph_1_1_edge.html</anchorfile>
      <anchor>a4169832be52a64688ab2c01e4815cc4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalAddress&lt; Vertex &gt;</type>
      <name>ga</name>
      <anchorfile>struct_grappa_1_1_graph_1_1_edge.html</anchorfile>
      <anchor>a9623ad27cd00bd0c57c894cb64612d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EdgeState &amp;</type>
      <name>data</name>
      <anchorfile>struct_grappa_1_1_graph_1_1_edge.html</anchorfile>
      <anchor>aeaf4f0225db20f0c155dd2801133e493</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::TupleGraph::Edge</name>
    <filename>struct_grappa_1_1_tuple_graph_1_1_edge.html</filename>
    <member kind="variable">
      <type>int64_t</type>
      <name>v0</name>
      <anchorfile>struct_grappa_1_1_tuple_graph_1_1_edge.html</anchorfile>
      <anchor>a6eb448053d52faa99b80f41842498794</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>v1</name>
      <anchorfile>struct_grappa_1_1_tuple_graph_1_1_edge.html</anchorfile>
      <anchor>a5e27084cf7dbb3ce6f459c1a3f5b41e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::Empty</name>
    <filename>struct_grappa_1_1_empty.html</filename>
  </compound>
  <compound kind="class">
    <name>Entry</name>
    <filename>class_entry.html</filename>
    <member kind="function">
      <type></type>
      <name>Entry</name>
      <anchorfile>class_entry.html</anchorfile>
      <anchor>a45b5a051f9c67f2b391a83c6322fd501</anchor>
      <arglist>(std::string name, std::string value)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>class_entry.html</anchorfile>
      <anchor>af804ad40a497eefcf49448873d96ece0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>value</name>
      <anchorfile>class_entry.html</anchorfile>
      <anchor>af9dbccd26e3e7568587b0bcd1ec2cfba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::GlobalHashMap::Entry</name>
    <filename>struct_grappa_1_1_global_hash_map_1_1_entry.html</filename>
    <member kind="function">
      <type></type>
      <name>Entry</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_entry.html</anchorfile>
      <anchor>af063831162438183c120b2eb3e33bc4e</anchor>
      <arglist>(K key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entry</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_entry.html</anchorfile>
      <anchor>a9f870cb3e57c7ee2512c481a8b58ef33</anchor>
      <arglist>(K key, V val)</arglist>
    </member>
    <member kind="variable">
      <type>K</type>
      <name>key</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_entry.html</anchorfile>
      <anchor>a62a8521947f3beef0a13357bb1033205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V</type>
      <name>val</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_entry.html</anchorfile>
      <anchor>a1950e2842ac725c818e6c4701cd79f37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::GlobalHashSet::Entry</name>
    <filename>struct_grappa_1_1_global_hash_set_1_1_entry.html</filename>
    <member kind="function">
      <type></type>
      <name>Entry</name>
      <anchorfile>struct_grappa_1_1_global_hash_set_1_1_entry.html</anchorfile>
      <anchor>ac42a1eb2e8bc2ecf247209f0361dd0be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entry</name>
      <anchorfile>struct_grappa_1_1_global_hash_set_1_1_entry.html</anchorfile>
      <anchor>a6d94c6f335399478dc990eaa01e9f59a</anchor>
      <arglist>(K key)</arglist>
    </member>
    <member kind="variable">
      <type>K</type>
      <name>key</name>
      <anchorfile>struct_grappa_1_1_global_hash_set_1_1_entry.html</anchorfile>
      <anchor>a047467e3a2c459a753b2e4f023369e54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Allocator::Exception</name>
    <filename>class_allocator_1_1_exception.html</filename>
  </compound>
  <compound kind="class">
    <name>Grappa::ExternalCountPayloadMessage</name>
    <filename>class_grappa_1_1_external_count_payload_message.html</filename>
    <templarg></templarg>
    <base>Grappa::PayloadMessage</base>
    <member kind="function">
      <type></type>
      <name>ExternalCountPayloadMessage</name>
      <anchorfile>class_grappa_1_1_external_count_payload_message.html</anchorfile>
      <anchor>ae6e8d2b9780369dc7e2895189cf3c285</anchor>
      <arglist>(Core dest, T t, void *payload, size_t payload_size, uint64_t *count)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>mark_sent</name>
      <anchorfile>class_grappa_1_1_external_count_payload_message.html</anchorfile>
      <anchor>a1dd580eceaa42ab6fbf37d1df267139a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::delegate::FetchAddCombiner</name>
    <filename>class_grappa_1_1delegate_1_1_fetch_add_combiner.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>FetchAddCombiner</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gadd59416bfe7da3345a7e68ef6f2e5e0e</anchor>
      <arglist>(GlobalAddress&lt; T &gt; target, uint64_t flush_threshold, U initVal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>promise</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gad94c25c215ee615549a1f5022fff35d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and_add</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gaa47ad9d06ff6b28ac7ec84f30ba04796</anchor>
      <arglist>(U inc)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::File</name>
    <filename>struct_grappa_1_1_file.html</filename>
    <member kind="function">
      <type></type>
      <name>File</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gade155f830ecf40c2dda6ffcef53e9e33</anchor>
      <arglist>(const char *fname, bool asDirectory, size_t offset=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>File</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga02ff9302ac2bec88e5f6aa523861b1fe</anchor>
      <arglist>(const char *fname, size_t offset=0)</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>fname</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga62c269fea157d784f7076e4d0f1039e1</anchor>
      <arglist>[FNAME_LENGTH]</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isDirectory</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga03b16a4beb0230a08d5a3736bca1d6cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>offset</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga362d35b1201d2710f69f9adc792644d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::FlatCombiner</name>
    <filename>class_grappa_1_1_flat_combiner.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>FlatCombiner</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a76d410937f1ea82a549ff093105b3e04</anchor>
      <arglist>(T *initial)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FlatCombiner</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a5f0508d3544e870446428f709f1d23b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a713de3e6610fc1ba65730c06f7ba2ccd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>combine</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a33c1f6327027edfdc05b9b388cdf56e4</anchor>
      <arglist>(F func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>ae326196ff1bf30034d73877c839d12e8</anchor>
      <arglist>(Flusher *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FlatCombiner&lt; Grappa::GlobalCounter::Proxy &gt;</name>
    <filename>class_grappa_1_1_flat_combiner.html</filename>
    <member kind="function">
      <type></type>
      <name>FlatCombiner</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a76d410937f1ea82a549ff093105b3e04</anchor>
      <arglist>(Grappa::GlobalCounter::Proxy *initial)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FlatCombiner</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a5f0508d3544e870446428f709f1d23b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalCounter::Proxy *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a713de3e6610fc1ba65730c06f7ba2ccd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>combine</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a33c1f6327027edfdc05b9b388cdf56e4</anchor>
      <arglist>(F func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>ae326196ff1bf30034d73877c839d12e8</anchor>
      <arglist>(Flusher *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FlatCombiner&lt; Grappa::GlobalHashMap::Proxy &gt;</name>
    <filename>class_grappa_1_1_flat_combiner.html</filename>
    <member kind="function">
      <type></type>
      <name>FlatCombiner</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a76d410937f1ea82a549ff093105b3e04</anchor>
      <arglist>(Grappa::GlobalHashMap::Proxy *initial)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FlatCombiner</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a5f0508d3544e870446428f709f1d23b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalHashMap::Proxy *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a713de3e6610fc1ba65730c06f7ba2ccd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>combine</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a33c1f6327027edfdc05b9b388cdf56e4</anchor>
      <arglist>(F func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>ae326196ff1bf30034d73877c839d12e8</anchor>
      <arglist>(Flusher *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FlatCombiner&lt; Grappa::GlobalHashSet::Proxy &gt;</name>
    <filename>class_grappa_1_1_flat_combiner.html</filename>
    <member kind="function">
      <type></type>
      <name>FlatCombiner</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a76d410937f1ea82a549ff093105b3e04</anchor>
      <arglist>(Grappa::GlobalHashSet::Proxy *initial)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FlatCombiner</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a5f0508d3544e870446428f709f1d23b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalHashSet::Proxy *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a713de3e6610fc1ba65730c06f7ba2ccd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>combine</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a33c1f6327027edfdc05b9b388cdf56e4</anchor>
      <arglist>(F func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>ae326196ff1bf30034d73877c839d12e8</anchor>
      <arglist>(Flusher *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FlatCombiner&lt; Grappa::GlobalVector::Proxy &gt;</name>
    <filename>class_grappa_1_1_flat_combiner.html</filename>
    <member kind="function">
      <type></type>
      <name>FlatCombiner</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a76d410937f1ea82a549ff093105b3e04</anchor>
      <arglist>(Grappa::GlobalVector::Proxy *initial)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FlatCombiner</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a5f0508d3544e870446428f709f1d23b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalVector::Proxy *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a713de3e6610fc1ba65730c06f7ba2ccd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>combine</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>a33c1f6327027edfdc05b9b388cdf56e4</anchor>
      <arglist>(F func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>class_grappa_1_1_flat_combiner.html</anchorfile>
      <anchor>ae326196ff1bf30034d73877c839d12e8</anchor>
      <arglist>(Flusher *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::FullEmpty</name>
    <filename>class_grappa_1_1_full_empty.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>void</type>
      <name>block_until</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>ac12183b0e9cddf3c5f0e7eab76956938</anchor>
      <arglist>(State desired_state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullEmpty</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>aeef889e6387d3b441f71b00d36dfb058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullEmpty</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a6a0384d6685d83c215aa01f5727bdb5b</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>full</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>ad9fdd5dbb22d9f2c8323e84675daacc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>af0bc0232cbbcd0e7281bcc126857ac0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a13039abe8b3088c617445c3b0f53c64d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>writeXF</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a357efec6b2370febb946fc68ad739301</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>writeEF</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a76a36eae1dc3db8a434e1b78beca14ff</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>writeFF</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a52f50e43f88cebfbffbc036578570f22</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readXX</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a748d222c48fb3ab24056deece40304df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readFF</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a16ad448a7e73fa76ba6f67dec4340569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readFE</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a6035942238cb13ef91cbaa106e51d8d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>state_</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a85e0a33a79b8931b18d496bb63afcd0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>intptr_t</type>
      <name>waiters_</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a93c63031073039a11407cfdc68d97c49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>intptr_t</type>
      <name>raw_</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a04bf349e77da9cafa9826a0f95bea751</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>t_</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a88b2a96ab094444cb3b5825be4c80b56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FullEmpty&lt; R &gt;</name>
    <filename>class_grappa_1_1_full_empty.html</filename>
    <member kind="function">
      <type>void</type>
      <name>block_until</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>ac12183b0e9cddf3c5f0e7eab76956938</anchor>
      <arglist>(State desired_state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullEmpty</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>aeef889e6387d3b441f71b00d36dfb058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullEmpty</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a6a0384d6685d83c215aa01f5727bdb5b</anchor>
      <arglist>(R t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>full</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>ad9fdd5dbb22d9f2c8323e84675daacc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>af0bc0232cbbcd0e7281bcc126857ac0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a13039abe8b3088c617445c3b0f53c64d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>writeXF</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a357efec6b2370febb946fc68ad739301</anchor>
      <arglist>(R t)</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>writeEF</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a76a36eae1dc3db8a434e1b78beca14ff</anchor>
      <arglist>(R t)</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>writeFF</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a52f50e43f88cebfbffbc036578570f22</anchor>
      <arglist>(R t)</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>readXX</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a748d222c48fb3ab24056deece40304df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>readFF</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a16ad448a7e73fa76ba6f67dec4340569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>readFE</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a6035942238cb13ef91cbaa106e51d8d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>State</type>
      <name>state_</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a85e0a33a79b8931b18d496bb63afcd0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>intptr_t</type>
      <name>waiters_</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a93c63031073039a11407cfdc68d97c49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>intptr_t</type>
      <name>raw_</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a04bf349e77da9cafa9826a0f95bea751</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>R</type>
      <name>t_</name>
      <anchorfile>class_grappa_1_1_full_empty.html</anchorfile>
      <anchor>a88b2a96ab094444cb3b5825be4c80b56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>function_traits</name>
    <filename>structfunction__traits.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>function_traits&lt; ReturnType(ClassType::*)(Args...) const  &gt;</name>
    <filename>structfunction__traits_3_01_return_type_07_class_type_1_1_5_08_07_args_8_8_8_08_01const_01_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Args</templarg>
    <class kind="struct">function_traits&lt; ReturnType(ClassType::*)(Args...) const  &gt;::arg</class>
    <member kind="enumvalue">
      <name>arity</name>
      <anchorfile>structfunction__traits_3_01_return_type_07_class_type_1_1_5_08_07_args_8_8_8_08_01const_01_01_4.html</anchorfile>
      <anchor>a3c457cf4e2cb10d523d59dba139de3a9a508a9f8275e95fa25e2593c3bb2e8cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReturnType</type>
      <name>result_type</name>
      <anchorfile>structfunction__traits_3_01_return_type_07_class_type_1_1_5_08_07_args_8_8_8_08_01const_01_01_4.html</anchorfile>
      <anchor>aa2e09dabc1ed87adf4a83bd6c8fe616c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>arity</name>
      <anchorfile>structfunction__traits_3_01_return_type_07_class_type_1_1_5_08_07_args_8_8_8_08_01const_01_01_4.html</anchorfile>
      <anchor>a3c457cf4e2cb10d523d59dba139de3a9a508a9f8275e95fa25e2593c3bb2e8cd3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Functor</name>
    <filename>struct_functor.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>struct_functor.html</anchorfile>
      <anchor>afc462ec46f87886b2e2e9dd06c3689e5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalAddress</name>
    <filename>class_global_address.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>GlobalAddress</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1171f36d5b8644aead3444aeb98855ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>intptr_t</type>
      <name>raw_bits</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a691d91feb90df836a57458a34819cdc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Core</type>
      <name>core</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1084d32410944f30a2ee310d1140cce9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pool</type>
      <name>pool</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a3abf929fc9173b55465a628222e0bf67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6adf9b5b8afd2ae7dd9bfda97d19f7e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>localize</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af1cdf48002910bef925dd107fea85483</anchor>
      <arglist>(Core nid=-1) const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a24085979031272209dc405534db6e4b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>block_min</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af11f8d2dd7c32b21b9d582e22b00445e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>first_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ae03a2fa015907b34b816640e03ee634e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>last_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a19b61eead58cbb50f25e42d0fb515f1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>block_max</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6a0bcd0726f64ec807958e561743d28b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_2D</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa4bdc0e9cb243ec7a24dd61f45ce96fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314e8e8b38b9f035cbcbb91200114561</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac50b9d19b3bb6bd44def4b65e70a645d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aafb7ed62d671629f0bd963792e7c2a7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a560ac754137bba33b8be64d1b0f1d98f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a2a0e5c3bad5fe60e4f94d9f935c9de91</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5252440cd909dea26061211675da62da</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab2d9927ba5677bedd47de1f455d73ff9</anchor>
      <arglist>(const GlobalAddress&lt; T &gt; &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af61199a6e4416236720a7f753c837600</anchor>
      <arglist>(const GlobalAddress&lt; T &gt; &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5c490cac0959cfaa037d20770b724bac</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa66ce68472e616f40315b10cbcbe53d1</anchor>
      <arglist>(const GlobalAddress&lt; T &gt; &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator GlobalAddress&lt; U &gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a89478a4fa9c3914079c2588459bfba2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af435ca63987bbcfccf5ff070f6c3cb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>TwoDimensional</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab16ed4b8ae565c01234af2479cb00bf9</anchor>
      <arglist>(T *t, Core n=global_communicator.mycore)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ad74b40263351a0a303cd237e82035658</anchor>
      <arglist>(T *t, Pool p=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Raw</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314217be101fb8aedb1c1162358e33b9</anchor>
      <arglist>(intptr_t t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac92d5ccaec3b0a01403b541118e1d0ee</anchor>
      <arglist>(std::ostream &amp;o, const GlobalAddress&lt; U &gt; &amp;ga)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ptrdiff_t</type>
      <name>operator-</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa528050008dda41063a375dd22264046</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;t, const GlobalAddress&lt; U &gt; &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalAddress&lt; G &gt;</name>
    <filename>class_global_address.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalAddress</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1171f36d5b8644aead3444aeb98855ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>intptr_t</type>
      <name>raw_bits</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a691d91feb90df836a57458a34819cdc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Core</type>
      <name>core</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1084d32410944f30a2ee310d1140cce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pool</type>
      <name>pool</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a3abf929fc9173b55465a628222e0bf67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>G *</type>
      <name>pointer</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6adf9b5b8afd2ae7dd9bfda97d19f7e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>G *</type>
      <name>localize</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af1cdf48002910bef925dd107fea85483</anchor>
      <arglist>(Core nid=-1) const</arglist>
    </member>
    <member kind="function">
      <type>G *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a24085979031272209dc405534db6e4b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; G &gt;</type>
      <name>block_min</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af11f8d2dd7c32b21b9d582e22b00445e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>first_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ae03a2fa015907b34b816640e03ee634e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>last_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a19b61eead58cbb50f25e42d0fb515f1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; G &gt;</type>
      <name>block_max</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6a0bcd0726f64ec807958e561743d28b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_2D</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa4bdc0e9cb243ec7a24dd61f45ce96fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314e8e8b38b9f035cbcbb91200114561</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; G &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac50b9d19b3bb6bd44def4b65e70a645d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; G &gt;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aafb7ed62d671629f0bd963792e7c2a7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; G &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a560ac754137bba33b8be64d1b0f1d98f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; G &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a2a0e5c3bad5fe60e4f94d9f935c9de91</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; G &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5252440cd909dea26061211675da62da</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab2d9927ba5677bedd47de1f455d73ff9</anchor>
      <arglist>(const GlobalAddress&lt; G &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af61199a6e4416236720a7f753c837600</anchor>
      <arglist>(const GlobalAddress&lt; G &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5c490cac0959cfaa037d20770b724bac</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa66ce68472e616f40315b10cbcbe53d1</anchor>
      <arglist>(const GlobalAddress&lt; G &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator GlobalAddress&lt; U &gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a89478a4fa9c3914079c2588459bfba2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af435ca63987bbcfccf5ff070f6c3cb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>TwoDimensional</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab16ed4b8ae565c01234af2479cb00bf9</anchor>
      <arglist>(G *t, Core n=global_communicator.mycore)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ad74b40263351a0a303cd237e82035658</anchor>
      <arglist>(G *t, Pool p=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Raw</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314217be101fb8aedb1c1162358e33b9</anchor>
      <arglist>(intptr_t t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac92d5ccaec3b0a01403b541118e1d0ee</anchor>
      <arglist>(std::ostream &amp;o, const GlobalAddress&lt; U &gt; &amp;ga)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ptrdiff_t</type>
      <name>operator-</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa528050008dda41063a375dd22264046</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;t, const GlobalAddress&lt; U &gt; &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalAddress&lt; Grappa::GlobalBag &gt;</name>
    <filename>class_global_address.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalAddress</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1171f36d5b8644aead3444aeb98855ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>intptr_t</type>
      <name>raw_bits</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a691d91feb90df836a57458a34819cdc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Core</type>
      <name>core</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1084d32410944f30a2ee310d1140cce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pool</type>
      <name>pool</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a3abf929fc9173b55465a628222e0bf67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalBag *</type>
      <name>pointer</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6adf9b5b8afd2ae7dd9bfda97d19f7e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalBag *</type>
      <name>localize</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af1cdf48002910bef925dd107fea85483</anchor>
      <arglist>(Core nid=-1) const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalBag *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a24085979031272209dc405534db6e4b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalBag &gt;</type>
      <name>block_min</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af11f8d2dd7c32b21b9d582e22b00445e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>first_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ae03a2fa015907b34b816640e03ee634e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>last_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a19b61eead58cbb50f25e42d0fb515f1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalBag &gt;</type>
      <name>block_max</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6a0bcd0726f64ec807958e561743d28b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_2D</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa4bdc0e9cb243ec7a24dd61f45ce96fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314e8e8b38b9f035cbcbb91200114561</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalBag &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac50b9d19b3bb6bd44def4b65e70a645d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalBag &gt;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aafb7ed62d671629f0bd963792e7c2a7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalBag &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a560ac754137bba33b8be64d1b0f1d98f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalBag &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a2a0e5c3bad5fe60e4f94d9f935c9de91</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalBag &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5252440cd909dea26061211675da62da</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab2d9927ba5677bedd47de1f455d73ff9</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalBag &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af61199a6e4416236720a7f753c837600</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalBag &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5c490cac0959cfaa037d20770b724bac</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa66ce68472e616f40315b10cbcbe53d1</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalBag &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator GlobalAddress&lt; U &gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a89478a4fa9c3914079c2588459bfba2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af435ca63987bbcfccf5ff070f6c3cb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>TwoDimensional</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab16ed4b8ae565c01234af2479cb00bf9</anchor>
      <arglist>(Grappa::GlobalBag *t, Core n=global_communicator.mycore)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ad74b40263351a0a303cd237e82035658</anchor>
      <arglist>(Grappa::GlobalBag *t, Pool p=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Raw</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314217be101fb8aedb1c1162358e33b9</anchor>
      <arglist>(intptr_t t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac92d5ccaec3b0a01403b541118e1d0ee</anchor>
      <arglist>(std::ostream &amp;o, const GlobalAddress&lt; U &gt; &amp;ga)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ptrdiff_t</type>
      <name>operator-</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa528050008dda41063a375dd22264046</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;t, const GlobalAddress&lt; U &gt; &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalAddress&lt; Grappa::GlobalCounter &gt;</name>
    <filename>class_global_address.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalAddress</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1171f36d5b8644aead3444aeb98855ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>intptr_t</type>
      <name>raw_bits</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a691d91feb90df836a57458a34819cdc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Core</type>
      <name>core</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1084d32410944f30a2ee310d1140cce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pool</type>
      <name>pool</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a3abf929fc9173b55465a628222e0bf67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalCounter *</type>
      <name>pointer</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6adf9b5b8afd2ae7dd9bfda97d19f7e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalCounter *</type>
      <name>localize</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af1cdf48002910bef925dd107fea85483</anchor>
      <arglist>(Core nid=-1) const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalCounter *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a24085979031272209dc405534db6e4b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalCounter &gt;</type>
      <name>block_min</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af11f8d2dd7c32b21b9d582e22b00445e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>first_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ae03a2fa015907b34b816640e03ee634e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>last_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a19b61eead58cbb50f25e42d0fb515f1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalCounter &gt;</type>
      <name>block_max</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6a0bcd0726f64ec807958e561743d28b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_2D</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa4bdc0e9cb243ec7a24dd61f45ce96fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314e8e8b38b9f035cbcbb91200114561</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalCounter &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac50b9d19b3bb6bd44def4b65e70a645d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalCounter &gt;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aafb7ed62d671629f0bd963792e7c2a7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalCounter &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a560ac754137bba33b8be64d1b0f1d98f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalCounter &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a2a0e5c3bad5fe60e4f94d9f935c9de91</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalCounter &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5252440cd909dea26061211675da62da</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab2d9927ba5677bedd47de1f455d73ff9</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalCounter &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af61199a6e4416236720a7f753c837600</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalCounter &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5c490cac0959cfaa037d20770b724bac</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa66ce68472e616f40315b10cbcbe53d1</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalCounter &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator GlobalAddress&lt; U &gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a89478a4fa9c3914079c2588459bfba2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af435ca63987bbcfccf5ff070f6c3cb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>TwoDimensional</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab16ed4b8ae565c01234af2479cb00bf9</anchor>
      <arglist>(Grappa::GlobalCounter *t, Core n=global_communicator.mycore)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ad74b40263351a0a303cd237e82035658</anchor>
      <arglist>(Grappa::GlobalCounter *t, Pool p=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Raw</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314217be101fb8aedb1c1162358e33b9</anchor>
      <arglist>(intptr_t t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac92d5ccaec3b0a01403b541118e1d0ee</anchor>
      <arglist>(std::ostream &amp;o, const GlobalAddress&lt; U &gt; &amp;ga)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ptrdiff_t</type>
      <name>operator-</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa528050008dda41063a375dd22264046</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;t, const GlobalAddress&lt; U &gt; &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalAddress&lt; Grappa::GlobalHashMap &gt;</name>
    <filename>class_global_address.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalAddress</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1171f36d5b8644aead3444aeb98855ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>intptr_t</type>
      <name>raw_bits</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a691d91feb90df836a57458a34819cdc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Core</type>
      <name>core</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1084d32410944f30a2ee310d1140cce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pool</type>
      <name>pool</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a3abf929fc9173b55465a628222e0bf67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalHashMap *</type>
      <name>pointer</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6adf9b5b8afd2ae7dd9bfda97d19f7e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalHashMap *</type>
      <name>localize</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af1cdf48002910bef925dd107fea85483</anchor>
      <arglist>(Core nid=-1) const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalHashMap *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a24085979031272209dc405534db6e4b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashMap &gt;</type>
      <name>block_min</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af11f8d2dd7c32b21b9d582e22b00445e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>first_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ae03a2fa015907b34b816640e03ee634e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>last_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a19b61eead58cbb50f25e42d0fb515f1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashMap &gt;</type>
      <name>block_max</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6a0bcd0726f64ec807958e561743d28b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_2D</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa4bdc0e9cb243ec7a24dd61f45ce96fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314e8e8b38b9f035cbcbb91200114561</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashMap &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac50b9d19b3bb6bd44def4b65e70a645d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashMap &gt;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aafb7ed62d671629f0bd963792e7c2a7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashMap &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a560ac754137bba33b8be64d1b0f1d98f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashMap &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a2a0e5c3bad5fe60e4f94d9f935c9de91</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashMap &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5252440cd909dea26061211675da62da</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab2d9927ba5677bedd47de1f455d73ff9</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalHashMap &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af61199a6e4416236720a7f753c837600</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalHashMap &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5c490cac0959cfaa037d20770b724bac</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa66ce68472e616f40315b10cbcbe53d1</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalHashMap &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator GlobalAddress&lt; U &gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a89478a4fa9c3914079c2588459bfba2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af435ca63987bbcfccf5ff070f6c3cb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>TwoDimensional</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab16ed4b8ae565c01234af2479cb00bf9</anchor>
      <arglist>(Grappa::GlobalHashMap *t, Core n=global_communicator.mycore)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ad74b40263351a0a303cd237e82035658</anchor>
      <arglist>(Grappa::GlobalHashMap *t, Pool p=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Raw</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314217be101fb8aedb1c1162358e33b9</anchor>
      <arglist>(intptr_t t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac92d5ccaec3b0a01403b541118e1d0ee</anchor>
      <arglist>(std::ostream &amp;o, const GlobalAddress&lt; U &gt; &amp;ga)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ptrdiff_t</type>
      <name>operator-</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa528050008dda41063a375dd22264046</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;t, const GlobalAddress&lt; U &gt; &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalAddress&lt; Grappa::GlobalHashMap::Cell &gt;</name>
    <filename>class_global_address.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalAddress</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1171f36d5b8644aead3444aeb98855ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>intptr_t</type>
      <name>raw_bits</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a691d91feb90df836a57458a34819cdc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Core</type>
      <name>core</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1084d32410944f30a2ee310d1140cce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pool</type>
      <name>pool</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a3abf929fc9173b55465a628222e0bf67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalHashMap::Cell *</type>
      <name>pointer</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6adf9b5b8afd2ae7dd9bfda97d19f7e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalHashMap::Cell *</type>
      <name>localize</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af1cdf48002910bef925dd107fea85483</anchor>
      <arglist>(Core nid=-1) const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalHashMap::Cell *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a24085979031272209dc405534db6e4b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashMap::Cell &gt;</type>
      <name>block_min</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af11f8d2dd7c32b21b9d582e22b00445e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>first_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ae03a2fa015907b34b816640e03ee634e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>last_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a19b61eead58cbb50f25e42d0fb515f1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashMap::Cell &gt;</type>
      <name>block_max</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6a0bcd0726f64ec807958e561743d28b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_2D</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa4bdc0e9cb243ec7a24dd61f45ce96fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314e8e8b38b9f035cbcbb91200114561</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashMap::Cell &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac50b9d19b3bb6bd44def4b65e70a645d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashMap::Cell &gt;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aafb7ed62d671629f0bd963792e7c2a7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashMap::Cell &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a560ac754137bba33b8be64d1b0f1d98f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashMap::Cell &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a2a0e5c3bad5fe60e4f94d9f935c9de91</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashMap::Cell &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5252440cd909dea26061211675da62da</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab2d9927ba5677bedd47de1f455d73ff9</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalHashMap::Cell &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af61199a6e4416236720a7f753c837600</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalHashMap::Cell &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5c490cac0959cfaa037d20770b724bac</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa66ce68472e616f40315b10cbcbe53d1</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalHashMap::Cell &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator GlobalAddress&lt; U &gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a89478a4fa9c3914079c2588459bfba2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af435ca63987bbcfccf5ff070f6c3cb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>TwoDimensional</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab16ed4b8ae565c01234af2479cb00bf9</anchor>
      <arglist>(Grappa::GlobalHashMap::Cell *t, Core n=global_communicator.mycore)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ad74b40263351a0a303cd237e82035658</anchor>
      <arglist>(Grappa::GlobalHashMap::Cell *t, Pool p=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Raw</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314217be101fb8aedb1c1162358e33b9</anchor>
      <arglist>(intptr_t t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac92d5ccaec3b0a01403b541118e1d0ee</anchor>
      <arglist>(std::ostream &amp;o, const GlobalAddress&lt; U &gt; &amp;ga)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ptrdiff_t</type>
      <name>operator-</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa528050008dda41063a375dd22264046</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;t, const GlobalAddress&lt; U &gt; &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalAddress&lt; Grappa::GlobalHashSet &gt;</name>
    <filename>class_global_address.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalAddress</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1171f36d5b8644aead3444aeb98855ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>intptr_t</type>
      <name>raw_bits</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a691d91feb90df836a57458a34819cdc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Core</type>
      <name>core</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1084d32410944f30a2ee310d1140cce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pool</type>
      <name>pool</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a3abf929fc9173b55465a628222e0bf67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalHashSet *</type>
      <name>pointer</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6adf9b5b8afd2ae7dd9bfda97d19f7e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalHashSet *</type>
      <name>localize</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af1cdf48002910bef925dd107fea85483</anchor>
      <arglist>(Core nid=-1) const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalHashSet *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a24085979031272209dc405534db6e4b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashSet &gt;</type>
      <name>block_min</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af11f8d2dd7c32b21b9d582e22b00445e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>first_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ae03a2fa015907b34b816640e03ee634e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>last_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a19b61eead58cbb50f25e42d0fb515f1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashSet &gt;</type>
      <name>block_max</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6a0bcd0726f64ec807958e561743d28b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_2D</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa4bdc0e9cb243ec7a24dd61f45ce96fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314e8e8b38b9f035cbcbb91200114561</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashSet &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac50b9d19b3bb6bd44def4b65e70a645d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashSet &gt;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aafb7ed62d671629f0bd963792e7c2a7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashSet &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a560ac754137bba33b8be64d1b0f1d98f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashSet &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a2a0e5c3bad5fe60e4f94d9f935c9de91</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashSet &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5252440cd909dea26061211675da62da</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab2d9927ba5677bedd47de1f455d73ff9</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalHashSet &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af61199a6e4416236720a7f753c837600</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalHashSet &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5c490cac0959cfaa037d20770b724bac</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa66ce68472e616f40315b10cbcbe53d1</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalHashSet &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator GlobalAddress&lt; U &gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a89478a4fa9c3914079c2588459bfba2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af435ca63987bbcfccf5ff070f6c3cb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>TwoDimensional</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab16ed4b8ae565c01234af2479cb00bf9</anchor>
      <arglist>(Grappa::GlobalHashSet *t, Core n=global_communicator.mycore)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ad74b40263351a0a303cd237e82035658</anchor>
      <arglist>(Grappa::GlobalHashSet *t, Pool p=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Raw</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314217be101fb8aedb1c1162358e33b9</anchor>
      <arglist>(intptr_t t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac92d5ccaec3b0a01403b541118e1d0ee</anchor>
      <arglist>(std::ostream &amp;o, const GlobalAddress&lt; U &gt; &amp;ga)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ptrdiff_t</type>
      <name>operator-</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa528050008dda41063a375dd22264046</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;t, const GlobalAddress&lt; U &gt; &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalAddress&lt; Grappa::GlobalHashSet::Cell &gt;</name>
    <filename>class_global_address.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalAddress</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1171f36d5b8644aead3444aeb98855ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>intptr_t</type>
      <name>raw_bits</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a691d91feb90df836a57458a34819cdc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Core</type>
      <name>core</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1084d32410944f30a2ee310d1140cce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pool</type>
      <name>pool</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a3abf929fc9173b55465a628222e0bf67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalHashSet::Cell *</type>
      <name>pointer</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6adf9b5b8afd2ae7dd9bfda97d19f7e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalHashSet::Cell *</type>
      <name>localize</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af1cdf48002910bef925dd107fea85483</anchor>
      <arglist>(Core nid=-1) const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalHashSet::Cell *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a24085979031272209dc405534db6e4b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashSet::Cell &gt;</type>
      <name>block_min</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af11f8d2dd7c32b21b9d582e22b00445e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>first_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ae03a2fa015907b34b816640e03ee634e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>last_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a19b61eead58cbb50f25e42d0fb515f1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashSet::Cell &gt;</type>
      <name>block_max</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6a0bcd0726f64ec807958e561743d28b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_2D</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa4bdc0e9cb243ec7a24dd61f45ce96fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314e8e8b38b9f035cbcbb91200114561</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashSet::Cell &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac50b9d19b3bb6bd44def4b65e70a645d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashSet::Cell &gt;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aafb7ed62d671629f0bd963792e7c2a7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashSet::Cell &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a560ac754137bba33b8be64d1b0f1d98f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashSet::Cell &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a2a0e5c3bad5fe60e4f94d9f935c9de91</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalHashSet::Cell &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5252440cd909dea26061211675da62da</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab2d9927ba5677bedd47de1f455d73ff9</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalHashSet::Cell &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af61199a6e4416236720a7f753c837600</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalHashSet::Cell &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5c490cac0959cfaa037d20770b724bac</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa66ce68472e616f40315b10cbcbe53d1</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalHashSet::Cell &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator GlobalAddress&lt; U &gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a89478a4fa9c3914079c2588459bfba2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af435ca63987bbcfccf5ff070f6c3cb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>TwoDimensional</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab16ed4b8ae565c01234af2479cb00bf9</anchor>
      <arglist>(Grappa::GlobalHashSet::Cell *t, Core n=global_communicator.mycore)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ad74b40263351a0a303cd237e82035658</anchor>
      <arglist>(Grappa::GlobalHashSet::Cell *t, Pool p=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Raw</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314217be101fb8aedb1c1162358e33b9</anchor>
      <arglist>(intptr_t t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac92d5ccaec3b0a01403b541118e1d0ee</anchor>
      <arglist>(std::ostream &amp;o, const GlobalAddress&lt; U &gt; &amp;ga)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ptrdiff_t</type>
      <name>operator-</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa528050008dda41063a375dd22264046</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;t, const GlobalAddress&lt; U &gt; &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalAddress&lt; Grappa::GlobalVector &gt;</name>
    <filename>class_global_address.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalAddress</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1171f36d5b8644aead3444aeb98855ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>intptr_t</type>
      <name>raw_bits</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a691d91feb90df836a57458a34819cdc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Core</type>
      <name>core</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1084d32410944f30a2ee310d1140cce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pool</type>
      <name>pool</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a3abf929fc9173b55465a628222e0bf67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalVector *</type>
      <name>pointer</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6adf9b5b8afd2ae7dd9bfda97d19f7e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalVector *</type>
      <name>localize</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af1cdf48002910bef925dd107fea85483</anchor>
      <arglist>(Core nid=-1) const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::GlobalVector *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a24085979031272209dc405534db6e4b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalVector &gt;</type>
      <name>block_min</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af11f8d2dd7c32b21b9d582e22b00445e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>first_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ae03a2fa015907b34b816640e03ee634e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>last_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a19b61eead58cbb50f25e42d0fb515f1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalVector &gt;</type>
      <name>block_max</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6a0bcd0726f64ec807958e561743d28b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_2D</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa4bdc0e9cb243ec7a24dd61f45ce96fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314e8e8b38b9f035cbcbb91200114561</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalVector &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac50b9d19b3bb6bd44def4b65e70a645d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalVector &gt;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aafb7ed62d671629f0bd963792e7c2a7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalVector &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a560ac754137bba33b8be64d1b0f1d98f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalVector &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a2a0e5c3bad5fe60e4f94d9f935c9de91</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::GlobalVector &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5252440cd909dea26061211675da62da</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab2d9927ba5677bedd47de1f455d73ff9</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalVector &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af61199a6e4416236720a7f753c837600</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalVector &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5c490cac0959cfaa037d20770b724bac</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa66ce68472e616f40315b10cbcbe53d1</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::GlobalVector &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator GlobalAddress&lt; U &gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a89478a4fa9c3914079c2588459bfba2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af435ca63987bbcfccf5ff070f6c3cb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>TwoDimensional</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab16ed4b8ae565c01234af2479cb00bf9</anchor>
      <arglist>(Grappa::GlobalVector *t, Core n=global_communicator.mycore)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ad74b40263351a0a303cd237e82035658</anchor>
      <arglist>(Grappa::GlobalVector *t, Pool p=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Raw</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314217be101fb8aedb1c1162358e33b9</anchor>
      <arglist>(intptr_t t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac92d5ccaec3b0a01403b541118e1d0ee</anchor>
      <arglist>(std::ostream &amp;o, const GlobalAddress&lt; U &gt; &amp;ga)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ptrdiff_t</type>
      <name>operator-</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa528050008dda41063a375dd22264046</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;t, const GlobalAddress&lt; U &gt; &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalAddress&lt; Grappa::Graph &gt;</name>
    <filename>class_global_address.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalAddress</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1171f36d5b8644aead3444aeb98855ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>intptr_t</type>
      <name>raw_bits</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a691d91feb90df836a57458a34819cdc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Core</type>
      <name>core</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1084d32410944f30a2ee310d1140cce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pool</type>
      <name>pool</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a3abf929fc9173b55465a628222e0bf67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::Graph *</type>
      <name>pointer</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6adf9b5b8afd2ae7dd9bfda97d19f7e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::Graph *</type>
      <name>localize</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af1cdf48002910bef925dd107fea85483</anchor>
      <arglist>(Core nid=-1) const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::Graph *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a24085979031272209dc405534db6e4b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::Graph &gt;</type>
      <name>block_min</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af11f8d2dd7c32b21b9d582e22b00445e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>first_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ae03a2fa015907b34b816640e03ee634e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>last_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a19b61eead58cbb50f25e42d0fb515f1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::Graph &gt;</type>
      <name>block_max</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6a0bcd0726f64ec807958e561743d28b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_2D</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa4bdc0e9cb243ec7a24dd61f45ce96fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314e8e8b38b9f035cbcbb91200114561</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::Graph &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac50b9d19b3bb6bd44def4b65e70a645d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::Graph &gt;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aafb7ed62d671629f0bd963792e7c2a7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::Graph &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a560ac754137bba33b8be64d1b0f1d98f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::Graph &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a2a0e5c3bad5fe60e4f94d9f935c9de91</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::Graph &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5252440cd909dea26061211675da62da</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab2d9927ba5677bedd47de1f455d73ff9</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::Graph &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af61199a6e4416236720a7f753c837600</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::Graph &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5c490cac0959cfaa037d20770b724bac</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa66ce68472e616f40315b10cbcbe53d1</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::Graph &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator GlobalAddress&lt; U &gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a89478a4fa9c3914079c2588459bfba2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af435ca63987bbcfccf5ff070f6c3cb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>TwoDimensional</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab16ed4b8ae565c01234af2479cb00bf9</anchor>
      <arglist>(Grappa::Graph *t, Core n=global_communicator.mycore)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ad74b40263351a0a303cd237e82035658</anchor>
      <arglist>(Grappa::Graph *t, Pool p=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Raw</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314217be101fb8aedb1c1162358e33b9</anchor>
      <arglist>(intptr_t t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac92d5ccaec3b0a01403b541118e1d0ee</anchor>
      <arglist>(std::ostream &amp;o, const GlobalAddress&lt; U &gt; &amp;ga)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ptrdiff_t</type>
      <name>operator-</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa528050008dda41063a375dd22264046</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;t, const GlobalAddress&lt; U &gt; &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalAddress&lt; Grappa::TupleGraph::Edge &gt;</name>
    <filename>class_global_address.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalAddress</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1171f36d5b8644aead3444aeb98855ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>intptr_t</type>
      <name>raw_bits</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a691d91feb90df836a57458a34819cdc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Core</type>
      <name>core</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1084d32410944f30a2ee310d1140cce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pool</type>
      <name>pool</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a3abf929fc9173b55465a628222e0bf67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::TupleGraph::Edge *</type>
      <name>pointer</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6adf9b5b8afd2ae7dd9bfda97d19f7e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::TupleGraph::Edge *</type>
      <name>localize</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af1cdf48002910bef925dd107fea85483</anchor>
      <arglist>(Core nid=-1) const</arglist>
    </member>
    <member kind="function">
      <type>Grappa::TupleGraph::Edge *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a24085979031272209dc405534db6e4b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::TupleGraph::Edge &gt;</type>
      <name>block_min</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af11f8d2dd7c32b21b9d582e22b00445e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>first_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ae03a2fa015907b34b816640e03ee634e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>last_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a19b61eead58cbb50f25e42d0fb515f1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::TupleGraph::Edge &gt;</type>
      <name>block_max</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6a0bcd0726f64ec807958e561743d28b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_2D</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa4bdc0e9cb243ec7a24dd61f45ce96fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314e8e8b38b9f035cbcbb91200114561</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::TupleGraph::Edge &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac50b9d19b3bb6bd44def4b65e70a645d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::TupleGraph::Edge &gt;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aafb7ed62d671629f0bd963792e7c2a7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::TupleGraph::Edge &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a560ac754137bba33b8be64d1b0f1d98f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::TupleGraph::Edge &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a2a0e5c3bad5fe60e4f94d9f935c9de91</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Grappa::TupleGraph::Edge &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5252440cd909dea26061211675da62da</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab2d9927ba5677bedd47de1f455d73ff9</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::TupleGraph::Edge &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af61199a6e4416236720a7f753c837600</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::TupleGraph::Edge &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5c490cac0959cfaa037d20770b724bac</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa66ce68472e616f40315b10cbcbe53d1</anchor>
      <arglist>(const GlobalAddress&lt; Grappa::TupleGraph::Edge &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator GlobalAddress&lt; U &gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a89478a4fa9c3914079c2588459bfba2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af435ca63987bbcfccf5ff070f6c3cb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>TwoDimensional</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab16ed4b8ae565c01234af2479cb00bf9</anchor>
      <arglist>(Grappa::TupleGraph::Edge *t, Core n=global_communicator.mycore)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ad74b40263351a0a303cd237e82035658</anchor>
      <arglist>(Grappa::TupleGraph::Edge *t, Pool p=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Raw</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314217be101fb8aedb1c1162358e33b9</anchor>
      <arglist>(intptr_t t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac92d5ccaec3b0a01403b541118e1d0ee</anchor>
      <arglist>(std::ostream &amp;o, const GlobalAddress&lt; U &gt; &amp;ga)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ptrdiff_t</type>
      <name>operator-</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa528050008dda41063a375dd22264046</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;t, const GlobalAddress&lt; U &gt; &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalAddress&lt; IncoherentAcquirer &gt;</name>
    <filename>class_global_address.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalAddress</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1171f36d5b8644aead3444aeb98855ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>intptr_t</type>
      <name>raw_bits</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a691d91feb90df836a57458a34819cdc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Core</type>
      <name>core</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1084d32410944f30a2ee310d1140cce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pool</type>
      <name>pool</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a3abf929fc9173b55465a628222e0bf67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IncoherentAcquirer *</type>
      <name>pointer</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6adf9b5b8afd2ae7dd9bfda97d19f7e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IncoherentAcquirer *</type>
      <name>localize</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af1cdf48002910bef925dd107fea85483</anchor>
      <arglist>(Core nid=-1) const</arglist>
    </member>
    <member kind="function">
      <type>IncoherentAcquirer *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a24085979031272209dc405534db6e4b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; IncoherentAcquirer &gt;</type>
      <name>block_min</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af11f8d2dd7c32b21b9d582e22b00445e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>first_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ae03a2fa015907b34b816640e03ee634e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>last_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a19b61eead58cbb50f25e42d0fb515f1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; IncoherentAcquirer &gt;</type>
      <name>block_max</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6a0bcd0726f64ec807958e561743d28b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_2D</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa4bdc0e9cb243ec7a24dd61f45ce96fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314e8e8b38b9f035cbcbb91200114561</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; IncoherentAcquirer &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac50b9d19b3bb6bd44def4b65e70a645d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; IncoherentAcquirer &gt;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aafb7ed62d671629f0bd963792e7c2a7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; IncoherentAcquirer &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a560ac754137bba33b8be64d1b0f1d98f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; IncoherentAcquirer &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a2a0e5c3bad5fe60e4f94d9f935c9de91</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; IncoherentAcquirer &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5252440cd909dea26061211675da62da</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab2d9927ba5677bedd47de1f455d73ff9</anchor>
      <arglist>(const GlobalAddress&lt; IncoherentAcquirer &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af61199a6e4416236720a7f753c837600</anchor>
      <arglist>(const GlobalAddress&lt; IncoherentAcquirer &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5c490cac0959cfaa037d20770b724bac</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa66ce68472e616f40315b10cbcbe53d1</anchor>
      <arglist>(const GlobalAddress&lt; IncoherentAcquirer &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator GlobalAddress&lt; U &gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a89478a4fa9c3914079c2588459bfba2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af435ca63987bbcfccf5ff070f6c3cb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>TwoDimensional</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab16ed4b8ae565c01234af2479cb00bf9</anchor>
      <arglist>(IncoherentAcquirer *t, Core n=global_communicator.mycore)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ad74b40263351a0a303cd237e82035658</anchor>
      <arglist>(IncoherentAcquirer *t, Pool p=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Raw</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314217be101fb8aedb1c1162358e33b9</anchor>
      <arglist>(intptr_t t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac92d5ccaec3b0a01403b541118e1d0ee</anchor>
      <arglist>(std::ostream &amp;o, const GlobalAddress&lt; U &gt; &amp;ga)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ptrdiff_t</type>
      <name>operator-</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa528050008dda41063a375dd22264046</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;t, const GlobalAddress&lt; U &gt; &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalAddress&lt; IncoherentReleaser &gt;</name>
    <filename>class_global_address.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalAddress</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1171f36d5b8644aead3444aeb98855ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>intptr_t</type>
      <name>raw_bits</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a691d91feb90df836a57458a34819cdc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Core</type>
      <name>core</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1084d32410944f30a2ee310d1140cce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pool</type>
      <name>pool</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a3abf929fc9173b55465a628222e0bf67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IncoherentReleaser *</type>
      <name>pointer</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6adf9b5b8afd2ae7dd9bfda97d19f7e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IncoherentReleaser *</type>
      <name>localize</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af1cdf48002910bef925dd107fea85483</anchor>
      <arglist>(Core nid=-1) const</arglist>
    </member>
    <member kind="function">
      <type>IncoherentReleaser *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a24085979031272209dc405534db6e4b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; IncoherentReleaser &gt;</type>
      <name>block_min</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af11f8d2dd7c32b21b9d582e22b00445e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>first_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ae03a2fa015907b34b816640e03ee634e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>last_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a19b61eead58cbb50f25e42d0fb515f1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; IncoherentReleaser &gt;</type>
      <name>block_max</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6a0bcd0726f64ec807958e561743d28b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_2D</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa4bdc0e9cb243ec7a24dd61f45ce96fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314e8e8b38b9f035cbcbb91200114561</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; IncoherentReleaser &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac50b9d19b3bb6bd44def4b65e70a645d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; IncoherentReleaser &gt;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aafb7ed62d671629f0bd963792e7c2a7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; IncoherentReleaser &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a560ac754137bba33b8be64d1b0f1d98f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; IncoherentReleaser &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a2a0e5c3bad5fe60e4f94d9f935c9de91</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; IncoherentReleaser &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5252440cd909dea26061211675da62da</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab2d9927ba5677bedd47de1f455d73ff9</anchor>
      <arglist>(const GlobalAddress&lt; IncoherentReleaser &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af61199a6e4416236720a7f753c837600</anchor>
      <arglist>(const GlobalAddress&lt; IncoherentReleaser &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5c490cac0959cfaa037d20770b724bac</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa66ce68472e616f40315b10cbcbe53d1</anchor>
      <arglist>(const GlobalAddress&lt; IncoherentReleaser &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator GlobalAddress&lt; U &gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a89478a4fa9c3914079c2588459bfba2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af435ca63987bbcfccf5ff070f6c3cb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>TwoDimensional</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab16ed4b8ae565c01234af2479cb00bf9</anchor>
      <arglist>(IncoherentReleaser *t, Core n=global_communicator.mycore)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ad74b40263351a0a303cd237e82035658</anchor>
      <arglist>(IncoherentReleaser *t, Pool p=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Raw</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314217be101fb8aedb1c1162358e33b9</anchor>
      <arglist>(intptr_t t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac92d5ccaec3b0a01403b541118e1d0ee</anchor>
      <arglist>(std::ostream &amp;o, const GlobalAddress&lt; U &gt; &amp;ga)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ptrdiff_t</type>
      <name>operator-</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa528050008dda41063a375dd22264046</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;t, const GlobalAddress&lt; U &gt; &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalAddress&lt; int64_t &gt;</name>
    <filename>class_global_address.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalAddress</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1171f36d5b8644aead3444aeb98855ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>intptr_t</type>
      <name>raw_bits</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a691d91feb90df836a57458a34819cdc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Core</type>
      <name>core</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1084d32410944f30a2ee310d1140cce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pool</type>
      <name>pool</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a3abf929fc9173b55465a628222e0bf67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t *</type>
      <name>pointer</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6adf9b5b8afd2ae7dd9bfda97d19f7e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t *</type>
      <name>localize</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af1cdf48002910bef925dd107fea85483</anchor>
      <arglist>(Core nid=-1) const</arglist>
    </member>
    <member kind="function">
      <type>int64_t *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a24085979031272209dc405534db6e4b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; int64_t &gt;</type>
      <name>block_min</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af11f8d2dd7c32b21b9d582e22b00445e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>first_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ae03a2fa015907b34b816640e03ee634e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>last_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a19b61eead58cbb50f25e42d0fb515f1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; int64_t &gt;</type>
      <name>block_max</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6a0bcd0726f64ec807958e561743d28b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_2D</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa4bdc0e9cb243ec7a24dd61f45ce96fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314e8e8b38b9f035cbcbb91200114561</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; int64_t &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac50b9d19b3bb6bd44def4b65e70a645d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; int64_t &gt;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aafb7ed62d671629f0bd963792e7c2a7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; int64_t &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a560ac754137bba33b8be64d1b0f1d98f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; int64_t &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a2a0e5c3bad5fe60e4f94d9f935c9de91</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; int64_t &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5252440cd909dea26061211675da62da</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab2d9927ba5677bedd47de1f455d73ff9</anchor>
      <arglist>(const GlobalAddress&lt; int64_t &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af61199a6e4416236720a7f753c837600</anchor>
      <arglist>(const GlobalAddress&lt; int64_t &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5c490cac0959cfaa037d20770b724bac</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa66ce68472e616f40315b10cbcbe53d1</anchor>
      <arglist>(const GlobalAddress&lt; int64_t &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator GlobalAddress&lt; U &gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a89478a4fa9c3914079c2588459bfba2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af435ca63987bbcfccf5ff070f6c3cb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>TwoDimensional</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab16ed4b8ae565c01234af2479cb00bf9</anchor>
      <arglist>(int64_t *t, Core n=global_communicator.mycore)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ad74b40263351a0a303cd237e82035658</anchor>
      <arglist>(int64_t *t, Pool p=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Raw</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314217be101fb8aedb1c1162358e33b9</anchor>
      <arglist>(intptr_t t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac92d5ccaec3b0a01403b541118e1d0ee</anchor>
      <arglist>(std::ostream &amp;o, const GlobalAddress&lt; U &gt; &amp;ga)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ptrdiff_t</type>
      <name>operator-</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa528050008dda41063a375dd22264046</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;t, const GlobalAddress&lt; U &gt; &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalAddress&lt; Vertex &gt;</name>
    <filename>class_global_address.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalAddress</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1171f36d5b8644aead3444aeb98855ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>intptr_t</type>
      <name>raw_bits</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a691d91feb90df836a57458a34819cdc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Core</type>
      <name>core</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a1084d32410944f30a2ee310d1140cce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pool</type>
      <name>pool</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a3abf929fc9173b55465a628222e0bf67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vertex *</type>
      <name>pointer</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6adf9b5b8afd2ae7dd9bfda97d19f7e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vertex *</type>
      <name>localize</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af1cdf48002910bef925dd107fea85483</anchor>
      <arglist>(Core nid=-1) const</arglist>
    </member>
    <member kind="function">
      <type>Vertex *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a24085979031272209dc405534db6e4b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Vertex &gt;</type>
      <name>block_min</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af11f8d2dd7c32b21b9d582e22b00445e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>first_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ae03a2fa015907b34b816640e03ee634e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; char &gt;</type>
      <name>last_byte</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a19b61eead58cbb50f25e42d0fb515f1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Vertex &gt;</type>
      <name>block_max</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a6a0bcd0726f64ec807958e561743d28b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_2D</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa4bdc0e9cb243ec7a24dd61f45ce96fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314e8e8b38b9f035cbcbb91200114561</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Vertex &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac50b9d19b3bb6bd44def4b65e70a645d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Vertex &gt;</type>
      <name>operator++</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aafb7ed62d671629f0bd963792e7c2a7e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Vertex &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a560ac754137bba33b8be64d1b0f1d98f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Vertex &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a2a0e5c3bad5fe60e4f94d9f935c9de91</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Vertex &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5252440cd909dea26061211675da62da</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab2d9927ba5677bedd47de1f455d73ff9</anchor>
      <arglist>(const GlobalAddress&lt; Vertex &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af61199a6e4416236720a7f753c837600</anchor>
      <arglist>(const GlobalAddress&lt; Vertex &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a5c490cac0959cfaa037d20770b724bac</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;u) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa66ce68472e616f40315b10cbcbe53d1</anchor>
      <arglist>(const GlobalAddress&lt; Vertex &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator GlobalAddress&lt; U &gt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a89478a4fa9c3914079c2588459bfba2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>af435ca63987bbcfccf5ff070f6c3cb58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>TwoDimensional</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ab16ed4b8ae565c01234af2479cb00bf9</anchor>
      <arglist>(Vertex *t, Core n=global_communicator.mycore)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Linear</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ad74b40263351a0a303cd237e82035658</anchor>
      <arglist>(Vertex *t, Pool p=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress</type>
      <name>Raw</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>a314217be101fb8aedb1c1162358e33b9</anchor>
      <arglist>(intptr_t t)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>ac92d5ccaec3b0a01403b541118e1d0ee</anchor>
      <arglist>(std::ostream &amp;o, const GlobalAddress&lt; U &gt; &amp;ga)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend ptrdiff_t</type>
      <name>operator-</name>
      <anchorfile>class_global_address.html</anchorfile>
      <anchor>aa528050008dda41063a375dd22264046</anchor>
      <arglist>(const GlobalAddress&lt; U &gt; &amp;t, const GlobalAddress&lt; U &gt; &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalAllocator</name>
    <filename>class_global_allocator.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalAllocator</name>
      <anchorfile>class_global_allocator.html</anchorfile>
      <anchor>ac0621f72ddd968a81aba85e0df8ec6ad</anchor>
      <arglist>(GlobalAddress&lt; void &gt; base, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump</name>
      <anchorfile>class_global_allocator.html</anchorfile>
      <anchor>a0aafa18b0d0e4da9e2d274087392f8b0</anchor>
      <arglist>(std::ostream &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>total_bytes</name>
      <anchorfile>class_global_allocator.html</anchorfile>
      <anchor>aafcf2dbeab25e31681cf4a8818b0cff5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>total_bytes_in_use</name>
      <anchorfile>class_global_allocator.html</anchorfile>
      <anchor>a9f70c1665be71ba3a9151296f1deb641</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress&lt; void &gt;</type>
      <name>remote_malloc</name>
      <anchorfile>class_global_allocator.html</anchorfile>
      <anchor>afcacd51b0ab5a1b2f6377b84f45acb71</anchor>
      <arglist>(size_t size_bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>remote_free</name>
      <anchorfile>class_global_allocator.html</anchorfile>
      <anchor>a88e4272c8127e8fcf56aaf5d900f85ea</anchor>
      <arglist>(GlobalAddress&lt; void &gt; address)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::GlobalBag</name>
    <filename>class_grappa_1_1_global_bag.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>GlobalBag</name>
      <anchorfile>class_grappa_1_1_global_bag.html</anchorfile>
      <anchor>aff39fedf70391f794a297e5f015fa353</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalBag</name>
      <anchorfile>class_grappa_1_1_global_bag.html</anchorfile>
      <anchor>aafbb56493b76113aa1071f173944b2af</anchor>
      <arglist>(GlobalAddress&lt; GlobalBag &gt; self, size_t n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GlobalBag</name>
      <anchorfile>class_grappa_1_1_global_bag.html</anchorfile>
      <anchor>a15028fa3c5b00fb8e86da9d635dbdcd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>class_grappa_1_1_global_bag.html</anchorfile>
      <anchor>a928e566c05968fe2976f3b51844aa6d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>class_grappa_1_1_global_bag.html</anchorfile>
      <anchor>a69464677bb0813408ed69d57a2901a0d</anchor>
      <arglist>(const T &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>class_grappa_1_1_global_bag.html</anchorfile>
      <anchor>a7c4069a657b779cfaf5a0d01ea846f84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>local_size</name>
      <anchorfile>class_grappa_1_1_global_bag.html</anchorfile>
      <anchor>a1fae11bace40adb87fde7b5031c0249f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>class_grappa_1_1_global_bag.html</anchorfile>
      <anchor>a545fd56d600220696d68096fe55dfaf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>class_grappa_1_1_global_bag.html</anchorfile>
      <anchor>a4f85b8c43ad9caf63492937786f22352</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress&lt; GlobalBag &gt;</type>
      <name>create</name>
      <anchorfile>class_grappa_1_1_global_bag.html</anchorfile>
      <anchor>a73c39c4b01c6c5acf398e7bb9db46e4f</anchor>
      <arglist>(size_t total_capacity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::GlobalCompletionEvent</name>
    <filename>class_grappa_1_1_global_completion_event.html</filename>
    <base>Grappa::CompletionEvent</base>
    <member kind="function">
      <type>int64_t</type>
      <name>incomplete</name>
      <anchorfile>class_grappa_1_1_global_completion_event.html</anchorfile>
      <anchor>a5914d1a940c04b5ec49b6d006831e561</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_completion</name>
      <anchorfile>class_grappa_1_1_global_completion_event.html</anchorfile>
      <anchor>abdb75a4a41c11679184a26236c1b12d5</anchor>
      <arglist>(Core owner, int64_t dec=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalCompletionEvent</name>
      <anchorfile>class_grappa_1_1_global_completion_event.html</anchorfile>
      <anchor>a922786631f9873016a7aeb455ae9bb51</anchor>
      <arglist>(bool user_track=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GlobalCompletionEvent</name>
      <anchorfile>class_grappa_1_1_global_completion_event.html</anchorfile>
      <anchor>adc7497c912d9281d6a4e3fa93aacd9d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_shared_ptr</name>
      <anchorfile>class_grappa_1_1_global_completion_event.html</anchorfile>
      <anchor>a129292dc2cec64a09ffbaf878ab00ce9</anchor>
      <arglist>(const void *p)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>get_shared_ptr</name>
      <anchorfile>class_grappa_1_1_global_completion_event.html</anchorfile>
      <anchor>a37698c3dcd0b8ab99e0529a66b488242</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_grappa_1_1_global_completion_event.html</anchorfile>
      <anchor>a3349271e1290a48e45bd4dfd69313d7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CompletionTarget</type>
      <name>enroll</name>
      <anchorfile>class_grappa_1_1_global_completion_event.html</anchorfile>
      <anchor>a000132a97fae1e1f1fe226d531e132f4</anchor>
      <arglist>(int64_t inc=1)</arglist>
    </member>
    <member kind="function">
      <type>CompletionTarget</type>
      <name>enroll_recurring</name>
      <anchorfile>class_grappa_1_1_global_completion_event.html</anchorfile>
      <anchor>a07dc5dbdacf1a5552e47f1064979a983</anchor>
      <arglist>(int64_t inc=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complete</name>
      <anchorfile>class_grappa_1_1_global_completion_event.html</anchorfile>
      <anchor>a02ca02652c49c2a7d91d0493ce58501e</anchor>
      <arglist>(int64_t dec=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complete</name>
      <anchorfile>class_grappa_1_1_global_completion_event.html</anchorfile>
      <anchor>a6fd52e65adcfa02f9649562c412f772a</anchor>
      <arglist>(CompletionTarget ct, int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complete</name>
      <anchorfile>class_grappa_1_1_global_completion_event.html</anchorfile>
      <anchor>a800c42eab24b4105f0d4c74915b72742</anchor>
      <arglist>(GlobalAddress&lt; GlobalCompletionEvent &gt; ce, int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>class_grappa_1_1_global_completion_event.html</anchorfile>
      <anchor>a4964d2a9aa8bffdfa2f242ba100e67f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; GlobalCompletionEvent * &gt;</type>
      <name>get_user_tracked</name>
      <anchorfile>class_grappa_1_1_global_completion_event.html</anchorfile>
      <anchor>aaeef02efe0718468bce4a5cd674a4b9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Core</type>
      <name>master_core</name>
      <anchorfile>class_grappa_1_1_global_completion_event.html</anchorfile>
      <anchor>ab11d01a55bcb381c517c51ff8f609e7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::GlobalCounter</name>
    <filename>class_grappa_1_1_global_counter.html</filename>
    <class kind="struct">Grappa::GlobalCounter::Master</class>
    <class kind="struct">Grappa::GlobalCounter::Proxy</class>
    <member kind="function">
      <type></type>
      <name>GlobalCounter</name>
      <anchorfile>class_grappa_1_1_global_counter.html</anchorfile>
      <anchor>a35aa24fe74b47efe3f55b16e84a6630e</anchor>
      <arglist>(GlobalAddress&lt; GlobalCounter &gt; self, long initial_count=0, Core master_core=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incr</name>
      <anchorfile>class_grappa_1_1_global_counter.html</anchorfile>
      <anchor>acfed4a9371ccd959a53100d0d336c2fb</anchor>
      <arglist>(long d=1)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>count</name>
      <anchorfile>class_grappa_1_1_global_counter.html</anchorfile>
      <anchor>afee9d45cfc2ec871f8bb48ba6987faf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>class_grappa_1_1_global_counter.html</anchorfile>
      <anchor>a4d88933db9310614e7d795c499381fb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress&lt; GlobalCounter &gt;</type>
      <name>create</name>
      <anchorfile>class_grappa_1_1_global_counter.html</anchorfile>
      <anchor>a3eba368e936317004abb24895dc16b54</anchor>
      <arglist>(long initial_count=0)</arglist>
    </member>
    <member kind="variable">
      <type>struct Grappa::GlobalCounter::Master</type>
      <name>master</name>
      <anchorfile>class_grappa_1_1_global_counter.html</anchorfile>
      <anchor>af2a4ad5cbb3f2dcdfdce70cfd5cb55d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalAddress&lt; GlobalCounter &gt;</type>
      <name>self</name>
      <anchorfile>class_grappa_1_1_global_counter.html</anchorfile>
      <anchor>a8ffa04b926f45c0ae926cd2cc6d61322</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FlatCombiner&lt; Proxy &gt;</type>
      <name>comb</name>
      <anchorfile>class_grappa_1_1_global_counter.html</anchorfile>
      <anchor>af550f26274af57c6db2fd55881f05ada</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::GlobalHashMap</name>
    <filename>class_grappa_1_1_global_hash_map.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Grappa::GlobalHashMap::Cell</class>
    <class kind="struct">Grappa::GlobalHashMap::Entry</class>
    <class kind="struct">Grappa::GlobalHashMap::Proxy</class>
    <class kind="struct">Grappa::GlobalHashMap::ResultEntry</class>
    <member kind="function">
      <type>uint64_t</type>
      <name>computeIndex</name>
      <anchorfile>class_grappa_1_1_global_hash_map.html</anchorfile>
      <anchor>a2c90ee363b30017092e231b3c5a40023</anchor>
      <arglist>(K key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalHashMap</name>
      <anchorfile>class_grappa_1_1_global_hash_map.html</anchorfile>
      <anchor>a80b0f9a5e7441b2b1dcabcdbe0019a80</anchor>
      <arglist>(GlobalAddress&lt; GlobalHashMap &gt; self, GlobalAddress&lt; Cell &gt; base, size_t capacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalHashMap</name>
      <anchorfile>class_grappa_1_1_global_hash_map.html</anchorfile>
      <anchor>af9c2981b0a4c50e542a771ea6420a8fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Cell &gt;</type>
      <name>begin</name>
      <anchorfile>class_grappa_1_1_global_hash_map.html</anchorfile>
      <anchor>ae8c66ac2cf88986196eab69fd5c33da0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>ncells</name>
      <anchorfile>class_grappa_1_1_global_hash_map.html</anchorfile>
      <anchor>aa1c7ae89deee20362715377975ce30bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>class_grappa_1_1_global_hash_map.html</anchorfile>
      <anchor>a8dfd5791d556041220025ea7a1dfefda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>class_grappa_1_1_global_hash_map.html</anchorfile>
      <anchor>ad67eea5a15ee8ba3977de3f19981257f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forall_entries</name>
      <anchorfile>class_grappa_1_1_global_hash_map.html</anchorfile>
      <anchor>ac5daea338522f79eb3af301c7ea1b390</anchor>
      <arglist>(F visit)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lookup</name>
      <anchorfile>class_grappa_1_1_global_hash_map.html</anchorfile>
      <anchor>a95767f38a96c80313bb085dbd4ad55a2</anchor>
      <arglist>(K key, V *val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>class_grappa_1_1_global_hash_map.html</anchorfile>
      <anchor>a5d790c9e26b3d18e0ae6355dab69c7fc</anchor>
      <arglist>(K key, V val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress&lt; GlobalHashMap &gt;</type>
      <name>create</name>
      <anchorfile>class_grappa_1_1_global_hash_map.html</anchorfile>
      <anchor>aa5ba6d0d491f1c3488197c8717b94671</anchor>
      <arglist>(size_t total_capacity)</arglist>
    </member>
    <member kind="variable">
      <type>struct Grappa::GlobalHashMap::Cell</type>
      <name>GRAPPA_BLOCK_ALIGNED</name>
      <anchorfile>class_grappa_1_1_global_hash_map.html</anchorfile>
      <anchor>a59f0d0f4a6f6877ded4203db06a4f52c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalAddress&lt; GlobalHashMap &gt;</type>
      <name>self</name>
      <anchorfile>class_grappa_1_1_global_hash_map.html</anchorfile>
      <anchor>aa0b80528a8d87994b72cfe222b9ecf23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalAddress&lt; Cell &gt;</type>
      <name>base</name>
      <anchorfile>class_grappa_1_1_global_hash_map.html</anchorfile>
      <anchor>aee4e29c7736eb80be4fa746fc9554720</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>capacity</name>
      <anchorfile>class_grappa_1_1_global_hash_map.html</anchorfile>
      <anchor>a788555ad0e2ace6baeb6217261911bf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FlatCombiner&lt; Proxy &gt;</type>
      <name>proxy</name>
      <anchorfile>class_grappa_1_1_global_hash_map.html</anchorfile>
      <anchor>afa1dc0c0a40aee17f6652306161a5b97</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::GlobalHashSet</name>
    <filename>class_grappa_1_1_global_hash_set.html</filename>
    <templarg></templarg>
    <class kind="struct">Grappa::GlobalHashSet::Cell</class>
    <class kind="struct">Grappa::GlobalHashSet::Entry</class>
    <class kind="struct">Grappa::GlobalHashSet::Proxy</class>
    <class kind="struct">Grappa::GlobalHashSet::ResultEntry</class>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>class_grappa_1_1_global_hash_set.html</anchorfile>
      <anchor>a198e00363786aa407e64e65289457d31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lookup</name>
      <anchorfile>class_grappa_1_1_global_hash_set.html</anchorfile>
      <anchor>a7a8e069a42099aaf7863b6dbb3f40e57</anchor>
      <arglist>(K key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>class_grappa_1_1_global_hash_set.html</anchorfile>
      <anchor>af3f019b47a8fdbfc29d38f8c170546a8</anchor>
      <arglist>(K key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert_async</name>
      <anchorfile>class_grappa_1_1_global_hash_set.html</anchorfile>
      <anchor>ad5bd003184d8590d1bdd84c8d4d5c162</anchor>
      <arglist>(K key, F sync)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync_all_cores</name>
      <anchorfile>class_grappa_1_1_global_hash_set.html</anchorfile>
      <anchor>a6b387e2d8374e3b435268cda5ee4d355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forall_keys</name>
      <anchorfile>class_grappa_1_1_global_hash_set.html</anchorfile>
      <anchor>ab2d71cd824ae2d4919c8d4137b6ab513</anchor>
      <arglist>(F visit)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>class_grappa_1_1_global_hash_set.html</anchorfile>
      <anchor>a93fa3e349cc9be68c24549f1324d3fff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress&lt; GlobalHashSet &gt;</type>
      <name>create</name>
      <anchorfile>class_grappa_1_1_global_hash_set.html</anchorfile>
      <anchor>ad28da043eba96ad75a74ce3d8acb1e28</anchor>
      <arglist>(size_t total_capacity)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint64_t</type>
      <name>computeIndex</name>
      <anchorfile>class_grappa_1_1_global_hash_set.html</anchorfile>
      <anchor>a142b9d64e3b4eab1f2d68ccaa600e706</anchor>
      <arglist>(K key)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GlobalHashSet</name>
      <anchorfile>class_grappa_1_1_global_hash_set.html</anchorfile>
      <anchor>a350a24e777886b54e3f5879dfbac800a</anchor>
      <arglist>(GlobalAddress&lt; GlobalHashSet &gt; self, GlobalAddress&lt; Cell &gt; base, size_t capacity)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>struct Grappa::GlobalHashSet::Cell</type>
      <name>GRAPPA_BLOCK_ALIGNED</name>
      <anchorfile>class_grappa_1_1_global_hash_set.html</anchorfile>
      <anchor>afe9fcb164ef6fa4e54620ec252afdfc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalAddress&lt; GlobalHashSet &gt;</type>
      <name>self</name>
      <anchorfile>class_grappa_1_1_global_hash_set.html</anchorfile>
      <anchor>a2bd31cd1f63b42c47ca1e8bd20c51376</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalAddress&lt; Cell &gt;</type>
      <name>base</name>
      <anchorfile>class_grappa_1_1_global_hash_set.html</anchorfile>
      <anchor>a33628d4eb0e1473de956a5f03c30934a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>capacity</name>
      <anchorfile>class_grappa_1_1_global_hash_set.html</anchorfile>
      <anchor>a4da7b86ddfcf01a3d0b08d0f7664b1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>count</name>
      <anchorfile>class_grappa_1_1_global_hash_set.html</anchorfile>
      <anchor>aff869c0824f63bb38499482d07bf1f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FlatCombiner&lt; Proxy &gt;</type>
      <name>proxy</name>
      <anchorfile>class_grappa_1_1_global_hash_set.html</anchorfile>
      <anchor>aa52cdab023f30c7777ec6470116db4f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalMemory</name>
    <filename>class_global_memory.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalMemory</name>
      <anchorfile>class_global_memory.html</anchorfile>
      <anchor>a22325c7df903a0383184b0648b58f957</anchor>
      <arglist>(size_t total_size_bytes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GlobalMemoryChunk</name>
    <filename>class_global_memory_chunk.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalMemoryChunk</name>
      <anchorfile>class_global_memory_chunk.html</anchorfile>
      <anchor>acfdc1d8beb6d58b6053e158dcfde0bac</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GlobalMemoryChunk</name>
      <anchorfile>class_global_memory_chunk.html</anchorfile>
      <anchor>a3bd1529d3cd753de2e6aa26643b64b8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>local_pointer</name>
      <anchorfile>class_global_memory_chunk.html</anchorfile>
      <anchor>a2d7872c8e5e924901d15ce91961d243a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; void &gt;</type>
      <name>global_pointer</name>
      <anchorfile>class_global_memory_chunk.html</anchorfile>
      <anchor>a0d5611e0a8fb7a957459f3abf79a57c3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::Metrics::GlobalQueueMetrics</name>
    <filename>class_grappa_1_1_metrics_1_1_global_queue_metrics.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalQueueMetrics</name>
      <anchorfile>class_grappa_1_1_metrics_1_1_global_queue_metrics.html</anchorfile>
      <anchor>a32f879996197012795cefa91a6bb2ac8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_grappa_1_1_metrics_1_1_global_queue_metrics.html</anchorfile>
      <anchor>a72971b24c6d7d0f64a06630688d082bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>class_grappa_1_1_metrics_1_1_global_queue_metrics.html</anchorfile>
      <anchor>ad1e32e9120658c746c817a311865aa5f</anchor>
      <arglist>(std::ostream &amp;o, const char *terminator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>class_grappa_1_1_metrics_1_1_global_queue_metrics.html</anchorfile>
      <anchor>a37553f46b839358a09eac0a708ba0cd3</anchor>
      <arglist>(const GlobalQueueMetrics *other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>profiling_sample</name>
      <anchorfile>class_grappa_1_1_metrics_1_1_global_queue_metrics.html</anchorfile>
      <anchor>a49884c71794b8b3737c4e3200aa2e504</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record_push_reserve_request</name>
      <anchorfile>class_grappa_1_1_metrics_1_1_global_queue_metrics.html</anchorfile>
      <anchor>a6483a43413eee2f5a314f23e3622526b</anchor>
      <arglist>(size_t msg_bytes, bool accepted)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record_push_entry_request</name>
      <anchorfile>class_grappa_1_1_metrics_1_1_global_queue_metrics.html</anchorfile>
      <anchor>a46b8b7cdc4f0dfc9857a367cdd3728f6</anchor>
      <arglist>(size_t msg_bytes, bool had_consumer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record_pull_reserve_request</name>
      <anchorfile>class_grappa_1_1_metrics_1_1_global_queue_metrics.html</anchorfile>
      <anchor>a57a5dce88665efe8ad083c2c9c8a5820</anchor>
      <arglist>(size_t msg_bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record_pull_entry_request</name>
      <anchorfile>class_grappa_1_1_metrics_1_1_global_queue_metrics.html</anchorfile>
      <anchor>a464a2395c94b47402af1983ea69e02e5</anchor>
      <arglist>(size_t msg_bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record_push_reserve_reply</name>
      <anchorfile>class_grappa_1_1_metrics_1_1_global_queue_metrics.html</anchorfile>
      <anchor>ae2b03f50d16f42b2b502b070b798ae85</anchor>
      <arglist>(size_t msg_bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record_pull_reserve_reply</name>
      <anchorfile>class_grappa_1_1_metrics_1_1_global_queue_metrics.html</anchorfile>
      <anchor>a81cae3a3d297e65741565273cf321bec</anchor>
      <arglist>(size_t msg_bytes, bool consumer_waited)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>record_pull_entry_reply</name>
      <anchorfile>class_grappa_1_1_metrics_1_1_global_queue_metrics.html</anchorfile>
      <anchor>a6b0a766c165adadbf5c191e30619d56b</anchor>
      <arglist>(size_t msg_bytes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::GlobalVector</name>
    <filename>class_grappa_1_1_global_vector.html</filename>
    <templarg></templarg>
    <templarg>BUFFER_CAPACITY</templarg>
    <class kind="struct">Grappa::GlobalVector::Master</class>
    <class kind="struct">Grappa::GlobalVector::Proxy</class>
    <class kind="struct">Grappa::GlobalVector::Range</class>
    <member kind="function">
      <type>void</type>
      <name>incr_with_wrap</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>aefe9910c2385c9bd76249feaf9691f86</anchor>
      <arglist>(size_t *i, long incr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cache_with_wraparound</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>a755e9b7244b0eeabdca42c4500831a88</anchor>
      <arglist>(size_t start, size_t nelem, T *buffer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalVector</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>a033c80a3ddeee2fee141d2cf28d00c4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalVector</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>a8bab292481f016053bf1e6080ab97512</anchor>
      <arglist>(GlobalAddress&lt; GlobalVector &gt; self, GlobalAddress&lt; T &gt; storage_base, size_t total_capacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GlobalVector</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>a61bc2a0e94ce0d3340340f3238ca4e46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>accc02a7728dc9a8bd05855c4856433ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>a7ab82b69b9c84aaf737e9db47ce1d5a1</anchor>
      <arglist>(const T &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>pop</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>ad32ca01780df8dd4cd7e342238ad5f8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enqueue</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>a528b5f438474d2c1c3eea793170ec157</anchor>
      <arglist>(const T &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dequeue</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>a94f87e12a92125626adf7639bc30706f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>a7a963d18514c631cd7d82e02b665ac55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>af60700af8417d28fc9e45158de18b354</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>begin</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>a1d1c7e0bef5071015bef4708a7186fbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>end</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>ab59c2e46088bc8b70ecff2eadbb8381a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>a87797d63927d41144631fd462e8d33a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>storage</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>aa3bc240f854458b16015235801ee7c55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>getMasterRange</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>ae0e053d72ba55e26400a99e8c15a0e71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress&lt; GlobalVector &gt;</type>
      <name>create</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>a8ed02e8f029c4b5a3dcc47e1d3043ebf</anchor>
      <arglist>(size_t total_capacity)</arglist>
    </member>
    <member kind="variable">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>base</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>a68f4581cab37aa6d9f7f5912a10fd0e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>capacity</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>a95693ab2ed2aad5a021fce9316bd2de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GlobalAddress&lt; GlobalVector &gt;</type>
      <name>self</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>a1cf0ba25521bc061bb48e950238631d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Master</type>
      <name>master</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>a82511fbd9ce2e0cb52fe28fce4f07f9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FlatCombiner&lt; Proxy &gt;</type>
      <name>proxy</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>abd5dbed20fe41919760fb63d7a97ffc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>forall</name>
      <anchorfile>class_grappa_1_1_global_vector.html</anchorfile>
      <anchor>a7afaffbc9842dab1a03cc5da8dbe9286</anchor>
      <arglist>(GlobalAddress&lt; GlobalVector &gt; self, F func)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::Graph</name>
    <filename>struct_grappa_1_1_graph.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Grappa::Graph::Edge</class>
    <member kind="typedef">
      <type>impl::Vertex&lt; V, E &gt;</type>
      <name>Vertex</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>ae0e2ac60c51070bf4ab477130a24b7bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>E</type>
      <name>EdgeState</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>a39952012b49e9a29b662a233b773a50c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Graph</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>a01b9c202ab6fcc0cae6e11f6046ba22a</anchor>
      <arglist>(GlobalAddress&lt; Graph &gt; self, GlobalAddress&lt; Vertex &gt; vs, int64_t nv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Graph</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>abb57eaf2fdaf6d322b35b08e963a0279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>a05302be9eb7fa42bf4d14464c7721262</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>a5927685c798385ad04eccb56a3c12e09</anchor>
      <arglist>(F print_vertex)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; Graph&lt; VV, E &gt; &gt;</type>
      <name>transform</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>aeada4c84a436b7ec8b7daadd3349ce6c</anchor>
      <arglist>(F f)</arglist>
    </member>
    <member kind="function">
      <type>VertexID</type>
      <name>id</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>abdf4b7675f580f5cbbd97feaafcf4695</anchor>
      <arglist>(Vertex &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Edge</type>
      <name>edge</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>a33076d097887ea13351fcc6ba8a98438</anchor>
      <arglist>(Vertex &amp;v, size_t i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dump</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>a0860068c2e4387b0cece4607ad7b7e16</anchor>
      <arglist>(GlobalAddress&lt; Graph &gt; g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress&lt; Graph &gt;</type>
      <name>create</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>ga6c22cb15edc0d527a4b7c08e235b6aff</anchor>
      <arglist>(const TupleGraph &amp;tg, bool directed=false, bool solo_invalid=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress&lt; Graph &gt;</type>
      <name>Undirected</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>a36d2e809961c4a781fc0aa1658eed7a0</anchor>
      <arglist>(const TupleGraph &amp;tg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress&lt; Graph &gt;</type>
      <name>Directed</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>ab37d89e98c1ca8399c9ef412d1c1d43c</anchor>
      <arglist>(const TupleGraph &amp;tg)</arglist>
    </member>
    <member kind="variable">
      <type>GlobalAddress&lt; Vertex &gt;</type>
      <name>vs</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>ab010631af55d0fc1288d57357cc5e4d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>nv</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>a5f87d31b4d109856611db44bc0729f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>nadj</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>a96374cd4147b261b800d58ddf94dafd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>nadj_local</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>ae1935f5ad9bd4313027e0d274a75e946</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VertexID *</type>
      <name>adj_buf</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>a7ed1985b0e659717335558452e061d7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EdgeState *</type>
      <name>edge_storage</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>aa9165887f1962f5af5782793e7a43579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>scratch</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>a9c91b7a947644522e625c1ef4e7fec00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalAddress&lt; Graph &gt;</type>
      <name>self</name>
      <anchorfile>struct_grappa_1_1_graph.html</anchorfile>
      <anchor>a85b7f8cabe9bcae2f98cc267d52b63a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::HistogramMetric</name>
    <filename>class_grappa_1_1_histogram_metric.html</filename>
    <member kind="function">
      <type></type>
      <name>HistogramMetric</name>
      <anchorfile>class_grappa_1_1_histogram_metric.html</anchorfile>
      <anchor>ab06b994279d1b126d12568dbaa2d918d</anchor>
      <arglist>(const char *name, int64_t nil_value, bool reg_new=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>json</name>
      <anchorfile>class_grappa_1_1_histogram_metric.html</anchorfile>
      <anchor>ad198b8a7582fc108d84fa2f06779a057</anchor>
      <arglist>(std::ostream &amp;o) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>class_grappa_1_1_histogram_metric.html</anchorfile>
      <anchor>a1a1ebc09b891b0088d8dd0cdcf4ca0ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>class_grappa_1_1_histogram_metric.html</anchorfile>
      <anchor>a95333a74b9491f0034ff2179825002a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HistogramMetric *</type>
      <name>clone</name>
      <anchorfile>class_grappa_1_1_histogram_metric.html</anchorfile>
      <anchor>a5f6ffc17fcfa78ff5857ab6b10c6d512</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge_all</name>
      <anchorfile>class_grappa_1_1_histogram_metric.html</anchorfile>
      <anchor>a2b7afd74be466f6fcf3581fce291bfb2</anchor>
      <arglist>(impl::MetricBase *static_stat_ptr)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>value</name>
      <anchorfile>class_grappa_1_1_histogram_metric.html</anchorfile>
      <anchor>a08e46fd09144660e98dfe2e5c6cc9eae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>class_grappa_1_1_histogram_metric.html</anchorfile>
      <anchor>a7ed5399f262ec253195c9f8c3289e3e2</anchor>
      <arglist>(const int64_t &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int64_t</name>
      <anchorfile>class_grappa_1_1_histogram_metric.html</anchorfile>
      <anchor>a44d253a163513590a68fb9a1465c6de3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HistogramMetric &amp;</type>
      <name>operator=</name>
      <anchorfile>class_grappa_1_1_histogram_metric.html</anchorfile>
      <anchor>af0a4772d05c4d150ca1916260dd9418b</anchor>
      <arglist>(int64_t value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int64_t</type>
      <name>nil_value</name>
      <anchorfile>class_grappa_1_1_histogram_metric.html</anchorfile>
      <anchor>ad6e56c7b3966d4aeaf962d03f25126a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int64_t</type>
      <name>value_</name>
      <anchorfile>class_grappa_1_1_histogram_metric.html</anchorfile>
      <anchor>a454588570dff1447a5d0d6881be50255</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>log_initialized</name>
      <anchorfile>class_grappa_1_1_histogram_metric.html</anchorfile>
      <anchor>ae4791b8709ad9377d37f74debe337b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ofstream</type>
      <name>log</name>
      <anchorfile>class_grappa_1_1_histogram_metric.html</anchorfile>
      <anchor>ab8b35f798e06d680d0940c7d2afb0cc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IAMetrics</name>
    <filename>class_i_a_metrics.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>count_acquire_ams</name>
      <anchorfile>class_i_a_metrics.html</anchorfile>
      <anchor>ad9e2b60d7f18d4caa75a72186e93588b</anchor>
      <arglist>(uint64_t bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>record_wakeup_latency</name>
      <anchorfile>class_i_a_metrics.html</anchorfile>
      <anchor>a86e9d8bb2b5fa5ed6129d550081252fe</anchor>
      <arglist>(int64_t start_time, int64_t network_time)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>record_network_latency</name>
      <anchorfile>class_i_a_metrics.html</anchorfile>
      <anchor>a63997405126957bd7fdf1f2368ffe85d</anchor>
      <arglist>(int64_t start_time)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Incoherent</name>
    <filename>struct_incoherent.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>CacheRO&lt; T, CacheAllocator, IncoherentAcquirer, NullReleaser &gt;</type>
      <name>RO</name>
      <anchorfile>struct_incoherent.html</anchorfile>
      <anchor>a7bfd10056a26b7e787cbf023c2c3e61a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CacheRW&lt; T, CacheAllocator, IncoherentAcquirer, IncoherentReleaser &gt;</type>
      <name>RW</name>
      <anchorfile>struct_incoherent.html</anchorfile>
      <anchor>afc83e8059b541a93f0243c4126798d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CacheWO&lt; T, CacheAllocator, NullAcquirer, IncoherentReleaser &gt;</type>
      <name>WO</name>
      <anchorfile>struct_incoherent.html</anchorfile>
      <anchor>aad0fb0b9eeb9ee4180f756939c31b6fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IncoherentAcquirer</name>
    <filename>class_incoherent_acquirer.html</filename>
    <templarg></templarg>
    <class kind="struct">IncoherentAcquirer::RequestArgs</class>
    <member kind="function">
      <type></type>
      <name>IncoherentAcquirer</name>
      <anchorfile>class_incoherent_acquirer.html</anchorfile>
      <anchor>a9864dc6ba9fe227ef5093f1e68a48135</anchor>
      <arglist>(GlobalAddress&lt; T &gt; *request_address, size_t *count, T **pointer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_incoherent_acquirer.html</anchorfile>
      <anchor>a14f0dd9672ee4ffb6ee074eda1314fe3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_acquire</name>
      <anchorfile>class_incoherent_acquirer.html</anchorfile>
      <anchor>a892a0a0d72a1659dd786dbd806740e20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_acquire</name>
      <anchorfile>class_incoherent_acquirer.html</anchorfile>
      <anchor>a2174631b0e783cbe7ecb6f91359ede00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>block_until_acquired</name>
      <anchorfile>class_incoherent_acquirer.html</anchorfile>
      <anchor>ae8ba943229ade0ea512aa5d4fe93783a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire_reply</name>
      <anchorfile>class_incoherent_acquirer.html</anchorfile>
      <anchor>a405c62a5488a6fff4ec835ef235feed9</anchor>
      <arglist>(size_t offset, void *payload, size_t payload_size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>acquired</name>
      <anchorfile>class_incoherent_acquirer.html</anchorfile>
      <anchor>ab81ef38ae64a380c5e67c2c1a33bbd46</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IncoherentReleaser</name>
    <filename>class_incoherent_releaser.html</filename>
    <templarg></templarg>
    <class kind="struct">IncoherentReleaser::RequestArgs</class>
    <member kind="function">
      <type></type>
      <name>IncoherentReleaser</name>
      <anchorfile>class_incoherent_releaser.html</anchorfile>
      <anchor>aafaafee99b9c27b0fa77683142fab81e</anchor>
      <arglist>(GlobalAddress&lt; T &gt; *request_address, size_t *count, T **pointer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_incoherent_releaser.html</anchorfile>
      <anchor>af605600243eb70b76b24f468bd3514b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_release</name>
      <anchorfile>class_incoherent_releaser.html</anchorfile>
      <anchor>af0867108e3a5fecaf136f1ce56842621</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_release</name>
      <anchorfile>class_incoherent_releaser.html</anchorfile>
      <anchor>a128e746541bd010bc787d60b81db30dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>block_until_released</name>
      <anchorfile>class_incoherent_releaser.html</anchorfile>
      <anchor>ade134658007c29406d8484927e022f3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release_reply</name>
      <anchorfile>class_incoherent_releaser.html</anchorfile>
      <anchor>abbd572bd4452088b3502cb918e3e6f61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>released</name>
      <anchorfile>class_incoherent_releaser.html</anchorfile>
      <anchor>a1f38f410f774d63983f86efd42718d36</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Int32Edge</name>
    <filename>struct_int32_edge.html</filename>
    <member kind="variable">
      <type>int32_t</type>
      <name>v0</name>
      <anchorfile>struct_int32_edge.html</anchorfile>
      <anchor>a64bcf39da70a5d206dd57e02ac34d5d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>v1</name>
      <anchorfile>struct_int32_edge.html</anchorfile>
      <anchor>a0ef4466b1a0610313776e422a7810bef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::IODescriptor</name>
    <filename>struct_grappa_1_1_i_o_descriptor.html</filename>
    <member kind="function">
      <type></type>
      <name>IODescriptor</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga658e5f65d2c0c6cf93b59698b70f9ba0</anchor>
      <arglist>(int file_desc=0, size_t file_offset=0, void *buffer=NULL, size_t bufsize=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>file</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga002cf51a7ce5e8b8c6d1be90ade2d1ae</anchor>
      <arglist>(int file_desc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buf</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga48287e795699dad6d86e88e61480f84a</anchor>
      <arglist>(void *buf, size_t nbytes)</arglist>
    </member>
    <member kind="function">
      <type>volatile void *</type>
      <name>buf</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga03d43615d55e690125fa36583e5877f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nbytes</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga3075a96f173e9c3357201a3632a2b73d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nelems</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gade197b5f8e1feccd1dd7b58430c292eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>offset</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga01acc94b9212dccc9ff78ef88dd21bb9</anchor>
      <arglist>(size_t of)</arglist>
    </member>
    <member kind="function">
      <type>struct aiocb *</type>
      <name>desc_ptr</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga4a1063db87f48acce1c8fc312ca7a1b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>block_on_read</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga9b6f6c3491b93f30fe982e92725b3c48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle_completion</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga6e6849d621c8c5eed455745b260a5cfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>complete</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gab13d007365f73179e1dc438cef07ebe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConditionVariable</type>
      <name>cv</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga5663d091d037d1c15dfbcb8353e11bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct aiocb</type>
      <name>ac</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga6f655b8428c094abf7f91d73200fb9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IODescriptor *</type>
      <name>nextCompleted</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga2b91048b8777242ab44ab894d3fae094</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IRMetrics</name>
    <filename>class_i_r_metrics.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>count_release_ams</name>
      <anchorfile>class_i_r_metrics.html</anchorfile>
      <anchor>a04cdef4d12eafa6f76d245403307452f</anchor>
      <arglist>(uint64_t bytes)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SmallLocalSet::iterator</name>
    <filename>struct_small_local_set_1_1iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>iterator</name>
      <anchorfile>struct_small_local_set_1_1iterator.html</anchorfile>
      <anchor>ad85f62c47898b9c84fce7c110c91109d</anchor>
      <arglist>(typename OverflowSet::iterator it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>iterator</name>
      <anchorfile>struct_small_local_set_1_1iterator.html</anchorfile>
      <anchor>a5b2cc7510a13af13c138b5439a28230b</anchor>
      <arglist>(const T *ptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>struct_small_local_set_1_1iterator.html</anchorfile>
      <anchor>a9e1b1f1f389c55f8ceeec2376f80cc61</anchor>
      <arglist>(const iterator &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>struct_small_local_set_1_1iterator.html</anchorfile>
      <anchor>a21cc0d87478434bbd7362665d385cb01</anchor>
      <arglist>(const iterator &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>struct_small_local_set_1_1iterator.html</anchorfile>
      <anchor>a58129e19fcf9f023950b96551ee1abd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>struct_small_local_set_1_1iterator.html</anchorfile>
      <anchor>a7b37481f64d761c119631088991f8e69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>OverflowSet::iterator</type>
      <name>it</name>
      <anchorfile>struct_small_local_set_1_1iterator.html</anchorfile>
      <anchor>aa59b276fce4e26d5583ce5bfdcc24ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const T *</type>
      <name>ptr</name>
      <anchorfile>struct_small_local_set_1_1iterator.html</anchorfile>
      <anchor>a982126561d8166225d834984fe5f2e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>overflow</name>
      <anchorfile>struct_small_local_set_1_1iterator.html</anchorfile>
      <anchor>ad6e23a2190183c41b6621a6f0a0948df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LocalIterator</name>
    <filename>struct_local_iterator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>T *</type>
      <name>begin</name>
      <anchorfile>struct_local_iterator.html</anchorfile>
      <anchor>ab6138b78bf6a2be4f8274e3bc7ac13bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>end</name>
      <anchorfile>struct_local_iterator.html</anchorfile>
      <anchor>ae8b5c1850d5a902f31f6e9e47ce6ce72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>struct_local_iterator.html</anchorfile>
      <anchor>af7133e8af739291d109e0776355935dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>base</name>
      <anchorfile>struct_local_iterator.html</anchorfile>
      <anchor>a336d98b15a5757028566a45e578217d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>nelem</name>
      <anchorfile>struct_local_iterator.html</anchorfile>
      <anchor>aa2ffc6cf8d82309583f5015bdd73fadb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LRQueue</name>
    <filename>class_l_r_queue.html</filename>
    <member kind="function">
      <type></type>
      <name>LRQueue</name>
      <anchorfile>class_l_r_queue.html</anchorfile>
      <anchor>a37cb7c457de53de8d636f452b6b913a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LRQueue</name>
      <anchorfile>class_l_r_queue.html</anchorfile>
      <anchor>a37aea09db2ea76fcb14d6cf939a6fb4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>class_l_r_queue.html</anchorfile>
      <anchor>aeb54ef8b86d60f75ed00171e69c042dc</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_or_insert</name>
      <anchorfile>class_l_r_queue.html</anchorfile>
      <anchor>ab039681acb6f98daa12212e49ebc3ea6</anchor>
      <arglist>(int key, uint64_t priority)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>top_key</name>
      <anchorfile>class_l_r_queue.html</anchorfile>
      <anchor>a60f79107eaae21cddd0c77b1bd37e3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>top_priority</name>
      <anchorfile>class_l_r_queue.html</anchorfile>
      <anchor>afc63f65a7bbadec8738c4fb788518aba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_key</name>
      <anchorfile>class_l_r_queue.html</anchorfile>
      <anchor>a9808bb2a041d190c8403c694b7174757</anchor>
      <arglist>(int key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>class_l_r_queue.html</anchorfile>
      <anchor>a3e7d22111cc659f5fa58f225581dbb71</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::GlobalCounter::Master</name>
    <filename>struct_grappa_1_1_global_counter_1_1_master.html</filename>
    <member kind="variable">
      <type>long</type>
      <name>count</name>
      <anchorfile>struct_grappa_1_1_global_counter_1_1_master.html</anchorfile>
      <anchor>a77517c7db3b578fcdb9d06887ad82b40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Core</type>
      <name>core</name>
      <anchorfile>struct_grappa_1_1_global_counter_1_1_master.html</anchorfile>
      <anchor>a9ae3b4a26e18df22b08f3869db87e0d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::GlobalVector::Master</name>
    <filename>struct_grappa_1_1_global_vector_1_1_master.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>has_requests</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_master.html</anchorfile>
      <anchor>a7887b51a4f1720173c59abda50f06194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_master.html</anchorfile>
      <anchor>a0b6a23ada78a4dfe7f092bd6a5a1448e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Master</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_master.html</anchorfile>
      <anchor>ad67030e0909a3ad26f07f4cc0062646c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Master</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_master.html</anchorfile>
      <anchor>a3205e759dd2669ac21844b665fc7547d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>master_combine</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_master.html</anchorfile>
      <anchor>a2aa23a266d863b96ae8b03d2f54999fe</anchor>
      <arglist>(GlobalAddress&lt; GlobalVector &gt; self)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>request</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_master.html</anchorfile>
      <anchor>a7536c55f7ef9d2718746cfc5b9eb482d</anchor>
      <arglist>(GlobalAddress&lt; GlobalVector &gt; self, Q yield_q, F func) -&gt; decltype(func())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>push</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_master.html</anchorfile>
      <anchor>ace51c0bf45c59251355b0b29ca42c54b</anchor>
      <arglist>(GlobalAddress&lt; GlobalVector &gt; self, T *buffer, int64_t npush)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>pop</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_master.html</anchorfile>
      <anchor>a822d98db633ffc8c874017e8cae483f5</anchor>
      <arglist>(GlobalAddress&lt; GlobalVector &gt; self, T *buffer, int64_t npop)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dequeue</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_master.html</anchorfile>
      <anchor>ae2f18b9fde4c7a835c11292b009337aa</anchor>
      <arglist>(GlobalAddress&lt; GlobalVector &gt; self, T *buffer, int64_t ndeq)</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>head</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_master.html</anchorfile>
      <anchor>a1def03934e840e4dd5fb64b472a49b10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>head_allocator</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_master.html</anchorfile>
      <anchor>ab3a0944c642fda7af3409b5766c518b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>tail</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_master.html</anchorfile>
      <anchor>a2c0aa8a0a14c03b6aa7d2425245caf72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>tail_allocator</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_master.html</anchorfile>
      <anchor>a91db9b6e63c26b09d646fec314ea2f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_master.html</anchorfile>
      <anchor>ae4722b6b13dcdcf01ad56932d779209f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>combining</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_master.html</anchorfile>
      <anchor>ad545aa257c6a6533c6083b281d24f211</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CompletionEvent</type>
      <name>ce</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_master.html</anchorfile>
      <anchor>afb1360688b84f07089b35d809f1d5e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SuspendedDelegateQueue</type>
      <name>push_q</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_master.html</anchorfile>
      <anchor>a8526f255ba38d40604918163b2690896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SuspendedDelegateQueue</type>
      <name>pop_q</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_master.html</anchorfile>
      <anchor>a0a22b34371cd4e7b493943094b4de963</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SuspendedDelegateQueue</type>
      <name>deq_q</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_master.html</anchorfile>
      <anchor>a5efec1f4a09cbeef4033f8e6d579843a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::MaxMetric</name>
    <filename>class_grappa_1_1_max_metric.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>MaxMetric</name>
      <anchorfile>class_grappa_1_1_max_metric.html</anchorfile>
      <anchor>aabc02968a9fdc6b0fcdf2ed356102bfe</anchor>
      <arglist>(const char *name, T initial_value, bool reg_new=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>json</name>
      <anchorfile>class_grappa_1_1_max_metric.html</anchorfile>
      <anchor>a64895610ed59607cdb0b899cfb667805</anchor>
      <arglist>(std::ostream &amp;o) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>class_grappa_1_1_max_metric.html</anchorfile>
      <anchor>ae4c63105eadcee52877a589a83340b76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>class_grappa_1_1_max_metric.html</anchorfile>
      <anchor>ae9a00be6d7a83f57e54a4dfba530c3e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MaxMetric&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>class_grappa_1_1_max_metric.html</anchorfile>
      <anchor>ac3d7f1007832211cf14c3971a718a091</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge_all</name>
      <anchorfile>class_grappa_1_1_max_metric.html</anchorfile>
      <anchor>a448bdf5c65d276fa6f68cde879dbb8e2</anchor>
      <arglist>(impl::MetricBase *static_stat_ptr)</arglist>
    </member>
    <member kind="function">
      <type>const MaxMetric&lt; T &gt; &amp;</type>
      <name>count</name>
      <anchorfile>class_grappa_1_1_max_metric.html</anchorfile>
      <anchor>a1200314b50360b2b0b30baef0b4e898f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value</name>
      <anchorfile>class_grappa_1_1_max_metric.html</anchorfile>
      <anchor>ab74a738cad076af2139b3f41bf740163</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>class_grappa_1_1_max_metric.html</anchorfile>
      <anchor>a10da4d20fbadd0859d971cb69f4d00a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>class_grappa_1_1_max_metric.html</anchorfile>
      <anchor>ac2e02e4e7693196e9c4ac0b10fd0a124</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>initial_value</name>
      <anchorfile>class_grappa_1_1_max_metric.html</anchorfile>
      <anchor>afc0bb248e7d2f4c58880e0d92e7b9829</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>value_</name>
      <anchorfile>class_grappa_1_1_max_metric.html</anchorfile>
      <anchor>abe1ede6b19b475381214c95ce9e9e5d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::Message</name>
    <filename>class_grappa_1_1_message.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>Message</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>acba0cc4e2d5774106b9d494227fb878f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Message</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>a5de80a6eed292a8ee6aa70c913fea5e7</anchor>
      <arglist>(Core dest, T t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Message</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>a8e6798a2157a21d701fc757aa890a123</anchor>
      <arglist>(const Message &amp;m)=delete</arglist>
    </member>
    <member kind="function">
      <type>Message &amp;</type>
      <name>operator=</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>a9ef5e7722c5d5349119e41804c983579</anchor>
      <arglist>(const Message &amp;m)=delete</arglist>
    </member>
    <member kind="function">
      <type>Message &amp;</type>
      <name>operator=</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>aebc7c89a73e0aad8bb16b4540a187437</anchor>
      <arglist>(Message &amp;&amp;m)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Message</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>a49d564bc58998115c1ef5cf12b08fd8b</anchor>
      <arglist>(Message &amp;&amp;m)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Message</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>a710b406328e24fecbe929aaac22eb195</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typestr</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>a84759d3010fdd6fb3b7cc8f3c452b33a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>ac5aa18e5dc75c88a32be95428d5381de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>a317d6922354e26555ccc3b0713922d0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const size_t</type>
      <name>serialized_size</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>ae8ef80e321fb21b3d82fd4068c6b381b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const size_t</type>
      <name>size</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>a84234ea4b7ea543176e38b2ef76641e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deliver_locally</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>ae07d99e0001833b4e8073f413e72987d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>serialize_to</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>ac92ae4597ff7470342b00115f3785640</anchor>
      <arglist>(char *p, size_t max_size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char *</type>
      <name>deserialize_and_call</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>ad1ead55a4ba08903e0a0663fef835a35</anchor>
      <arglist>(char *t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Message&lt; DoComplete &gt;</name>
    <filename>class_grappa_1_1_message.html</filename>
    <member kind="function">
      <type></type>
      <name>Message</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>acba0cc4e2d5774106b9d494227fb878f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Message</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>a5de80a6eed292a8ee6aa70c913fea5e7</anchor>
      <arglist>(Core dest, DoComplete t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Message</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>a8e6798a2157a21d701fc757aa890a123</anchor>
      <arglist>(const Message &amp;m)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Message</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>a49d564bc58998115c1ef5cf12b08fd8b</anchor>
      <arglist>(Message &amp;&amp;m)=default</arglist>
    </member>
    <member kind="function">
      <type>Message &amp;</type>
      <name>operator=</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>a9ef5e7722c5d5349119e41804c983579</anchor>
      <arglist>(const Message &amp;m)=delete</arglist>
    </member>
    <member kind="function">
      <type>Message &amp;</type>
      <name>operator=</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>aebc7c89a73e0aad8bb16b4540a187437</anchor>
      <arglist>(Message &amp;&amp;m)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Message</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>a710b406328e24fecbe929aaac22eb195</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typestr</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>a84759d3010fdd6fb3b7cc8f3c452b33a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DoComplete &amp;</type>
      <name>operator*</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>ac5aa18e5dc75c88a32be95428d5381de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DoComplete *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>a317d6922354e26555ccc3b0713922d0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const size_t</type>
      <name>serialized_size</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>ae8ef80e321fb21b3d82fd4068c6b381b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const size_t</type>
      <name>size</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>a84234ea4b7ea543176e38b2ef76641e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deliver_locally</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>ae07d99e0001833b4e8073f413e72987d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>serialize_to</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>ac92ae4597ff7470342b00115f3785640</anchor>
      <arglist>(char *p, size_t max_size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char *</type>
      <name>deserialize_and_call</name>
      <anchorfile>class_grappa_1_1_message.html</anchorfile>
      <anchor>ad1ead55a4ba08903e0a0663fef835a35</anchor>
      <arglist>(char *t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::MessagePool</name>
    <filename>class_grappa_1_1_message_pool.html</filename>
    <member kind="function">
      <type></type>
      <name>MessagePool</name>
      <anchorfile>class_grappa_1_1_message_pool.html</anchorfile>
      <anchor>acbbb1a14c05ca378d93da55b135754c8</anchor>
      <arglist>(size_t bytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessagePool</name>
      <anchorfile>class_grappa_1_1_message_pool.html</anchorfile>
      <anchor>a510ec925083597213fef04c52d5ec8fc</anchor>
      <arglist>(void *ext_buf, size_t bytes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::MessagePoolStatic</name>
    <filename>class_grappa_1_1_message_pool_static.html</filename>
    <templarg>Bytes</templarg>
    <member kind="function">
      <type></type>
      <name>MessagePoolStatic</name>
      <anchorfile>class_grappa_1_1_message_pool_static.html</anchorfile>
      <anchor>aa394a3bd3f3121f8e2354110bbc2c23b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::Mutex</name>
    <filename>class_grappa_1_1_mutex.html</filename>
    <member kind="function">
      <type></type>
      <name>Mutex</name>
      <anchorfile>class_grappa_1_1_mutex.html</anchorfile>
      <anchor>a44eea0e27f7b22ce21d42e34b9988ce7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>lock_</name>
      <anchorfile>class_grappa_1_1_mutex.html</anchorfile>
      <anchor>a5eb4ecc2da87631e9f99e49006eeaac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>intptr_t</type>
      <name>waiters_</name>
      <anchorfile>class_grappa_1_1_mutex.html</anchorfile>
      <anchor>a2050ee96a8cf5b96314e805eac4173d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>intptr_t</type>
      <name>raw_</name>
      <anchorfile>class_grappa_1_1_mutex.html</anchorfile>
      <anchor>af67157d2cc0c9cc7dada32aa9b0907e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NullAcquirer</name>
    <filename>class_null_acquirer.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>NullAcquirer</name>
      <anchorfile>class_null_acquirer.html</anchorfile>
      <anchor>a1eccee32de9d691a2e35b207d5576d3b</anchor>
      <arglist>(GlobalAddress&lt; T &gt; *request_address, size_t *count, T **pointer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_null_acquirer.html</anchorfile>
      <anchor>a82a477862d9b7e8ab8903819d872dcca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_acquire</name>
      <anchorfile>class_null_acquirer.html</anchorfile>
      <anchor>a270f2539a374e9749a7e94c06a1b6180</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>block_until_acquired</name>
      <anchorfile>class_null_acquirer.html</anchorfile>
      <anchor>a82169080883de9a092e5fb346bf78909</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>acquired</name>
      <anchorfile>class_null_acquirer.html</anchorfile>
      <anchor>acda21516eb85caa48fbcdff84fa00725</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NullReleaser</name>
    <filename>class_null_releaser.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>NullReleaser</name>
      <anchorfile>class_null_releaser.html</anchorfile>
      <anchor>a22b5ba29db05e69e11abee27bb5d5c9b</anchor>
      <arglist>(GlobalAddress&lt; T &gt; *request_address, size_t *count, void *storage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_null_releaser.html</anchorfile>
      <anchor>abe5fab141d3bfcdd686b9735434a8f26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_release</name>
      <anchorfile>class_null_releaser.html</anchorfile>
      <anchor>a5f65a7711d5a167b1de8156a13fb4116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>block_until_released</name>
      <anchorfile>class_null_releaser.html</anchorfile>
      <anchor>a2685785217c4e7c324a1def66c149e86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>released</name>
      <anchorfile>class_null_releaser.html</anchorfile>
      <anchor>a0b62301e3bbca67262f046a1daffa77a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::PayloadMessage</name>
    <filename>class_grappa_1_1_payload_message.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>PayloadMessage</name>
      <anchorfile>class_grappa_1_1_payload_message.html</anchorfile>
      <anchor>a5e7a1318cbbaeb51df1917a75c7cc2e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PayloadMessage</name>
      <anchorfile>class_grappa_1_1_payload_message.html</anchorfile>
      <anchor>a15cb0b4ac3ca663525635c1f43061daa</anchor>
      <arglist>(Core dest, T t, void *payload, size_t payload_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PayloadMessage</name>
      <anchorfile>class_grappa_1_1_payload_message.html</anchorfile>
      <anchor>ac16e9c48b59928129d73a556d783ff3d</anchor>
      <arglist>(const PayloadMessage &amp;m)=delete</arglist>
    </member>
    <member kind="function">
      <type>PayloadMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>class_grappa_1_1_payload_message.html</anchorfile>
      <anchor>a6031ff0528c6ea61075ce674558a51bd</anchor>
      <arglist>(const PayloadMessage &amp;m)=delete</arglist>
    </member>
    <member kind="function">
      <type>PayloadMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>class_grappa_1_1_payload_message.html</anchorfile>
      <anchor>a7e1421b3e11609cce5eafd755de78872</anchor>
      <arglist>(PayloadMessage &amp;&amp;m)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PayloadMessage</name>
      <anchorfile>class_grappa_1_1_payload_message.html</anchorfile>
      <anchor>a734ea42268f7aab8c855fc8fa5867374</anchor>
      <arglist>(PayloadMessage &amp;&amp;m)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PayloadMessage</name>
      <anchorfile>class_grappa_1_1_payload_message.html</anchorfile>
      <anchor>a4c4e2f9b8cd27c14d04ba201964288a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_payload</name>
      <anchorfile>class_grappa_1_1_payload_message.html</anchorfile>
      <anchor>afa9530ebefcd385b5eb8f76d82b0985c</anchor>
      <arglist>(void *payload, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delete_payload_after_send</name>
      <anchorfile>class_grappa_1_1_payload_message.html</anchorfile>
      <anchor>a1521fb9ed163700ba038d997a64da51f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>class_grappa_1_1_payload_message.html</anchorfile>
      <anchor>afce74052df1a1cb146f2f6b8a2b51a4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>typestr</name>
      <anchorfile>class_grappa_1_1_payload_message.html</anchorfile>
      <anchor>a6686790e0b7189c620d9657d61518d5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>class_grappa_1_1_payload_message.html</anchorfile>
      <anchor>aa8bb09714ccb585f0da0a9eb18d92725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>class_grappa_1_1_payload_message.html</anchorfile>
      <anchor>a8cea095489fee76c47a11ee67a68a26b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const size_t</type>
      <name>serialized_size</name>
      <anchorfile>class_grappa_1_1_payload_message.html</anchorfile>
      <anchor>ab3de0c97f855a05340e05f1af8c91a9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const size_t</type>
      <name>size</name>
      <anchorfile>class_grappa_1_1_payload_message.html</anchorfile>
      <anchor>afb2f54fede6531f3d207f52bddb9a496</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deliver_locally</name>
      <anchorfile>class_grappa_1_1_payload_message.html</anchorfile>
      <anchor>a0f8f55218962aa8460e249c1fe4c9b06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char *</type>
      <name>serialize_to</name>
      <anchorfile>class_grappa_1_1_payload_message.html</anchorfile>
      <anchor>ae8ef5d1578f97de8c432515377a34a2e</anchor>
      <arglist>(char *p, size_t max_size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char *</type>
      <name>deserialize_and_call</name>
      <anchorfile>class_grappa_1_1_payload_message.html</anchorfile>
      <anchor>a17ef4e26f25699b415efd65770c15a57</anchor>
      <arglist>(char *t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::PoolAllocator</name>
    <filename>class_grappa_1_1_pool_allocator.html</filename>
    <templarg>Base</templarg>
    <member kind="function">
      <type>Base *</type>
      <name>allocate</name>
      <anchorfile>class_grappa_1_1_pool_allocator.html</anchorfile>
      <anchor>a37a47e52bca487a2207ec484934f26b3</anchor>
      <arglist>(size_t sz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoolAllocator</name>
      <anchorfile>class_grappa_1_1_pool_allocator.html</anchorfile>
      <anchor>a95028bc9856c6e84c69d0efc44b4bc80</anchor>
      <arglist>(char *buffer, size_t buffer_size, bool owns_buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_grappa_1_1_pool_allocator.html</anchorfile>
      <anchor>ac278ea5f4d29e9c4cd0368e8134e222b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PoolAllocator</name>
      <anchorfile>class_grappa_1_1_pool_allocator.html</anchorfile>
      <anchor>a58629383ddaaaa7acd13fc03f996e525</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterate</name>
      <anchorfile>class_grappa_1_1_pool_allocator.html</anchorfile>
      <anchor>a383659c8ac4707cd45695011ebe06fc0</anchor>
      <arglist>(F f)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>remaining</name>
      <anchorfile>class_grappa_1_1_pool_allocator.html</anchorfile>
      <anchor>afec2d932e8a67cffea7714944cd2a73e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>buffer</name>
      <anchorfile>class_grappa_1_1_pool_allocator.html</anchorfile>
      <anchor>a71efa6e89f35e0d169214eda33c2d311</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>buffer_size</name>
      <anchorfile>class_grappa_1_1_pool_allocator.html</anchorfile>
      <anchor>a12837cc55bb87924b3a12e1e8c8c96e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>allocated</name>
      <anchorfile>class_grappa_1_1_pool_allocator.html</anchorfile>
      <anchor>a130981d330d3473b0c0e27b87c875dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>owns_buffer</name>
      <anchorfile>class_grappa_1_1_pool_allocator.html</anchorfile>
      <anchor>aedc92b721f7431ea5c0045fdece33407</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void *</type>
      <name>operator new</name>
      <anchorfile>class_grappa_1_1_pool_allocator.html</anchorfile>
      <anchor>a35bed0da222ca2fb959c8528512b0676</anchor>
      <arglist>(size_t, Grappa::PoolAllocator&lt; OtherBase &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PoolAllocator&lt; impl::MessageBase &gt;</name>
    <filename>class_grappa_1_1_pool_allocator.html</filename>
  </compound>
  <compound kind="class">
    <name>Grappa::PoolAllocatorInternal</name>
    <filename>class_grappa_1_1_pool_allocator_internal.html</filename>
    <templarg>Bytes</templarg>
    <templarg></templarg>
    <base>Grappa::PoolAllocator</base>
    <member kind="function">
      <type></type>
      <name>PoolAllocatorInternal</name>
      <anchorfile>class_grappa_1_1_pool_allocator_internal.html</anchorfile>
      <anchor>a95a533fc79502c996d5298f7b2cda6b8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::PrefetchingThreadQueue</name>
    <filename>class_grappa_1_1_prefetching_thread_queue.html</filename>
    <member kind="function">
      <type></type>
      <name>PrefetchingThreadQueue</name>
      <anchorfile>class_grappa_1_1_prefetching_thread_queue.html</anchorfile>
      <anchor>ac92f9acdbcfd861df0a9032d8d0ddd06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>class_grappa_1_1_prefetching_thread_queue.html</anchorfile>
      <anchor>a5a169ce71738c747892d0003247f0025</anchor>
      <arglist>(uint64_t prefetchDistance)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>length</name>
      <anchorfile>class_grappa_1_1_prefetching_thread_queue.html</anchorfile>
      <anchor>ab6469238529b206cf49453eb0df7f421</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enqueue</name>
      <anchorfile>class_grappa_1_1_prefetching_thread_queue.html</anchorfile>
      <anchor>ac018c7886d73af714084217e92e87760</anchor>
      <arglist>(Worker *t)</arglist>
    </member>
    <member kind="function">
      <type>Worker *</type>
      <name>dequeue</name>
      <anchorfile>class_grappa_1_1_prefetching_thread_queue.html</anchorfile>
      <anchor>adcc6b15ead73749041a9816b4df12d4b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::delegate::Promise</name>
    <filename>class_grappa_1_1delegate_1_1_promise.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Promise</name>
      <anchorfile>class_grappa_1_1delegate_1_1_promise.html</anchorfile>
      <anchor>a06ea029d63ee76da3e561e811747b6f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>class_grappa_1_1delegate_1_1_promise.html</anchorfile>
      <anchor>a23b648f6ccdcfa0166ecdf28fdf3066a</anchor>
      <arglist>(const R &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>const R</type>
      <name>get</name>
      <anchorfile>class_grappa_1_1delegate_1_1_promise.html</anchorfile>
      <anchor>aa16c6d5ae370d9fac9fd6f4494725741</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call_async</name>
      <anchorfile>class_grappa_1_1delegate_1_1_promise.html</anchorfile>
      <anchor>a835d7f63e305fbd8a3eed9ae30d05e6b</anchor>
      <arglist>(Core dest, F func)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::GlobalVector::Proxy</name>
    <filename>struct_grappa_1_1_global_vector_1_1_proxy.html</filename>
    <member kind="function">
      <type></type>
      <name>Proxy</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_proxy.html</anchorfile>
      <anchor>abc66dd1e17d95825075e7e5112745919</anchor>
      <arglist>(GlobalVector *const outer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_proxy.html</anchorfile>
      <anchor>a83efb3d57bcbad2635504be466142322</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Proxy *</type>
      <name>clone_fresh</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_proxy.html</anchorfile>
      <anchor>a3f9118c601806308295466bfb786ec9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_full</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_proxy.html</anchorfile>
      <anchor>adb02df63042f3ea0a5ccdbcfca45ef52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_proxy.html</anchorfile>
      <anchor>a3ee6f684f76c2f1d31d34ddc0faf7cf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>GlobalVector *</type>
      <name>outer</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_proxy.html</anchorfile>
      <anchor>abb456daadad4f377406e0d7025e42049</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>buffer</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_proxy.html</anchorfile>
      <anchor>aa779f7ac6e962f96f1bc779262df3e86</anchor>
      <arglist>[BUFFER_CAPACITY]</arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>npush</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_proxy.html</anchorfile>
      <anchor>a5d35cce6f1a1337e653200d241ff49bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>deqs</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_proxy.html</anchorfile>
      <anchor>ab6fac4fc1bc69d81ab22c10574fd6bcd</anchor>
      <arglist>[BUFFER_CAPACITY]</arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>ndeq</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_proxy.html</anchorfile>
      <anchor>ad55d4ea20882cb1bf82c8a32880b620f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>pops</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_proxy.html</anchorfile>
      <anchor>ae207c84bb5565dcd98fac3462a85e39c</anchor>
      <arglist>[BUFFER_CAPACITY]</arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>npop</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_proxy.html</anchorfile>
      <anchor>af5803ac37be0d48243695859cb8a52cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::GlobalCounter::Proxy</name>
    <filename>struct_grappa_1_1_global_counter_1_1_proxy.html</filename>
    <member kind="function">
      <type></type>
      <name>Proxy</name>
      <anchorfile>struct_grappa_1_1_global_counter_1_1_proxy.html</anchorfile>
      <anchor>a318ffa33882b2cae4684a2a07da87e7f</anchor>
      <arglist>(GlobalCounter *outer)</arglist>
    </member>
    <member kind="function">
      <type>Proxy *</type>
      <name>clone_fresh</name>
      <anchorfile>struct_grappa_1_1_global_counter_1_1_proxy.html</anchorfile>
      <anchor>afe87e5d32af183b780c883cb4186cca8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync</name>
      <anchorfile>struct_grappa_1_1_global_counter_1_1_proxy.html</anchorfile>
      <anchor>a31912b856f6932e54bd5e166445332e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>struct_grappa_1_1_global_counter_1_1_proxy.html</anchorfile>
      <anchor>ae7d2bfa710b9d14158ebe0bbe7156bbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_full</name>
      <anchorfile>struct_grappa_1_1_global_counter_1_1_proxy.html</anchorfile>
      <anchor>abf93decf6fb3ea2d5995cebde8ebd7d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>GlobalCounter *</type>
      <name>outer</name>
      <anchorfile>struct_grappa_1_1_global_counter_1_1_proxy.html</anchorfile>
      <anchor>aac2ce351fa2772efd01be26a3357fecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>delta</name>
      <anchorfile>struct_grappa_1_1_global_counter_1_1_proxy.html</anchorfile>
      <anchor>a85e123c3eaff8596f79489f7a992e911</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::GlobalHashMap::Proxy</name>
    <filename>struct_grappa_1_1_global_hash_map_1_1_proxy.html</filename>
    <member kind="function">
      <type></type>
      <name>Proxy</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_proxy.html</anchorfile>
      <anchor>a3b2e62f6afe3259fdd3d64cac9ed186d</anchor>
      <arglist>(GlobalHashMap *owner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_proxy.html</anchorfile>
      <anchor>ae1ac1bba587c108d645c9ddb94ac96d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Proxy *</type>
      <name>clone_fresh</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_proxy.html</anchorfile>
      <anchor>a499adf9d76120758a93394e95df87d41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_full</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_proxy.html</anchorfile>
      <anchor>acdb19ac744efe279191ecef7f11ad85b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_proxy.html</anchorfile>
      <anchor>a3ca8987af83374f68f9875bcd7e8b1f9</anchor>
      <arglist>(const K &amp;newk, const V &amp;newv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_proxy.html</anchorfile>
      <anchor>adae6c92e7cfd97a339b9713a9ffd6616</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>GlobalHashMap *</type>
      <name>owner</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_proxy.html</anchorfile>
      <anchor>aed4ee2698fd30a58f3b2fb97eae75cd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; K, V &gt;</type>
      <name>map</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_proxy.html</anchorfile>
      <anchor>a69294bccd9c4e563077b22e8f782c4b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; K, ResultEntry * &gt;</type>
      <name>lookups</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_proxy.html</anchorfile>
      <anchor>aec7f08d5edf6a6aaca62cf0300b654dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>LOCAL_HASH_SIZE</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_proxy.html</anchorfile>
      <anchor>aa4b4d32e3af5132447a6fbd77f024584</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::GlobalHashSet::Proxy</name>
    <filename>struct_grappa_1_1_global_hash_set_1_1_proxy.html</filename>
    <member kind="function">
      <type></type>
      <name>Proxy</name>
      <anchorfile>struct_grappa_1_1_global_hash_set_1_1_proxy.html</anchorfile>
      <anchor>abc207a1aa5b38f17eae37fab60b4c5c4</anchor>
      <arglist>(GlobalHashSet *owner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>struct_grappa_1_1_global_hash_set_1_1_proxy.html</anchorfile>
      <anchor>a7298e6cfacbd7d25992c1206bb15d004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Proxy *</type>
      <name>clone_fresh</name>
      <anchorfile>struct_grappa_1_1_global_hash_set_1_1_proxy.html</anchorfile>
      <anchor>a4f239f0aa9f65d0175f28fadff496d18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_full</name>
      <anchorfile>struct_grappa_1_1_global_hash_set_1_1_proxy.html</anchorfile>
      <anchor>a23552bef968a0ddd62fd9e22f3de365d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>struct_grappa_1_1_global_hash_set_1_1_proxy.html</anchorfile>
      <anchor>a11eb4c68f93b8476e98acafe243b70a0</anchor>
      <arglist>(const K &amp;newk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync</name>
      <anchorfile>struct_grappa_1_1_global_hash_set_1_1_proxy.html</anchorfile>
      <anchor>ad5161ec3f3de7e85c3023c35708bc256</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>GlobalHashSet *</type>
      <name>owner</name>
      <anchorfile>struct_grappa_1_1_global_hash_set_1_1_proxy.html</anchorfile>
      <anchor>a3d8dd2ffd0e7fe93ceec04023fde55ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_set&lt; K &gt;</type>
      <name>keys_to_insert</name>
      <anchorfile>struct_grappa_1_1_global_hash_set_1_1_proxy.html</anchorfile>
      <anchor>a354ac314253d383ab766aea969d3613a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unordered_map&lt; K, ResultEntry * &gt;</type>
      <name>lookups</name>
      <anchorfile>struct_grappa_1_1_global_hash_set_1_1_proxy.html</anchorfile>
      <anchor>a39b27099d108d3ed04f5cb3d37abf47e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>LOCAL_HASH_SIZE</name>
      <anchorfile>struct_grappa_1_1_global_hash_set_1_1_proxy.html</anchorfile>
      <anchor>a44307d32210900a2183c265dd55a9d02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>PushBuffer</name>
    <filename>struct_push_buffer.html</filename>
    <templarg></templarg>
    <templarg>BUFSIZE</templarg>
    <templarg>NBUFS</templarg>
    <member kind="function">
      <type></type>
      <name>PushBuffer</name>
      <anchorfile>struct_push_buffer.html</anchorfile>
      <anchor>a72df11a1ecfbd6ce4735e86d3c4522a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PushBuffer</name>
      <anchorfile>struct_push_buffer.html</anchorfile>
      <anchor>a4f1af0e0968dd9694f5710c164a53700</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>struct_push_buffer.html</anchorfile>
      <anchor>a6dc2b32ffa3a03d6ef4bce3110741b13</anchor>
      <arglist>(const T &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>struct_push_buffer.html</anchorfile>
      <anchor>a91a04dd1e5c530114ddd8b55435d6229</anchor>
      <arglist>(GlobalAddress&lt; T &gt; _target_array, GlobalAddress&lt; int64_t &gt; _shared_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>struct_push_buffer.html</anchorfile>
      <anchor>a28b59d7c68314cb82eecb1c300296658</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>target_array</name>
      <anchorfile>struct_push_buffer.html</anchorfile>
      <anchor>a0b2569a0dc82b4207daf89f8d00c41c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalAddress&lt; int64_t &gt;</type>
      <name>shared_index</name>
      <anchorfile>struct_push_buffer.html</anchorfile>
      <anchor>abdfb8cacb7ff48cfa6ce53c804d5aa57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>buf</name>
      <anchorfile>struct_push_buffer.html</anchorfile>
      <anchor>ac230c1c24996bf0737fda170229fa104</anchor>
      <arglist>[NBUFS]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>curr_buf</name>
      <anchorfile>struct_push_buffer.html</anchorfile>
      <anchor>ac6b04078039b8b716db53f6b074a6466</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>curr_size</name>
      <anchorfile>struct_push_buffer.html</anchorfile>
      <anchor>a3933bf9a88e9672138eb3d1d4d7e5f57</anchor>
      <arglist>[NBUFS]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Range</name>
    <filename>struct_range.html</filename>
    <templarg>T</templarg>
    <member kind="variable">
      <type>T</type>
      <name>start</name>
      <anchorfile>struct_range.html</anchorfile>
      <anchor>a95a764d782507ae4397445ee95fb610f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>end</name>
      <anchorfile>struct_range.html</anchorfile>
      <anchor>a24cf16cc33828d3bdada7f37fdbc0832</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::GlobalVector::Range</name>
    <filename>struct_grappa_1_1_global_vector_1_1_range.html</filename>
    <member kind="variable">
      <type>size_t</type>
      <name>start</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_range.html</anchorfile>
      <anchor>ac1d6059bbaae65567d023747bd384a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>end</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_range.html</anchorfile>
      <anchor>a39033b376c42ee163361c6f0743d0f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>struct_grappa_1_1_global_vector_1_1_range.html</anchorfile>
      <anchor>acef7ef7e08fa019511516ca066b9d24a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Reducer</name>
    <filename>class_reducer.html</filename>
    <templarg></templarg>
    <templarg>R</templarg>
    <base>ReducerImpl&lt; T, collective_add &gt;</base>
  </compound>
  <compound kind="class">
    <name>Reducer&lt; T, ReducerType::Add &gt;</name>
    <filename>class_reducer_3_01_t_00_01_reducer_type_1_1_add_01_4.html</filename>
    <templarg></templarg>
    <base>ReducerImpl&lt; T, collective_add &gt;</base>
    <member kind="function">
      <type></type>
      <name>Super</name>
      <anchorfile>class_reducer_3_01_t_00_01_reducer_type_1_1_add_01_4.html</anchorfile>
      <anchor>af80906edd0654cfd197f83060d70c3b0</anchor>
      <arglist>(ReducerImpl&lt; T, collective_add &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>class_reducer_3_01_t_00_01_reducer_type_1_1_add_01_4.html</anchorfile>
      <anchor>a8d9464e0801709e9d007a1cadc901332</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>class_reducer_3_01_t_00_01_reducer_type_1_1_add_01_4.html</anchorfile>
      <anchor>a26ab26757cc1a24b3aef7bb59c3055d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>class_reducer_3_01_t_00_01_reducer_type_1_1_add_01_4.html</anchorfile>
      <anchor>ac47fc92c0266dc5a86487cd03943e68f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>class_reducer_3_01_t_00_01_reducer_type_1_1_add_01_4.html</anchorfile>
      <anchor>a712550a62a07f521332bdcc5a7b6c13c</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator--</name>
      <anchorfile>class_reducer_3_01_t_00_01_reducer_type_1_1_add_01_4.html</anchorfile>
      <anchor>a1a589da1bc2370d53da0832036497bc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator--</name>
      <anchorfile>class_reducer_3_01_t_00_01_reducer_type_1_1_add_01_4.html</anchorfile>
      <anchor>a4c886a0071500f78ca6d4426256b1e33</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Reducer&lt; T, ReducerType::And &gt;</name>
    <filename>class_reducer_3_01_t_00_01_reducer_type_1_1_and_01_4.html</filename>
    <templarg></templarg>
    <base>ReducerImpl&lt; T, collective_and &gt;</base>
    <member kind="function">
      <type></type>
      <name>Super</name>
      <anchorfile>class_reducer_3_01_t_00_01_reducer_type_1_1_and_01_4.html</anchorfile>
      <anchor>a4db8f508d21aafc271aa964f9243b2b6</anchor>
      <arglist>(ReducerImpl&lt; T, collective_and &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&amp;=</name>
      <anchorfile>class_reducer_3_01_t_00_01_reducer_type_1_1_and_01_4.html</anchorfile>
      <anchor>ad30329f835ec037d035ec56a481bbae9</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Reducer&lt; T, ReducerType::Max &gt;</name>
    <filename>class_reducer_3_01_t_00_01_reducer_type_1_1_max_01_4.html</filename>
    <templarg></templarg>
    <base>ReducerImpl&lt; T, collective_max &gt;</base>
    <member kind="function">
      <type></type>
      <name>Super</name>
      <anchorfile>class_reducer_3_01_t_00_01_reducer_type_1_1_max_01_4.html</anchorfile>
      <anchor>a67cc6352e47e2ba465ccffc3f2dfbd55</anchor>
      <arglist>(ReducerImpl&lt; T, collective_max &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_reducer_3_01_t_00_01_reducer_type_1_1_max_01_4.html</anchorfile>
      <anchor>aa5d8df7f631f3932d6bd1d035f60f7eb</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Reducer&lt; T, ReducerType::Min &gt;</name>
    <filename>class_reducer_3_01_t_00_01_reducer_type_1_1_min_01_4.html</filename>
    <templarg></templarg>
    <base>ReducerImpl&lt; T, collective_min &gt;</base>
    <member kind="function">
      <type></type>
      <name>Super</name>
      <anchorfile>class_reducer_3_01_t_00_01_reducer_type_1_1_min_01_4.html</anchorfile>
      <anchor>a27bbf4e1e1278343813c4339f690960f</anchor>
      <arglist>(ReducerImpl&lt; T, collective_min &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_reducer_3_01_t_00_01_reducer_type_1_1_min_01_4.html</anchorfile>
      <anchor>a509779cd3102501440b0e4b194912401</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Reducer&lt; T, ReducerType::Or &gt;</name>
    <filename>class_reducer_3_01_t_00_01_reducer_type_1_1_or_01_4.html</filename>
    <templarg></templarg>
    <base>ReducerImpl&lt; T, collective_or &gt;</base>
    <member kind="function">
      <type></type>
      <name>Super</name>
      <anchorfile>class_reducer_3_01_t_00_01_reducer_type_1_1_or_01_4.html</anchorfile>
      <anchor>a206f181b9870619130b28a1c5fedae48</anchor>
      <arglist>(ReducerImpl&lt; T, collective_or &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator|=</name>
      <anchorfile>class_reducer_3_01_t_00_01_reducer_type_1_1_or_01_4.html</anchorfile>
      <anchor>a69aa2b66d70a7f293c51d422f2ef353f</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReducerImpl</name>
    <filename>class_reducer_impl.html</filename>
    <templarg>T</templarg>
    <templarg>ReduceOp</templarg>
    <member kind="function">
      <type></type>
      <name>ReducerImpl</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>af2215281ca8b8958999ab7a7be200354</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>aff109ed9b00a77e6716a1551a07a0d75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>aab182dd5b2e386c39f7d512a4e0bb272</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>a1a4e5e927304065bc237cb1616589a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>local_value</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>acd093e7f86018a53352a7ab3f5aa51c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReducerImpl&lt; T, collective_add &gt;</name>
    <filename>class_reducer_impl.html</filename>
    <member kind="function">
      <type></type>
      <name>ReducerImpl</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>af2215281ca8b8958999ab7a7be200354</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>aff109ed9b00a77e6716a1551a07a0d75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>aab182dd5b2e386c39f7d512a4e0bb272</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>a1a4e5e927304065bc237cb1616589a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>local_value</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>acd093e7f86018a53352a7ab3f5aa51c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReducerImpl&lt; T, collective_and &gt;</name>
    <filename>class_reducer_impl.html</filename>
    <member kind="function">
      <type></type>
      <name>ReducerImpl</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>af2215281ca8b8958999ab7a7be200354</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>aff109ed9b00a77e6716a1551a07a0d75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>aab182dd5b2e386c39f7d512a4e0bb272</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>a1a4e5e927304065bc237cb1616589a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>local_value</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>acd093e7f86018a53352a7ab3f5aa51c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReducerImpl&lt; T, collective_max &gt;</name>
    <filename>class_reducer_impl.html</filename>
    <member kind="function">
      <type></type>
      <name>ReducerImpl</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>af2215281ca8b8958999ab7a7be200354</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>aff109ed9b00a77e6716a1551a07a0d75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>aab182dd5b2e386c39f7d512a4e0bb272</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>a1a4e5e927304065bc237cb1616589a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>local_value</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>acd093e7f86018a53352a7ab3f5aa51c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReducerImpl&lt; T, collective_min &gt;</name>
    <filename>class_reducer_impl.html</filename>
    <member kind="function">
      <type></type>
      <name>ReducerImpl</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>af2215281ca8b8958999ab7a7be200354</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>aff109ed9b00a77e6716a1551a07a0d75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>aab182dd5b2e386c39f7d512a4e0bb272</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>a1a4e5e927304065bc237cb1616589a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>local_value</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>acd093e7f86018a53352a7ab3f5aa51c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ReducerImpl&lt; T, collective_or &gt;</name>
    <filename>class_reducer_impl.html</filename>
    <member kind="function">
      <type></type>
      <name>ReducerImpl</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>af2215281ca8b8958999ab7a7be200354</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>aff109ed9b00a77e6716a1551a07a0d75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>aab182dd5b2e386c39f7d512a4e0bb272</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>a1a4e5e927304065bc237cb1616589a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>local_value</name>
      <anchorfile>class_reducer_impl.html</anchorfile>
      <anchor>acd093e7f86018a53352a7ab3f5aa51c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>remote_task_spawn_args</name>
    <filename>structremote__task__spawn__args.html</filename>
    <templarg>A0</templarg>
    <templarg>A1</templarg>
    <templarg>A2</templarg>
    <member kind="variable">
      <type>void(*</type>
      <name>fn_p</name>
      <anchorfile>structremote__task__spawn__args.html</anchorfile>
      <anchor>a33d2c4765dd05bc5c7bb0dac5933b62e</anchor>
      <arglist>)(A0, A1, A2)</arglist>
    </member>
    <member kind="variable">
      <type>A0</type>
      <name>arg0</name>
      <anchorfile>structremote__task__spawn__args.html</anchorfile>
      <anchor>a7675c2c617f7619c49ac0d34bc53ede3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>A1</type>
      <name>arg1</name>
      <anchorfile>structremote__task__spawn__args.html</anchorfile>
      <anchor>a33e4b2a7d0a525443df1d679700c1177</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>A2</type>
      <name>arg2</name>
      <anchorfile>structremote__task__spawn__args.html</anchorfile>
      <anchor>a33c684adf690d8e92e65fe866b7c8c4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IncoherentAcquirer::RequestArgs</name>
    <filename>struct_incoherent_acquirer_1_1_request_args.html</filename>
    <member kind="variable">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>request_address</name>
      <anchorfile>struct_incoherent_acquirer_1_1_request_args.html</anchorfile>
      <anchor>ac0615d411ebb7b0c8dd5bf54e57fbdc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>request_bytes</name>
      <anchorfile>struct_incoherent_acquirer_1_1_request_args.html</anchorfile>
      <anchor>a3677592f22ee2329ab65e72d8fa760b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalAddress&lt; IncoherentAcquirer &gt;</type>
      <name>reply_address</name>
      <anchorfile>struct_incoherent_acquirer_1_1_request_args.html</anchorfile>
      <anchor>a1d1ef407f9a02ed356ac166188c48300</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>offset</name>
      <anchorfile>struct_incoherent_acquirer_1_1_request_args.html</anchorfile>
      <anchor>a3ae8a0bf481132468842373116c9fe17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IncoherentReleaser::RequestArgs</name>
    <filename>struct_incoherent_releaser_1_1_request_args.html</filename>
    <member kind="variable">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>request_address</name>
      <anchorfile>struct_incoherent_releaser_1_1_request_args.html</anchorfile>
      <anchor>aaabf283182648de36dbc7c86ae28b7d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalAddress&lt; IncoherentReleaser &gt;</type>
      <name>reply_address</name>
      <anchorfile>struct_incoherent_releaser_1_1_request_args.html</anchorfile>
      <anchor>afcc3ca0062ce61d6b5f5c8d235cadc22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::GlobalHashMap::ResultEntry</name>
    <filename>struct_grappa_1_1_global_hash_map_1_1_result_entry.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>found</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_result_entry.html</anchorfile>
      <anchor>aabdfb03bbd74291b37a4d9ff15481064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ResultEntry *</type>
      <name>next</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_result_entry.html</anchorfile>
      <anchor>ac6e309eac8d83127fb14ad49dd7676d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V</type>
      <name>val</name>
      <anchorfile>struct_grappa_1_1_global_hash_map_1_1_result_entry.html</anchorfile>
      <anchor>ae2878fb74634aa1fb4c59d3fc845cc53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Grappa::GlobalHashSet::ResultEntry</name>
    <filename>struct_grappa_1_1_global_hash_set_1_1_result_entry.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>result</name>
      <anchorfile>struct_grappa_1_1_global_hash_set_1_1_result_entry.html</anchorfile>
      <anchor>ad43c19216f16c2e9be65184b1cc091e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ResultEntry *</type>
      <name>next</name>
      <anchorfile>struct_grappa_1_1_global_hash_set_1_1_result_entry.html</anchorfile>
      <anchor>a0242c89ab55fca52910a3fb6df16e98e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::ReuseMessage</name>
    <filename>class_grappa_1_1_reuse_message.html</filename>
    <templarg>T</templarg>
    <base>Grappa::Message</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ReuseMessage *</type>
      <name>get_next</name>
      <anchorfile>class_grappa_1_1_reuse_message.html</anchorfile>
      <anchor>ab7203322b096cbaa2a4b3a289e66b9f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_next</name>
      <anchorfile>class_grappa_1_1_reuse_message.html</anchorfile>
      <anchor>a69ae04d44624fba82ab80a8ab83ae74d</anchor>
      <arglist>(ReuseMessage *next)</arglist>
    </member>
    <member kind="variable">
      <type>Grappa::impl::ReuseList&lt; ReuseMessage &gt; *</type>
      <name>list_</name>
      <anchorfile>class_grappa_1_1_reuse_message.html</anchorfile>
      <anchor>acdd2f86b3134c20ff3c02a616c161461</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>mark_sent</name>
      <anchorfile>class_grappa_1_1_reuse_message.html</anchorfile>
      <anchor>a501c34c843098cd9b879f55c58bf511b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::ReuseMessageList</name>
    <filename>class_grappa_1_1_reuse_message_list.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ReuseMessageList</name>
      <anchorfile>class_grappa_1_1_reuse_message_list.html</anchorfile>
      <anchor>a3b2ae44fdfa71776f06885d8412522dd</anchor>
      <arglist>(size_t outstanding)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>class_grappa_1_1_reuse_message_list.html</anchorfile>
      <anchor>a4526ba95c53342e672e80e87a5f8f76c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>class_grappa_1_1_reuse_message_list.html</anchorfile>
      <anchor>a486ed9a2dde1dbc0045e67e57411fdbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>class_grappa_1_1_reuse_message_list.html</anchorfile>
      <anchor>a29b721a730a551c3e74ddc18e31ce187</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>with_message</name>
      <anchorfile>class_grappa_1_1_reuse_message_list.html</anchorfile>
      <anchor>aea69df83f5fe09052cce10d333dbe454</anchor>
      <arglist>(F f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RunningStandardDeviation</name>
    <filename>class_running_standard_deviation.html</filename>
    <member kind="function">
      <type></type>
      <name>RunningStandardDeviation</name>
      <anchorfile>class_running_standard_deviation.html</anchorfile>
      <anchor>a1912952be4261599f513f087b2b01e7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_running_standard_deviation.html</anchorfile>
      <anchor>a74bcea9ace61732195f572863b94deb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSample</name>
      <anchorfile>class_running_standard_deviation.html</anchorfile>
      <anchor>a1e7c0c667deb95d5ef476dcc2155e602</anchor>
      <arglist>(uint64_t value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>class_running_standard_deviation.html</anchorfile>
      <anchor>acaaf937074b17a4491be0f66fe092be2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>class_running_standard_deviation.html</anchorfile>
      <anchor>a40ce5d7589a4e790b25473bbea3289ef</anchor>
      <arglist>(RunningStandardDeviation other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::Scheduler</name>
    <filename>class_grappa_1_1_scheduler.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual Worker *</type>
      <name>get_current_thread</name>
      <anchorfile>class_grappa_1_1_scheduler.html</anchorfile>
      <anchor>acc63a939913554558d306af317243d52</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>assignTid</name>
      <anchorfile>class_grappa_1_1_scheduler.html</anchorfile>
      <anchor>aa8a753ad9e4b98ae9107060dee26a77e</anchor>
      <arglist>(Worker *thr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ready</name>
      <anchorfile>class_grappa_1_1_scheduler.html</anchorfile>
      <anchor>aadabe7e4f632d3053f2bc38c8764b259</anchor>
      <arglist>(Worker *thr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>periodic</name>
      <anchorfile>class_grappa_1_1_scheduler.html</anchorfile>
      <anchor>a14392aa0bb288527bfef49088b985cd5</anchor>
      <arglist>(Worker *thr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>class_grappa_1_1_scheduler.html</anchorfile>
      <anchor>a4bd534b70015dba70cabe2acbef9efef</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>thread_yield</name>
      <anchorfile>class_grappa_1_1_scheduler.html</anchorfile>
      <anchor>a42b9ee8aa68484d22c3e8cbb67605e69</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>thread_suspend</name>
      <anchorfile>class_grappa_1_1_scheduler.html</anchorfile>
      <anchor>a5543a0bb406683ff926cdb3716b5a2bf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>thread_wake</name>
      <anchorfile>class_grappa_1_1_scheduler.html</anchorfile>
      <anchor>af28f8f07b5201deaf2a556dc87538be3</anchor>
      <arglist>(Worker *next)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>thread_yield_wake</name>
      <anchorfile>class_grappa_1_1_scheduler.html</anchorfile>
      <anchor>aaadeb4e90dadc82fcc1dc02d27403e56</anchor>
      <arglist>(Worker *next)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>thread_suspend_wake</name>
      <anchorfile>class_grappa_1_1_scheduler.html</anchorfile>
      <anchor>a0fb539c4055a7f955fc968fe52d30b4b</anchor>
      <arglist>(Worker *next)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Worker *</type>
      <name>thread_wait</name>
      <anchorfile>class_grappa_1_1_scheduler.html</anchorfile>
      <anchor>a933d57b578cc08be80d7261edb9b34b9</anchor>
      <arglist>(void **result)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>thread_on_exit</name>
      <anchorfile>class_grappa_1_1_scheduler.html</anchorfile>
      <anchor>ad2c319764627108f35030f7ec615f029</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SixteenBytes</name>
    <filename>struct_sixteen_bytes.html</filename>
    <member kind="variable">
      <type>uint64_t</type>
      <name>val1</name>
      <anchorfile>struct_sixteen_bytes.html</anchorfile>
      <anchor>a99cd7192a24cf5db9763ccd415bf82a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>val2</name>
      <anchorfile>struct_sixteen_bytes.html</anchorfile>
      <anchor>a562e2ef7c3a8624eab3c8abcc77b76ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SmallLocalSet</name>
    <filename>class_small_local_set.html</filename>
    <templarg>T</templarg>
    <templarg>SmallSize</templarg>
    <class kind="struct">SmallLocalSet::iterator</class>
    <member kind="function">
      <type></type>
      <name>SmallLocalSet</name>
      <anchorfile>class_small_local_set.html</anchorfile>
      <anchor>a974db3a1280e082a8ca40eb0dcddc8e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>class_small_local_set.html</anchorfile>
      <anchor>aa1b274bba481c8147999b032d34d48f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>class_small_local_set.html</anchorfile>
      <anchor>a5d7dc6c281178727b0968459c680c1e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>count</name>
      <anchorfile>class_small_local_set.html</anchorfile>
      <anchor>a9237c2cffd3723da541a4e267f644b0b</anchor>
      <arglist>(T k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>class_small_local_set.html</anchorfile>
      <anchor>a7ffeef12e5f5ccfa21585933e343568a</anchor>
      <arglist>(T c)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>class_small_local_set.html</anchorfile>
      <anchor>a7746a7d7c75505e3071c691808ce37d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>class_small_local_set.html</anchorfile>
      <anchor>ad898229a1fe82f557a446ebf35ac957d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>class_small_local_set.html</anchorfile>
      <anchor>a9fe52bf4434276110e58fee8a19f0374</anchor>
      <arglist>(const char *name=nullptr, std::ostream &amp;o=std::cout) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const T</type>
      <name>INVALID</name>
      <anchorfile>class_small_local_set.html</anchorfile>
      <anchor>a2311f546f04e26feebd3602093815db0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StateTimer</name>
    <filename>class_state_timer.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>class_state_timer.html</anchorfile>
      <anchor>ab1bd6d7e966b19670da7f0a9b2fa8a7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>finish</name>
      <anchorfile>class_state_timer.html</anchorfile>
      <anchor>a3f04f670820f24a774d9cdd0ea5be5f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enterState_user</name>
      <anchorfile>class_state_timer.html</anchorfile>
      <anchor>a4f601cfa7a046a3d01ed93539f0dd804</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enterState_system</name>
      <anchorfile>class_state_timer.html</anchorfile>
      <anchor>a8e2484f430f962ddf15f294440c84f57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enterState_communication</name>
      <anchorfile>class_state_timer.html</anchorfile>
      <anchor>ad1b32025b5633523b16fb02ff2b95cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enterState_deaggregation</name>
      <anchorfile>class_state_timer.html</anchorfile>
      <anchor>a3b1e312d9ea3ce7f369280f1bb5c69b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enterState_scheduler</name>
      <anchorfile>class_state_timer.html</anchorfile>
      <anchor>a21b34c6305a5842c86d985bde9b90658</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enterState_findwork</name>
      <anchorfile>class_state_timer.html</anchorfile>
      <anchor>ac3a280820414fff7ee381041b5806f69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enterState_thread</name>
      <anchorfile>class_state_timer.html</anchorfile>
      <anchor>a2035159390114d2f7cb739c2ae34cc81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setThreadState</name>
      <anchorfile>class_state_timer.html</anchorfile>
      <anchor>aacc97b9504debd51240165677d51f03b</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>start_communication</name>
      <anchorfile>class_state_timer.html</anchorfile>
      <anchor>a7b5110fd961062255273f2298c80a2f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>stop_communication</name>
      <anchorfile>class_state_timer.html</anchorfile>
      <anchor>a7dadcb2f6e9fb0edc973b7c37a0865a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>USER</name>
      <anchorfile>class_state_timer.html</anchorfile>
      <anchor>a717b0d5b13152ef33616416fe071b41c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>FINDWORK</name>
      <anchorfile>class_state_timer.html</anchorfile>
      <anchor>a73db22dc0afce32cfce274b5dde684b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SYSTEM</name>
      <anchorfile>class_state_timer.html</anchorfile>
      <anchor>aff21a99191a9ecd615a9c2f1d6b00433</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>SCHEDULER</name>
      <anchorfile>class_state_timer.html</anchorfile>
      <anchor>ae7da73ec9884585faf71c4fb98cc3383</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>COMMUNICATION</name>
      <anchorfile>class_state_timer.html</anchorfile>
      <anchor>a3e048c814328e52a13d340b7dcb80ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>DEAGGREGATION</name>
      <anchorfile>class_state_timer.html</anchorfile>
      <anchor>a45acafcab5311aee4a80884f402921a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::StringMetric</name>
    <filename>class_grappa_1_1_string_metric.html</filename>
    <member kind="enumvalue">
      <name>max_string_size</name>
      <anchorfile>class_grappa_1_1_string_metric.html</anchorfile>
      <anchor>ac8af632f81626fadaa6e907e3b4ac849afd6c7f8c790bfb27e380c848f2649854</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>max_string_size</name>
      <anchorfile>class_grappa_1_1_string_metric.html</anchorfile>
      <anchor>ac8af632f81626fadaa6e907e3b4ac849afd6c7f8c790bfb27e380c848f2649854</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StringMetric</name>
      <anchorfile>class_grappa_1_1_string_metric.html</anchorfile>
      <anchor>afb74447cc690cd53d967b09076b468b0</anchor>
      <arglist>(const char *name, std::string initial_value, bool reg_new=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>json</name>
      <anchorfile>class_grappa_1_1_string_metric.html</anchorfile>
      <anchor>ab1b36124f8bc5f172faf66ab5a75b32d</anchor>
      <arglist>(std::ostream &amp;o) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>class_grappa_1_1_string_metric.html</anchorfile>
      <anchor>a209598fa9774811d9077f44cf2ede550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>class_grappa_1_1_string_metric.html</anchorfile>
      <anchor>aeee722cd6e6f22069d433120fe32dcff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StringMetric *</type>
      <name>clone</name>
      <anchorfile>class_grappa_1_1_string_metric.html</anchorfile>
      <anchor>a899a6a2b0078bdb164170e634d324972</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge_all</name>
      <anchorfile>class_grappa_1_1_string_metric.html</anchorfile>
      <anchor>a4ae698a2c9f34281f2fb24500bed60ae</anchor>
      <arglist>(impl::MetricBase *static_stat_ptr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>value</name>
      <anchorfile>class_grappa_1_1_string_metric.html</anchorfile>
      <anchor>a9b5ed773fd6de7f44b75c410907b87ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const StringMetric &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_grappa_1_1_string_metric.html</anchorfile>
      <anchor>a6200e06d4961dfe7c95a35930e1363a4</anchor>
      <arglist>(std::string appended)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>class_grappa_1_1_string_metric.html</anchorfile>
      <anchor>a6a36790dfef6552c1b5571984bc2c737</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StringMetric &amp;</type>
      <name>operator=</name>
      <anchorfile>class_grappa_1_1_string_metric.html</anchorfile>
      <anchor>ac1bfbb598e30499a871d56cba04cb4e3</anchor>
      <arglist>(std::string value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>write_chars</name>
      <anchorfile>class_grappa_1_1_string_metric.html</anchorfile>
      <anchor>a34890c89add706fb92fa62eedaf71c29</anchor>
      <arglist>(char *dst, std::string newstr, std::string name=&quot;(anonymous)&quot;)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::function&lt; std::string(void)&gt;</type>
      <name>InitFn</name>
      <anchorfile>class_grappa_1_1_string_metric.html</anchorfile>
      <anchor>ac4e3eba9e860e413017e3e2ed8ecdabd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>initial_value</name>
      <anchorfile>class_grappa_1_1_string_metric.html</anchorfile>
      <anchor>a988ede063c54d9aa8bfe9c4c8161e81b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>value_</name>
      <anchorfile>class_grappa_1_1_string_metric.html</anchorfile>
      <anchor>a437aaa24b5d80fe724b38c19a757bec6</anchor>
      <arglist>[max_string_size]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InitFn</type>
      <name>initf_</name>
      <anchorfile>class_grappa_1_1_string_metric.html</anchorfile>
      <anchor>ad5f0c0e50ee9829c83df874410643f58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::SummarizingMetric</name>
    <filename>class_grappa_1_1_summarizing_metric.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>SummarizingMetric</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>ae9647ee6682a259749be2fbbc3fbc4f6</anchor>
      <arglist>(const char *name, T initial_value, bool reg_new=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SummarizingMetric</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>a582cc2ce93d5ff802e7c7c95cdb20c59</anchor>
      <arglist>(const SummarizingMetric &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>a4d3fb9081811268871d4a1d75f7a6d00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>json</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>a37190d914dbe90579ec22fb787fb3b4a</anchor>
      <arglist>(std::ostream &amp;o) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sample</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>a6c70e65a85dabbc68f86635c728f3528</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SummarizingMetric&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>aad2304749ee9d9cc9daba6336eb56fc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge_all</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>a7d0ed15d6373d316a932dd5040736ffe</anchor>
      <arglist>(impl::MetricBase *static_stat_ptr)</arglist>
    </member>
    <member kind="function">
      <type>const SummarizingMetric&lt; T &gt; &amp;</type>
      <name>count</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>a408c517150cddae915e967427e42a091</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>aaab1e4306d691abacd9d341ee3c2995e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SummarizingMetric&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>afd12f1164c9e74042f9aeb8d2fe0b422</anchor>
      <arglist>(U increment)</arglist>
    </member>
    <member kind="function">
      <type>const SummarizingMetric&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>a088ae60b9ad368275a0caf432da70217</anchor>
      <arglist>(U decrement)</arglist>
    </member>
    <member kind="function">
      <type>const SummarizingMetric&lt; T &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>a720e6dbcb5208a4fdffb470a4dea377b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SummarizingMetric&lt; T &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>ad8702953b7e9efedb71d2eebfe3b3d5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator++</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>ad7df3595b8092a25ce64d0de3b56ee39</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator--</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>a30a35a9d716ec20ef0da862bb7fb71d2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>ab2cbd7ff4a6602af63c0cbcbf0bddfa4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SummarizingMetric &amp;</type>
      <name>operator=</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>a873cea69c5d9723c08a3c4e68a2936cb</anchor>
      <arglist>(const SummarizingMetric&lt; T &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>SummarizingMetric &amp;</type>
      <name>operator=</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>a3dd3957eeaa0ae2d8b388746d764051b</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>process</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>aad14d450a380f6a8160c4f675df85298</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>variance</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>a60e3b96a7efac8c962abd8ce5f981e87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>stddev</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>a2ba6c41947b9380aae686901a912d5ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const T</type>
      <name>initial_value</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>ab7aa18a5376f98946f1f16b9bc0f48bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>value_</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>ad3fea6cfb88f8932624eec7695354e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>n</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>adc71f0a49cecff7fa2f1d1441722379f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mean</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>af993012979ebf3aacaf0b233f45f8bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>M2</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>a9fe99db66672c46aad09872f98cfba29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>min</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>ab10d8df94bcd03508253383aec668699</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>max</name>
      <anchorfile>class_grappa_1_1_summarizing_metric.html</anchorfile>
      <anchor>a726725714a2e5b310e0931208df7f490</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::SuspendedDelegate</name>
    <filename>class_grappa_1_1_suspended_delegate.html</filename>
    <base>Grappa::Worker</base>
    <member kind="function">
      <type></type>
      <name>SuspendedDelegate</name>
      <anchorfile>class_grappa_1_1_suspended_delegate.html</anchorfile>
      <anchor>a08cdc2f381c59db72d34e156d90d4e7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>class_grappa_1_1_suspended_delegate.html</anchorfile>
      <anchor>a68fd1b7fee3a1e8ec5864284aa808235</anchor>
      <arglist>(F func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SuspendedDelegate *</type>
      <name>create</name>
      <anchorfile>class_grappa_1_1_suspended_delegate.html</anchorfile>
      <anchor>a84d6a14c49e07e718b9682107c3e09b7</anchor>
      <arglist>(F f)</arglist>
    </member>
    <member kind="friend">
      <type>friend SuspendedDelegate *</type>
      <name>new_suspended_delegate</name>
      <anchorfile>class_grappa_1_1_suspended_delegate.html</anchorfile>
      <anchor>ade4117badb13bf2de41955afb71313e5</anchor>
      <arglist>(F)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>invoke</name>
      <anchorfile>class_grappa_1_1_suspended_delegate.html</anchorfile>
      <anchor>a9474db01055d13f32bb1d552f690de87</anchor>
      <arglist>(SuspendedDelegate *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::SuspendedDelegateQueue</name>
    <filename>class_grappa_1_1_suspended_delegate_queue.html</filename>
    <member kind="function">
      <type></type>
      <name>SuspendedDelegateQueue</name>
      <anchorfile>class_grappa_1_1_suspended_delegate_queue.html</anchorfile>
      <anchor>ae11b9ca3f0475ee225d52ca00b9d6fb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>class_grappa_1_1_suspended_delegate_queue.html</anchorfile>
      <anchor>aa4b6659fb5f0913bff9d5ceb392ee8e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>class_grappa_1_1_suspended_delegate_queue.html</anchorfile>
      <anchor>acd8905f4a20affa6936fe2d5fd6e0588</anchor>
      <arglist>(SuspendedDelegate *c)</arglist>
    </member>
    <member kind="function">
      <type>SuspendedDelegate *</type>
      <name>pop</name>
      <anchorfile>class_grappa_1_1_suspended_delegate_queue.html</anchorfile>
      <anchor>acc6a3182a929ce9d15c515142b809b9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>class_grappa_1_1_suspended_delegate_queue.html</anchorfile>
      <anchor>ac13ea0336c907ef1b3d0893b29423d37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>blocked</name>
      <anchorfile>class_grappa_1_1_suspended_delegate_queue.html</anchorfile>
      <anchor>a523a12ad0ee25e58ac8fdd9e4943655e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SuspendedDelegate *</type>
      <name>head</name>
      <anchorfile>class_grappa_1_1_suspended_delegate_queue.html</anchorfile>
      <anchor>a04988f9dc91c06ccc6bc769d0573e343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SuspendedDelegate *</type>
      <name>tail</name>
      <anchorfile>class_grappa_1_1_suspended_delegate_queue.html</anchorfile>
      <anchor>a48e43e3db5d4c7605997edbb75e4b567</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::ThreadQueue</name>
    <filename>class_grappa_1_1_thread_queue.html</filename>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump</name>
      <anchorfile>class_grappa_1_1_thread_queue.html</anchorfile>
      <anchor>aeda829d4e824bc9c9c6a56f90a0f38b8</anchor>
      <arglist>(std::ostream &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadQueue</name>
      <anchorfile>class_grappa_1_1_thread_queue.html</anchorfile>
      <anchor>a595fd22647d26b035d18b1409f000db1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enqueue</name>
      <anchorfile>class_grappa_1_1_thread_queue.html</anchorfile>
      <anchor>aafc53d114205859f7274225fa09eae9f</anchor>
      <arglist>(Worker *t)</arglist>
    </member>
    <member kind="function">
      <type>Worker *</type>
      <name>dequeue</name>
      <anchorfile>class_grappa_1_1_thread_queue.html</anchorfile>
      <anchor>a9ebc1076bc473e90862806ca8d16f89d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Worker *</type>
      <name>dequeueLazy</name>
      <anchorfile>class_grappa_1_1_thread_queue.html</anchorfile>
      <anchor>a77f57053ecc0de4275ccad5e869f33c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Worker *</type>
      <name>front</name>
      <anchorfile>class_grappa_1_1_thread_queue.html</anchorfile>
      <anchor>aed903dc350a14bb33483528979f36fe1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prefetch</name>
      <anchorfile>class_grappa_1_1_thread_queue.html</anchorfile>
      <anchor>a10f7ec679b3ea465be4b7e316cebd5b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>length</name>
      <anchorfile>class_grappa_1_1_thread_queue.html</anchorfile>
      <anchor>aa0f489a1cb431833fc0d3368a2f43816</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>class_grappa_1_1_thread_queue.html</anchorfile>
      <anchor>a40835d056ec0eee8e6b82c869e48bc54</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TotalMetric</name>
    <filename>class_total_metric.html</filename>
    <member kind="function">
      <type></type>
      <name>TotalMetric</name>
      <anchorfile>class_total_metric.html</anchorfile>
      <anchor>af5146a00936603df5704e9ebb4970c52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>class_total_metric.html</anchorfile>
      <anchor>a290b3d89af7d64346428e9485f0027d1</anchor>
      <arglist>(const TotalMetric &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>class_total_metric.html</anchorfile>
      <anchor>a49cf52ffd640a8623224e0b7d406e8cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>class_total_metric.html</anchorfile>
      <anchor>a24c4e5b429eeaa56e71f67f93a4516ad</anchor>
      <arglist>(uint64_t val)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>getTotal</name>
      <anchorfile>class_total_metric.html</anchorfile>
      <anchor>afef76e893239c53aac98217e990b40dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>getMax</name>
      <anchorfile>class_total_metric.html</anchorfile>
      <anchor>a95ce82e54a8db6f92ddf3cb27024cac3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStddev</name>
      <anchorfile>class_total_metric.html</anchorfile>
      <anchor>aa114dc0ef7ca3c65d5e4dd1246b11e73</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::TupleGraph</name>
    <filename>class_grappa_1_1_tuple_graph.html</filename>
    <class kind="struct">Grappa::TupleGraph::Edge</class>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>class_grappa_1_1_tuple_graph.html</anchorfile>
      <anchor>a03f738a0dd826daf42268d179738f8ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TupleGraph</name>
      <anchorfile>class_grappa_1_1_tuple_graph.html</anchorfile>
      <anchor>aff9c79c29f2509f7d85b54f989836ea0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TupleGraph</name>
      <anchorfile>class_grappa_1_1_tuple_graph.html</anchorfile>
      <anchor>acd6c3ff887147510b32c34786560faae</anchor>
      <arglist>(const TupleGraph &amp;tg)</arglist>
    </member>
    <member kind="function">
      <type>TupleGraph &amp;</type>
      <name>operator=</name>
      <anchorfile>class_grappa_1_1_tuple_graph.html</anchorfile>
      <anchor>ac14d38e0f8d50f1a18d0c9b1ddffb3fd</anchor>
      <arglist>(const TupleGraph &amp;tg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>class_grappa_1_1_tuple_graph.html</anchorfile>
      <anchor>ab05a665a1ccdb5827d19e2235e51c9fb</anchor>
      <arglist>(std::string path, std::string format)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TupleGraph</type>
      <name>Kronecker</name>
      <anchorfile>class_grappa_1_1_tuple_graph.html</anchorfile>
      <anchor>a57a53ddd9e6fa8a9fa9b732718c795ae</anchor>
      <arglist>(int scale, int64_t desired_nedge, uint64_t seed1, uint64_t seed2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TupleGraph</type>
      <name>Load</name>
      <anchorfile>class_grappa_1_1_tuple_graph.html</anchorfile>
      <anchor>a0a7fdfb7762f47223b70b2c460b55344</anchor>
      <arglist>(std::string path, std::string format)</arglist>
    </member>
    <member kind="variable">
      <type>GlobalAddress&lt; Edge &gt;</type>
      <name>edges</name>
      <anchorfile>class_grappa_1_1_tuple_graph.html</anchorfile>
      <anchor>ad72914e7688a6aaf012ef6ac07911fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>nedge</name>
      <anchorfile>class_grappa_1_1_tuple_graph.html</anchorfile>
      <anchor>a10c17e0120fb880c482e6d15e25cc5ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TupleGraph</name>
      <anchorfile>class_grappa_1_1_tuple_graph.html</anchorfile>
      <anchor>a35984aaaa283a1d2206d91f74defc949</anchor>
      <arglist>(int64_t nedge)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Grappa::Worker</name>
    <filename>class_grappa_1_1_worker.html</filename>
    <member kind="function">
      <type></type>
      <name>Worker</name>
      <anchorfile>class_grappa_1_1_worker.html</anchorfile>
      <anchor>a9080d70de04490eafd1ab8b0a97e9596</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>intptr_t</type>
      <name>stack_remaining</name>
      <anchorfile>class_grappa_1_1_worker.html</anchorfile>
      <anchor>a40d684c5bfee458552f70b2094168718</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prefetch</name>
      <anchorfile>class_grappa_1_1_worker.html</anchorfile>
      <anchor>adf980e658af50fe795df091dbf89b5a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>stack</name>
      <anchorfile>class_grappa_1_1_worker.html</anchorfile>
      <anchor>ad2200328f29cea49c5fbf33ac8501fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Worker *</type>
      <name>next</name>
      <anchorfile>class_grappa_1_1_worker.html</anchorfile>
      <anchor>ad63711108e728a503b39db3860ad6e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>running</name>
      <anchorfile>class_grappa_1_1_worker.html</anchorfile>
      <anchor>a328601ef480d58a68a221257ee9bddd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>suspended</name>
      <anchorfile>class_grappa_1_1_worker.html</anchorfile>
      <anchor>a18e9a71d5e3c6c532ff2b49c34d52255</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>idle</name>
      <anchorfile>class_grappa_1_1_worker.html</anchorfile>
      <anchor>a335b02f30e3913e3ee437181189204e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int8_t</type>
      <name>run_state_raw_</name>
      <anchorfile>class_grappa_1_1_worker.html</anchorfile>
      <anchor>a141023722336570203ca2def704d3801</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scheduler *</type>
      <name>sched</name>
      <anchorfile>class_grappa_1_1_worker.html</anchorfile>
      <anchor>aabc94f14fdcd4108823453b8bfb362ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>done</name>
      <anchorfile>class_grappa_1_1_worker.html</anchorfile>
      <anchor>a3517d72c2f434efe999607c7890a0633</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>base</name>
      <anchorfile>class_grappa_1_1_worker.html</anchorfile>
      <anchor>aceae0f21375b7bdcf167e1f5d19874e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>ssize</name>
      <anchorfile>class_grappa_1_1_worker.html</anchorfile>
      <anchor>a0c57cefbfdfca226b5a288e9c05bae0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>threadid_t</type>
      <name>id</name>
      <anchorfile>class_grappa_1_1_worker.html</anchorfile>
      <anchor>a1d811b17625d3d0db3b12d557d96a539</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Worker *</type>
      <name>tracking_prev</name>
      <anchorfile>class_grappa_1_1_worker.html</anchorfile>
      <anchor>af7b11b77ed5c61a2ef333f97cc4813a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Worker *</type>
      <name>tracking_next</name>
      <anchorfile>class_grappa_1_1_worker.html</anchorfile>
      <anchor>a28ef03ba0ed951eadfd451e269ca08f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>bittwiddle</name>
    <filename>namespacebittwiddle.html</filename>
    <member kind="function">
      <type>T</type>
      <name>signextend</name>
      <anchorfile>namespacebittwiddle.html</anchorfile>
      <anchor>afebb4c99f1d34f8cb2b9bce7ebecf8e5</anchor>
      <arglist>(const T x)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>log2</name>
      <anchorfile>namespacebittwiddle.html</anchorfile>
      <anchor>a1d453d84d1758d489e754c23ed67081d</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>google</name>
    <filename>namespacegoogle.html</filename>
    <member kind="typedef">
      <type>void(*</type>
      <name>override_handler_t</name>
      <anchorfile>namespacegoogle.html</anchorfile>
      <anchor>a16ee460593cad2f219a4c03d9baf6597</anchor>
      <arglist>)(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OverrideDefaultSignalHandler</name>
      <anchorfile>namespacegoogle.html</anchorfile>
      <anchor>a316845d394d240007f9b36ae0b66fff6</anchor>
      <arglist>(override_handler_t handler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DumpStackTrace</name>
      <anchorfile>namespacegoogle.html</anchorfile>
      <anchor>a11ddcfa7e057d4868331aca1f55bd865</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Grappa</name>
    <filename>namespace_grappa.html</filename>
    <namespace>Grappa::delegate</namespace>
    <namespace>Grappa::Metrics</namespace>
    <namespace>Grappa::SharedMessagePool</namespace>
    <namespace>Grappa::util</namespace>
    <class kind="struct">Grappa::AdjIterator</class>
    <class kind="class">Grappa::BasicScheduler</class>
    <class kind="class">Grappa::CallbackMetric</class>
    <class kind="class">Grappa::CompletionEvent</class>
    <class kind="struct">Grappa::CompletionTarget</class>
    <class kind="class">Grappa::ConditionVariable</class>
    <class kind="class">Grappa::CountingSemaphore</class>
    <class kind="struct">Grappa::Empty</class>
    <class kind="class">Grappa::ExternalCountPayloadMessage</class>
    <class kind="struct">Grappa::File</class>
    <class kind="class">Grappa::FlatCombiner</class>
    <class kind="class">Grappa::FullEmpty</class>
    <class kind="class">Grappa::GlobalBag</class>
    <class kind="class">Grappa::GlobalCompletionEvent</class>
    <class kind="class">Grappa::GlobalCounter</class>
    <class kind="class">Grappa::GlobalHashMap</class>
    <class kind="class">Grappa::GlobalHashSet</class>
    <class kind="class">Grappa::GlobalVector</class>
    <class kind="struct">Grappa::Graph</class>
    <class kind="class">Grappa::HistogramMetric</class>
    <class kind="struct">Grappa::IODescriptor</class>
    <class kind="class">Grappa::MaxMetric</class>
    <class kind="class">Grappa::Message</class>
    <class kind="class">Grappa::MessagePool</class>
    <class kind="class">Grappa::MessagePoolStatic</class>
    <class kind="class">Grappa::Mutex</class>
    <class kind="class">Grappa::PayloadMessage</class>
    <class kind="class">Grappa::PoolAllocator</class>
    <class kind="class">Grappa::PoolAllocatorInternal</class>
    <class kind="class">Grappa::PrefetchingThreadQueue</class>
    <class kind="class">Grappa::ReuseMessage</class>
    <class kind="class">Grappa::ReuseMessageList</class>
    <class kind="class">Grappa::Scheduler</class>
    <class kind="class">Grappa::StringMetric</class>
    <class kind="class">Grappa::SummarizingMetric</class>
    <class kind="class">Grappa::SuspendedDelegate</class>
    <class kind="class">Grappa::SuspendedDelegateQueue</class>
    <class kind="class">Grappa::ThreadQueue</class>
    <class kind="class">Grappa::TupleGraph</class>
    <class kind="class">Grappa::Worker</class>
    <member kind="typedef">
      <type>int64_t</type>
      <name>VertexID</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>gaba4880159fa2d1b4192538c5eee688fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; impl::MetricBase * &gt;</type>
      <name>MetricList</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a1b13a76f91c8d699d04a57ca34c9f206</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Core</type>
      <name>Core</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a2d83baf92a7c7db4fe0db5a99b72ffc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int64_t</type>
      <name>Timestamp</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>af14b6d972703cb9a89e4160362cf0d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TaskMode</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>ac6ade1fca200baa13c39fe78703897b9</anchor>
      <arglist></arglist>
      <enumvalue file="namespace_grappa.html" anchor="ac6ade1fca200baa13c39fe78703897b9a685d1f2146dd079015e81918414e8971">Bound</enumvalue>
      <enumvalue file="namespace_grappa.html" anchor="ac6ade1fca200baa13c39fe78703897b9aedac80248b7bf68ccfaa9c78bfb81c32">Unbound</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SyncMode</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a1eb494aa98f6908538488b8d98cdbc7a</anchor>
      <arglist></arglist>
      <enumvalue file="namespace_grappa.html" anchor="a1eb494aa98f6908538488b8d98cdbc7aabd0ca6be53b0f3d2886fd53fcb52574e">Blocking</enumvalue>
      <enumvalue file="namespace_grappa.html" anchor="a1eb494aa98f6908538488b8d98cdbc7aa24aa4117da86c41684ad25742832dfa6">Async</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FCStatus</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>acb42d77875bd5cf444f1f3160ca5db76</anchor>
      <arglist></arglist>
      <enumvalue file="namespace_grappa.html" anchor="acb42d77875bd5cf444f1f3160ca5db76ad9bdb7f467982d4a285d4e65baf771fc">SATISFIED</enumvalue>
      <enumvalue file="namespace_grappa.html" anchor="acb42d77875bd5cf444f1f3160ca5db76aeecba0068950a2df17c47e851e1eef14">BLOCKED</enumvalue>
      <enumvalue file="namespace_grappa.html" anchor="acb42d77875bd5cf444f1f3160ca5db76ac568b03df166c70fa975411ac9400645">MATCHED</enumvalue>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memset</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>gac5a9df86f535f81420219d9dfcab5584</anchor>
      <arglist>(GlobalAddress&lt; T &gt; base, S value, size_t count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memset</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>gadf1e28a91749a97c58d6b1db21d2d607</anchor>
      <arglist>(T *base, S value, size_t count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memcpy</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>ga8b39e2df966b32aea640b93e3c5b502c</anchor>
      <arglist>(GlobalAddress&lt; T &gt; dst, GlobalAddress&lt; T &gt; src, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memcpy</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>ga203f1b78785e927f8cb1fbfe262de33e</anchor>
      <arglist>(T *dst, T *src, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memcpy&lt; void &gt;</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>ga66050c7210e15962b855d514842c3a88</anchor>
      <arglist>(void *dst, void *src, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memcpy_async</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>ga97ac566b2b1886d9c51123ddd9a2eede</anchor>
      <arglist>(GlobalAddress&lt; T &gt; dst, GlobalAddress&lt; T &gt; src, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prefix_sum</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>ga257b0d2c3a3432a0f1f8c6037390e3d2</anchor>
      <arglist>(GlobalAddress&lt; T &gt; array, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>barrier</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gab6c76d75bef0d7b03eb1b9b8ded580d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call_on_all_cores</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>ga34aff137286f631648c195112fcfb8ad</anchor>
      <arglist>(F work)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_all_cores</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gac74a2d7ffb5b36ec6833ebfc54c16841</anchor>
      <arglist>(F work)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>allreduce</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gaf8f3fd1aa6b179823dde8e88dab682f8</anchor>
      <arglist>(T myval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allreduce_inplace</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gabd3ee93956b1a6047d45d2e93f2e0b1e</anchor>
      <arglist>(T *array, size_t nelem=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reduce</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gaacc2618bb00fc9fbbf6b154a9258d18a</anchor>
      <arglist>(const T *global_ptr)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reduce</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gaf13e242540fe6c651385acaf94d42c83</anchor>
      <arglist>(GlobalAddress&lt; T &gt; localizable)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reduce</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gaed4325271e72af888ce395fba4ca1380</anchor>
      <arglist>(GlobalAddress&lt; P &gt; localizable)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sum_all_cores</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gaf37d649567600743d463fb077cc2c6d8</anchor>
      <arglist>(F func) -&gt; decltype(func())</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>walltime</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a10cafc5a51b1eefe09225ca90dd79efb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>typename_of</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gafcbdfaa9de31d679a52eda38a521cec5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>typename_of</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga3d051099836ebef97277941196c527eb</anchor>
      <arglist>(const T &amp;unused)</arglist>
    </member>
    <member kind="function">
      <type>const Core</type>
      <name>cores</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga555f2bf877bea827ace1d7c969b763f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Core</type>
      <name>mycore</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gad7a90083b28f17590bdcb069172f33f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Core</type>
      <name>locale_cores</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga267489699cd07db87caa07c9784dbac5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Core</type>
      <name>locale_mycore</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga807b9abe099d881ca3b479a1ff95a514</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Locale</type>
      <name>locales</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga530158645b7b2b52a268daedf44d0fd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Locale</type>
      <name>mylocale</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga25ad3b51e8430df89259e1c65526e2e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Locale</type>
      <name>locale_of</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gaebb0c9c0eb25b74767305df3ae81915a</anchor>
      <arglist>(Core c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complete</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gad0f5511c9e55d6d5cd3add33bf00d527</anchor>
      <arglist>(CompletionType *ce)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complete</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga4ba30941b3c166c8eeeee3d31a438d35</anchor>
      <arglist>(GlobalAddress&lt; CompletionEvent &gt; ce, int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enroll</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga10fe6e2ee5bf5a8d8e9f9fd11dfee5cb</anchor>
      <arglist>(GlobalAddress&lt; CompletionEvent &gt; ce, int64_t incr=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gad28a884076dc9b8914e694d245b03bf8</anchor>
      <arglist>(CompletionEvent *ce, TF tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga0e49ee2c2ae50e793e427b0fcfa842f9</anchor>
      <arglist>(GlobalAddress&lt; ConditionVariable &gt; m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signal</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gabcf3b681a173156001dc47e12c081de9</anchor>
      <arglist>(const GlobalAddress&lt; ConditionVariable &gt; m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signal_all</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga37a246c9cb77c17a88a376ce83bbcb93</anchor>
      <arglist>(GlobalAddress&lt; ConditionVariable &gt; m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_waiter</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga32f0284539cca3dc00915931b86a1cb3</anchor>
      <arglist>(ConditionVariable *cv, Worker *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga4241b1cbe305caf3ca08d2fea8468edf</anchor>
      <arglist>(ConditionVariable *cv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signal</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga6f13ef84c9e8693d675d10428cf6c776</anchor>
      <arglist>(ConditionVariable *cv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broadcast</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga7cf72c5ef30262df14f5406d790dc798</anchor>
      <arglist>(ConditionVariable *cv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawnRemote</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gac3b9a55615b0754717c2b20ef63044c2</anchor>
      <arglist>(Core dest, F f)</arglist>
    </member>
    <member kind="function">
      <type>Grappa::ExternalCountPayloadMessage Grappa::PayloadMessage</type>
      <name>__attribute__</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a6e66347e169115ff06e527ad77c2e321</anchor>
      <arglist>((aligned(64)))</arglist>
    </member>
    <member kind="function">
      <type>ExternalCountPayloadMessage&lt; T &gt; *</type>
      <name>send_heap_message</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>ac841f71522852e7708be1cc644f3eb2a</anchor>
      <arglist>(Core dest, T t, void *payload, size_t payload_size, uint64_t *count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_array</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga28fe44710a582b4534c81eef84596476</anchor>
      <arglist>(File &amp;f, GlobalAddress&lt; T &gt; array, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_array</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga2723b0cec7b9cdd83715bc383bbeb310</anchor>
      <arglist>(File &amp;f, bool asDirectory, GlobalAddress&lt; T &gt; array, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_array_unordered</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gaa36ea6df58c48bf54c2fd59547c890e0</anchor>
      <arglist>(std::string filename, GlobalAddress&lt; T &gt; array, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_array_unordered</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga3d61348ea7920b020f10f2ec89cd18d2</anchor>
      <arglist>(std::string filename, GlobalAddress&lt; T &gt; array, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill_remote</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga08cc992debd2459c04c2412361cb72f7</anchor>
      <arglist>(GlobalAddress&lt; FullEmpty&lt; T &gt;&gt; result_addr, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readFF</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga9cef2af61c52a6bea65625de747ca8b3</anchor>
      <arglist>(GlobalAddress&lt; FullEmpty&lt; T &gt;&gt; fe_addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeXF</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga27dbd4448ca94a3d7b58759f4288c6e6</anchor>
      <arglist>(GlobalAddress&lt; FullEmpty&lt; T &gt;&gt; fe_addr, const U &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>writeXF</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gad306de5c289de2f249e814551a62d85b</anchor>
      <arglist>(FullEmpty&lt; T &gt; *fe_addr, T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>writeEF</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga63f6c01b0bc1fbb8f3a8b01177257bca</anchor>
      <arglist>(FullEmpty&lt; T &gt; *fe_addr, T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>writeFF</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga952c1e020c17e0264d3d738df66f3f8e</anchor>
      <arglist>(FullEmpty&lt; T &gt; *fe_addr, T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readXX</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gacb97e74af74ce0b9b664ea681d8f9b91</anchor>
      <arglist>(FullEmpty&lt; T &gt; *fe_addr)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readFF</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga38a19bdec882607fc363f0880fe6b954</anchor>
      <arglist>(FullEmpty&lt; T &gt; *fe_addr)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readFE</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga25fe08f26290a226f10c329e1102a5b6</anchor>
      <arglist>(FullEmpty&lt; T &gt; *fe_addr)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>global_alloc</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>af74993efb7bbea33d4e7e79953502cf1</anchor>
      <arglist>(size_t count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>global_free</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a0b29dfddf8e0c5d3c912565a0b1db6d0</anchor>
      <arglist>(GlobalAddress&lt; T &gt; address)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>symmetric_global_alloc</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a4d7e988484354f73edd1d56c5c07f7e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forall</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a1ed4d8834b19ab66a22aebe5b92fd186</anchor>
      <arglist>(GlobalAddress&lt; GlobalBag&lt; T &gt;&gt; b, F body)</arglist>
    </member>
    <member kind="function">
      <type>CompletionTarget</type>
      <name>enroll</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga07bd1fb10deeb37fdaec5d0494be0d8a</anchor>
      <arglist>(GlobalAddress&lt; GlobalCompletionEvent &gt; ce, int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complete</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga6537761b39f5595a3d754483061a763c</anchor>
      <arglist>(GlobalAddress&lt; GlobalCompletionEvent &gt; ce, int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn</name>
      <anchorfile>group___tasking.html</anchorfile>
      <anchor>ga870395edc072b708200abb3d2e58bd04</anchor>
      <arglist>(TF tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>ae60d424e890e6dfc18f880b28b168127</anchor>
      <arglist>(F f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a86e9ff5650d22dfcf9226405071ee337</anchor>
      <arglist>(GlobalAddress&lt; GlobalHashMap&lt; K, V &gt;&gt; self, K key, F on_insert)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forall</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a1c507e85501aa5a02cee9c2dae4912fe</anchor>
      <arglist>(GlobalAddress&lt; GlobalHashMap&lt; T, V &gt;&gt; self, F visit)</arglist>
    </member>
    <member kind="function">
      <type>AdjIterator&lt; G &gt;</type>
      <name>adj</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>ga6c416928a252552a745cd34526ecbf65</anchor>
      <arglist>(GlobalAddress&lt; G &gt; g, typename G::Vertex &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>AdjIterator&lt; G &gt;</type>
      <name>adj</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>ga54fb566e36dd360c4c595119840be672</anchor>
      <arglist>(GlobalAddress&lt; G &gt; g, GlobalAddress&lt; typename G::Vertex &gt; v)</arglist>
    </member>
    <member kind="function">
      <type>AdjIterator&lt; G &gt;</type>
      <name>adj</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>gad77bb4adddd0480478286d854c059aef</anchor>
      <arglist>(GlobalAddress&lt; G &gt; g, VertexID i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OVERLOAD</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>ga6c5d34aaf9546af9ce313a801e5934c4</anchor>
      <arglist>(SyncMode S=SyncMode::Blocking, GlobalCompletionEvent *C=&amp;impl::local_gce, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OVERLOAD</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>ga6ab22aa2cf82e7d4a56b4986263df8ac</anchor>
      <arglist>(GlobalCompletionEvent *C, SyncMode S=SyncMode::Blocking, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serial_for</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>ga1ba15c6220aea3dc5b3efbf1fdd795a2</anchor>
      <arglist>(AdjIterator&lt; G &gt; a, F body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forall</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>gac20551e77df87ef6621f445a2eb52159</anchor>
      <arglist>(GlobalAddress&lt; Graph&lt; V, E &gt;&gt; g, F loop_body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>local_load_bintsv4</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a7256570ad424f9fb6a03b901280f192f</anchor>
      <arglist>(const char *filename, Grappa::TupleGraph::Edge *local_ptr, Grappa::TupleGraph::Edge *local_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>local_save_bintsv4</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a427e092a084e1dedae14353d8bb054a1</anchor>
      <arglist>(const char *filename, Grappa::TupleGraph::Edge *local_ptr, Grappa::TupleGraph::Edge *local_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>local_save_tsv</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>ab66563762ea551cb86f0f4bf199cb4be</anchor>
      <arglist>(const char *filename, Grappa::TupleGraph::Edge *local_ptr, Grappa::TupleGraph::Edge *local_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>global_heap_init</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a74fc633986a2fc14a1df80d3efc79d61</anchor>
      <arglist>(size_t init_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>af7b60a124d5f39fd448e002fa2a3e11f</anchor>
      <arglist>(int *argc_p, char **argv_p[], int64_t size=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>finalize</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a661c56b3ed1f67b0ae3228e67a738380</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>locale_alloc</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga513650f0aa54bcb773e4d661ce46c775</anchor>
      <arglist>(size_t n=1)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>locale_alloc_aligned</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga61d5d896a65487f41e9a7533288ec660</anchor>
      <arglist>(size_t alignment, size_t n=1)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>locale_new</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>gab40a94f8698c8ad032dab7cf67cc26cf</anchor>
      <arglist>(Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>locale_new</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga05e445a68ba363b9639c11ffcc9c8373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>locale_new_array</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga43aafa32c14634d7f6f7faf54ed5c1c3</anchor>
      <arglist>(size_t n=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>locale_free</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>gaa4a3a0de4cfe636ab80665337cc8d7b0</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>Grappa::Message Grappa::impl::MessageBase</type>
      <name>__attribute__</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gacabc44d6011d9326224811e47a96a6ef</anchor>
      <arglist>((aligned(64)))</arglist>
    </member>
    <member kind="function">
      <type>Grappa::PayloadMessage Grappa::impl::MessageBase</type>
      <name>__attribute__</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>gacabc44d6011d9326224811e47a96a6ef</anchor>
      <arglist>((aligned(64)))</arglist>
    </member>
    <member kind="function">
      <type>Message&lt; T &gt;</type>
      <name>message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga1b0faf3e8ee3ef69117c14c5d4547396</anchor>
      <arglist>(Core dest, T t)</arglist>
    </member>
    <member kind="function">
      <type>PayloadMessage&lt; T &gt;</type>
      <name>message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gab3bb6fb2dcd4b3e39012d2bdbb475267</anchor>
      <arglist>(Core dest, T t, void *payload, size_t payload_size)</arglist>
    </member>
    <member kind="function">
      <type>Message&lt; T &gt;</type>
      <name>send_message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga528d3be2db6c7577613bba8b60bf01d3</anchor>
      <arglist>(Core dest, T t)</arglist>
    </member>
    <member kind="function">
      <type>PayloadMessage&lt; T &gt;</type>
      <name>send_message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga6e65f7faed0d5d92611442f9b46cb3e8</anchor>
      <arglist>(Core dest, T t, void *payload, size_t payload_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a81c7e266c2e554a1d10e104046d29ac2</anchor>
      <arglist>(Mutex *t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trylock</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a2975c4b14aa78038878b3eaa92814c18</anchor>
      <arglist>(Mutex *t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_unlocked</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a0146884e44ffee06c1d1b5707abe05d7</anchor>
      <arglist>(Mutex *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a78c4f1011c916cae114063a5d10d8986</anchor>
      <arglist>(Mutex *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>aef028f67a25fc24e4af7c1b864505f61</anchor>
      <arglist>(GlobalAddress&lt; Mutex &gt; m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trylock</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a518b56ccfeecd7415bf2964888061023</anchor>
      <arglist>(GlobalAddress&lt; Mutex &gt; m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a02cf76a15f014e47a2766912301baf61</anchor>
      <arglist>(GlobalAddress&lt; Mutex &gt; m)</arglist>
    </member>
    <member kind="function">
      <type>GlobalCompletionEvent &amp;</type>
      <name>default_gce</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga13d0c5158646eeaac0bdcbe406abffe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forall_here</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gabbb9de70beb4444082d136d65c1ad22a</anchor>
      <arglist>(int64_t start, int64_t iters, F loop_body)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_HERE_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga52fb488a99dbaa95c3b9d02bd3f6afc2</anchor>
      <arglist>(TaskMode B, SyncMode S=SyncMode::Blocking, GlobalCompletionEvent *GCE=nullptr, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_HERE_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga6b706f6f75a9db4ad7c563aaddcab2a4</anchor>
      <arglist>(SyncMode S, GlobalCompletionEvent *GCE, TaskMode B=TaskMode::Bound, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_HERE_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga3d9ca6ee1346a410f561463173d54d20</anchor>
      <arglist>(SyncMode S, GlobalCompletionEvent *GCE, int64_t Threshold, TaskMode B=TaskMode::Bound)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_HERE_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gaabdbef5ebe07bd8e56ffb499e5f83bf0</anchor>
      <arglist>(GlobalCompletionEvent *GCE, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG, TaskMode B=TaskMode::Bound, SyncMode S=SyncMode::Blocking)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_HERE_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gab9fa3386ab8032333b1e9bc2ccd1a54b</anchor>
      <arglist>(int64_t Threshold, GlobalCompletionEvent *GCE=nullptr, TaskMode B=TaskMode::Bound, SyncMode S=SyncMode::Blocking)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga46e720d695f9b662f0f78724838417e0</anchor>
      <arglist>(TaskMode B=TaskMode::Bound, SyncMode S=SyncMode::Blocking, GlobalCompletionEvent *C=&amp;impl::local_gce, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga53f1a7c4703aae6e51f8d1ed6a2ce7fa</anchor>
      <arglist>(SyncMode S, TaskMode B=TaskMode::Bound, GlobalCompletionEvent *C=&amp;impl::local_gce, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga80c2d6b9782cc07da723a36929dbe996</anchor>
      <arglist>(GlobalCompletionEvent *C, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG, TaskMode B=TaskMode::Bound, SyncMode S=SyncMode::Blocking)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gac78f2e294c32a361e93bb3d1aec4cb66</anchor>
      <arglist>(int64_t Threshold, GlobalCompletionEvent *C=&amp;impl::local_gce, TaskMode B=TaskMode::Bound, SyncMode S=SyncMode::Blocking)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga4c51943d29119ebd9c68e580d7d6061f</anchor>
      <arglist>(TaskMode B, GlobalCompletionEvent *C, SyncMode S=SyncMode::Blocking, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Core, Core &gt;</type>
      <name>cores_with_elements</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gae0930fb0b5ce9c40ceb40f26e5c3be4a</anchor>
      <arglist>(GlobalAddress&lt; T &gt; base, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_cores_localized_async</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gadf2bb62c4a3ba1ae301a59dbec04cda7</anchor>
      <arglist>(GlobalAddress&lt; T &gt; base, int64_t nelems, F do_on_core)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forall</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gaaa1df0d48a6d67442b59fc06c16e9c33</anchor>
      <arglist>(GlobalAddress&lt; T &gt; base, int64_t nelems, F loop_body)</arglist>
    </member>
    <member kind="function">
      <type>Grappa::ReuseMessage Grappa::Message</type>
      <name>__attribute__</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>gacabc44d6011d9326224811e47a96a6ef</anchor>
      <arglist>((aligned(64)))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga0ea422ccad00a9098e197c9e8c9951db</anchor>
      <arglist>(Semaphore *s, int64_t incr=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrement</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga440cce540d8b12c421c3c48c133c8ab8</anchor>
      <arglist>(Semaphore *s, int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_decrement</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga80fcd0303be8f096417ed05a4f46cb78</anchor>
      <arglist>(Semaphore *s, int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>get_value</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gaaa921e944ca0d46b3cd144add50d273b</anchor>
      <arglist>(Semaphore *s)</arglist>
    </member>
    <member kind="function">
      <type>Message&lt; T &gt; *</type>
      <name>heap_message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga02e73aabbd5b68bc579361d6373abae1</anchor>
      <arglist>(Core dest, T t)</arglist>
    </member>
    <member kind="function">
      <type>PayloadMessage&lt; T &gt; *</type>
      <name>heap_message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga4037ea3ff68f1f75cca95bbc4265d0bd</anchor>
      <arglist>(Core dest, T t, void *payload, size_t payload_size)</arglist>
    </member>
    <member kind="function">
      <type>Message&lt; T &gt; *</type>
      <name>send_heap_message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gae63d3f9cc55e63791365cd2d1811aa29</anchor>
      <arglist>(Core dest, T t)</arglist>
    </member>
    <member kind="function">
      <type>PayloadMessage&lt; T &gt; *</type>
      <name>send_heap_message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga0b75498515ae24362c7ae4f383d7a7d3</anchor>
      <arglist>(Core dest, T t, void *payload, size_t payload_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invoke</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a71018ba89353f75b1a4159b95295b801</anchor>
      <arglist>(SuspendedDelegate *c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_suspended_delegate</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a695f264ea02b232ac3a716f1cb919567</anchor>
      <arglist>(Worker *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>privateTask</name>
      <anchorfile>group___tasking.html</anchorfile>
      <anchor>gaf80429bfcdf0167257fdc0fcc02842fb</anchor>
      <arglist>(TF tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>publicTask</name>
      <anchorfile>group___tasking.html</anchorfile>
      <anchor>gac76febfd95f119e47f8d2b77ba779669</anchor>
      <arglist>(TF tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_worker</name>
      <anchorfile>group___tasking.html</anchorfile>
      <anchor>ga1de878db1bbbe31c277e36f9ca7bee47</anchor>
      <arglist>(TF &amp;&amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn</name>
      <anchorfile>group___tasking.html</anchorfile>
      <anchor>gafa22065aa5dcd33b21d43655c8e27d0a</anchor>
      <arglist>(F f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>group___tasking.html</anchorfile>
      <anchor>ga1fa04570855ffc3d360a5264f950eb24</anchor>
      <arglist>(FP fp)</arglist>
    </member>
    <member kind="function">
      <type>Worker *</type>
      <name>current_worker</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gad7f339c8363a6361960ecbc10d9c7a33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ConditionVariable</type>
      <name>barrier_cv</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a46d200566e9346ab9bd22e9cb2680cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct Grappa::File</type>
      <name>__attribute__</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gadd65fbbf5adaf182e37952d3d6618567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IODescriptor *</type>
      <name>aio_completed_stack</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gae02ceb162ea993d1710f3095058229f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>class Grappa::GlobalBag</type>
      <name>GRAPPA_BLOCK_ALIGNED</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>gabbe1235a6aa33dbc8145efff8a0c4cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Core</type>
      <name>MASTER</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>gae214c4f2d33524de8eb8bc336d6f6a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>tick_rate</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a8147fe9eb5940e2516172fe70e6000ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Worker *</type>
      <name>master_thread</name>
      <anchorfile>namespace_grappa.html</anchorfile>
      <anchor>a3e3907937e4e1aca6bc5019ec38687e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Grappa::delegate</name>
    <filename>namespace_grappa_1_1delegate.html</filename>
    <class kind="class">Grappa::delegate::FetchAddCombiner</class>
    <class kind="class">Grappa::delegate::Promise</class>
    <member kind="function">
      <type>auto</type>
      <name>call</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>ga9314cb77365ab51d6fe4772c611921bc</anchor>
      <arglist>(Core dest, F f) -&gt; AUTO_INVOKE((impl::Specializer&lt; S, C, F &gt;::call(dest, f,&amp;F::operator())))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>call</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gab06aabe93dc0639eb0fe5f7108264ff2</anchor>
      <arglist>(GlobalAddress&lt; T &gt; t, F func) -&gt; AUTO_INVOKE((impl::call&lt; S, C &gt;(t, func,&amp;F::operator())))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>call</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gab520b647b2d0eb0971ed651c14dacb2f</anchor>
      <arglist>(Core dest, M mutex, F func) -&gt; decltype(func(mutex()))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>call_suspendable</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>ga92ca4e1cd9db98279ded5e3a55ff96f1</anchor>
      <arglist>(Core dest, F func) -&gt; decltype(func())</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>ga3e28e8fd8f1a8a22beca2301cb24a639</anchor>
      <arglist>(GlobalAddress&lt; T &gt; target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>ga13cb46277cd2bf8c03ae12952afdcaf4</anchor>
      <arglist>(GlobalAddress&lt; T &gt; target, U value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and_add</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gac416433d8fcb845ba67ef1f3509c1a45</anchor>
      <arglist>(GlobalAddress&lt; T &gt; target, U inc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compare_and_swap</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gafb8dd9514a98fe26b46110a980e25dd9</anchor>
      <arglist>(GlobalAddress&lt; T &gt; target, U cmp_val, V new_val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gacad9d4d47cb0c49667bfdd59c604c100</anchor>
      <arglist>(GlobalAddress&lt; T &gt; target, U inc)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Grappa::Metrics</name>
    <filename>namespace_grappa_1_1_metrics.html</filename>
    <class kind="class">Grappa::Metrics::GlobalQueueMetrics</class>
    <member kind="function">
      <type>void</type>
      <name>histogram_sample</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a932a94933dfd36f2a8afffa047abdc2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>aa152d23452727968868c2a05a8288886</anchor>
      <arglist>(MetricList &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a97bce41e248f7bf674b94d229001c71c</anchor>
      <arglist>(std::ostream &amp;out=std::cerr, MetricList &amp;stats=Grappa::impl::registered_stats(), const std::string &amp;legacy_stats=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge_and_print</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>aca9bbe0e21ee6db2c50a16a71b9de903</anchor>
      <arglist>(std::ostream &amp;out=std::cerr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge_and_dump_to_file</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a5885305b970c9a0361a742944e89b8d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump_stats_blob</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>ad93f838a8ca0402630a4d031edd1acd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>ad8251e7cf8b284d5243193fe2fce306e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_all_cores</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a051474b45ddbc61ef47e127ae9a9effd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_tracing</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a5d1f1b083a1ca74c0a276ffd26fd86cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_tracing_here</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a457a6426f95b5f174fa9fbf952edf5c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop_tracing_here</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a282d9e512fa6d6c465ab6172c241257c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop_tracing</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>acee0592f0f72403e5baf562e074e1f8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>addd864052a4b71fd2cab14978b2af510</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample_all</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a3ab8a511598f810695a65e4cb2472d92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>GlobalQueueMetrics</type>
      <name>global_queue_stats</name>
      <anchorfile>namespace_grappa_1_1_metrics.html</anchorfile>
      <anchor>a7304e687e2e7286e11d10ff14e4534bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Grappa::SharedMessagePool</name>
    <filename>namespace_grappa_1_1_shared_message_pool.html</filename>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga10f9c1f8a7a57a03d877938950bb97ac</anchor>
      <arglist>(impl::MessageBase *m, size_t sz)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>estimate_footprint</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gad2eeab83740d1071de86dd136d4f6e6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>adjust_footprint</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga7eebf9c77f58cdb967f14e1967adcc03</anchor>
      <arglist>(size_t target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga2b310467dda74e5fcf6c08d78d557b35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga977387ef51f496d550fab32712db2e24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>alloc</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gad187f11c851c22ee5b3e8032f0e6521b</anchor>
      <arglist>(size_t sz)</arglist>
    </member>
    <member kind="variable">
      <type>struct aligned_pool_allocator</type>
      <name>message_pool</name>
      <anchorfile>namespace_grappa_1_1_shared_message_pool.html</anchorfile>
      <anchor>ac25c60f4d10243b169b72561dc71c852</anchor>
      <arglist>[MAX_POOL_CACHELINE_COUNT]</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Grappa::util</name>
    <filename>namespace_grappa_1_1util.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>array_str</name>
      <anchorfile>namespace_grappa_1_1util.html</anchorfile>
      <anchor>a19d27cd8d71afb0f1ca5776a75a79029</anchor>
      <arglist>(const char *name, GlobalAddress&lt; T &gt; base, size_t nelem, int width=10)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>array_str</name>
      <anchorfile>namespace_grappa_1_1util.html</anchorfile>
      <anchor>a00103342fcbb6d332a7b81bb78580873</anchor>
      <arglist>(const char *name, const ArrayT &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>array_str</name>
      <anchorfile>namespace_grappa_1_1util.html</anchorfile>
      <anchor>a0a541dff94ebbd72f0688bc28ca73af0</anchor>
      <arglist>(const ArrayT &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>SimpleIterator&lt; T &gt;</type>
      <name>iterate</name>
      <anchorfile>namespace_grappa_1_1util.html</anchorfile>
      <anchor>a45541aa096aa0d2f1ebab8cbee45cb71</anchor>
      <arglist>(T *base=nullptr, size_t nelem=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>array_str</name>
      <anchorfile>namespace_grappa_1_1util.html</anchorfile>
      <anchor>ace2248983db7928d0972221f9ae40e15</anchor>
      <arglist>(const char *name, T *base, size_t nelem)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Memory</name>
    <title>Memory</title>
    <filename>group___memory.html</filename>
    <namespace>Grappa</namespace>
    <class kind="class">GlobalAddress</class>
    <class kind="struct">LocalIterator</class>
    <member kind="define">
      <type>#define</type>
      <name>symmetric_static</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga14abf73b97a5832e89ae5a5249fdbbdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>gaeead849cdf965a0bc4f0accf096e66b6</anchor>
      <arglist>(const GlobalAddress&lt; T &gt; &amp;t, ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>gae2c394b001322028c94daf7c883c6173</anchor>
      <arglist>(const GlobalAddress&lt; T &gt; &amp;t, ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>ptrdiff_t</type>
      <name>operator-</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga541389b4e363bf01b4b0e9ed7795a20a</anchor>
      <arglist>(const GlobalAddress&lt; T &gt; &amp;t, const GlobalAddress&lt; T &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>ptrdiff_t</type>
      <name>operator-&lt; char &gt;</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga02b83a095a10c1d97f9add500d9469b6</anchor>
      <arglist>(const GlobalAddress&lt; char &gt; &amp;t, const GlobalAddress&lt; char &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>make_global</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga1e59ed1442678e969abd5d48d3b201b5</anchor>
      <arglist>(T *t, Core n=global_communicator.mycore)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; T &gt;</type>
      <name>make_linear</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga02b820d58225c1e85b8720ddc6bc302c</anchor>
      <arglist>(T *t)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga35726ea1da86d2da1316d5879384f3ff</anchor>
      <arglist>(std::ostream &amp;o, const GlobalAddress&lt; T &gt; &amp;ga)</arglist>
    </member>
    <member kind="function">
      <type>GlobalAddress&lt; M &gt;</type>
      <name>global_pointer_to_member</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga04f633209f68d7b4e693b5daca5cb2e8</anchor>
      <arglist>(const GlobalAddress&lt; T &gt; t, const M T::*m)</arglist>
    </member>
    <member kind="function">
      <type>LocalIterator&lt; T &gt;</type>
      <name>iterate_local</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga03416da22fab8a809225f2a903eaa0d0</anchor>
      <arglist>(GlobalAddress&lt; T &gt; base, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>locale_alloc</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga513650f0aa54bcb773e4d661ce46c775</anchor>
      <arglist>(size_t n=1)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>locale_alloc_aligned</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga61d5d896a65487f41e9a7533288ec660</anchor>
      <arglist>(size_t alignment, size_t n=1)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>locale_new</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>gab40a94f8698c8ad032dab7cf67cc26cf</anchor>
      <arglist>(Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>locale_new</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga05e445a68ba363b9639c11ffcc9c8373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>locale_new_array</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>ga43aafa32c14634d7f6f7faf54ed5c1c3</anchor>
      <arglist>(size_t n=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>locale_free</name>
      <anchorfile>group___memory.html</anchorfile>
      <anchor>gaa4a3a0de4cfe636ab80665337cc8d7b0</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Containers</name>
    <title>Containers</title>
    <filename>group___containers.html</filename>
    <namespace>Grappa::util</namespace>
    <class kind="class">Grappa::SuspendedDelegateQueue</class>
    <class kind="struct">Grappa::GlobalVector::Master</class>
    <class kind="struct">Grappa::GlobalVector::Proxy</class>
    <class kind="struct">Grappa::GlobalVector::Range</class>
    <class kind="class">Grappa::GlobalVector</class>
    <member kind="function">
      <type>void</type>
      <name>memset</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>gac5a9df86f535f81420219d9dfcab5584</anchor>
      <arglist>(GlobalAddress&lt; T &gt; base, S value, size_t count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memset</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>gadf1e28a91749a97c58d6b1db21d2d607</anchor>
      <arglist>(T *base, S value, size_t count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memcpy</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>ga8b39e2df966b32aea640b93e3c5b502c</anchor>
      <arglist>(GlobalAddress&lt; T &gt; dst, GlobalAddress&lt; T &gt; src, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memcpy</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>ga203f1b78785e927f8cb1fbfe262de33e</anchor>
      <arglist>(T *dst, T *src, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memcpy&lt; void &gt;</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>ga66050c7210e15962b855d514842c3a88</anchor>
      <arglist>(void *dst, void *src, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memcpy_async</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>ga97ac566b2b1886d9c51123ddd9a2eede</anchor>
      <arglist>(GlobalAddress&lt; T &gt; dst, GlobalAddress&lt; T &gt; src, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prefix_sum</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>ga257b0d2c3a3432a0f1f8c6037390e3d2</anchor>
      <arglist>(GlobalAddress&lt; T &gt; array, size_t nelem)</arglist>
    </member>
    <member kind="variable">
      <type>const Core</type>
      <name>MASTER</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>gae214c4f2d33524de8eb8bc336d6f6a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>class Grappa::GlobalBag</type>
      <name>GRAPPA_BLOCK_ALIGNED</name>
      <anchorfile>group___containers.html</anchorfile>
      <anchor>gabbe1235a6aa33dbc8145efff8a0c4cd7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Delegates</name>
    <title>Delegates</title>
    <filename>group___delegates.html</filename>
    <namespace>Grappa::delegate</namespace>
    <class kind="class">Grappa::delegate::Promise</class>
    <class kind="class">Grappa::delegate::FetchAddCombiner</class>
    <member kind="define">
      <type>#define</type>
      <name>AUTO_INVOKE</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>ga9ae164bf8292c7e6e34286e77864fcf9</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>call</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>ga9314cb77365ab51d6fe4772c611921bc</anchor>
      <arglist>(Core dest, F f) -&gt; AUTO_INVOKE((impl::Specializer&lt; S, C, F &gt;::call(dest, f,&amp;F::operator())))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>call</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gab06aabe93dc0639eb0fe5f7108264ff2</anchor>
      <arglist>(GlobalAddress&lt; T &gt; t, F func) -&gt; AUTO_INVOKE((impl::call&lt; S, C &gt;(t, func,&amp;F::operator())))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>call</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gab520b647b2d0eb0971ed651c14dacb2f</anchor>
      <arglist>(Core dest, M mutex, F func) -&gt; decltype(func(mutex()))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>call_suspendable</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>ga92ca4e1cd9db98279ded5e3a55ff96f1</anchor>
      <arglist>(Core dest, F func) -&gt; decltype(func())</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>read</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>ga3e28e8fd8f1a8a22beca2301cb24a639</anchor>
      <arglist>(GlobalAddress&lt; T &gt; target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>ga13cb46277cd2bf8c03ae12952afdcaf4</anchor>
      <arglist>(GlobalAddress&lt; T &gt; target, U value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and_add</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gac416433d8fcb845ba67ef1f3509c1a45</anchor>
      <arglist>(GlobalAddress&lt; T &gt; target, U inc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FetchAddCombiner</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gadd59416bfe7da3345a7e68ef6f2e5e0e</anchor>
      <arglist>(GlobalAddress&lt; T &gt; target, uint64_t flush_threshold, U initVal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>promise</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gad94c25c215ee615549a1f5022fff35d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fetch_and_add</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gaa47ad9d06ff6b28ac7ec84f30ba04796</anchor>
      <arglist>(U inc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compare_and_swap</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gafb8dd9514a98fe26b46110a980e25dd9</anchor>
      <arglist>(GlobalAddress&lt; T &gt; target, U cmp_val, V new_val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gacad9d4d47cb0c49667bfdd59c604c100</anchor>
      <arglist>(GlobalAddress&lt; T &gt; target, U inc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawnRemote</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gac3b9a55615b0754717c2b20ef63044c2</anchor>
      <arglist>(Core dest, F f)</arglist>
    </member>
    <member kind="function">
      <type>Worker *</type>
      <name>current_worker</name>
      <anchorfile>group___delegates.html</anchorfile>
      <anchor>gad7f339c8363a6361960ecbc10d9c7a33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Synchronization</name>
    <title>Synchronization</title>
    <filename>group___synchronization.html</filename>
    <class kind="class">Grappa::CompletionEvent</class>
    <class kind="class">Grappa::ConditionVariable</class>
    <class kind="class">Grappa::CountingSemaphore</class>
    <class kind="class">Grappa::FullEmpty</class>
    <class kind="struct">Grappa::CompletionTarget</class>
    <class kind="class">Grappa::GlobalCompletionEvent</class>
    <member kind="function">
      <type>void</type>
      <name>barrier</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gab6c76d75bef0d7b03eb1b9b8ded580d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complete</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gad0f5511c9e55d6d5cd3add33bf00d527</anchor>
      <arglist>(CompletionType *ce)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complete</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga4ba30941b3c166c8eeeee3d31a438d35</anchor>
      <arglist>(GlobalAddress&lt; CompletionEvent &gt; ce, int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enroll</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga10fe6e2ee5bf5a8d8e9f9fd11dfee5cb</anchor>
      <arglist>(GlobalAddress&lt; CompletionEvent &gt; ce, int64_t incr=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gad28a884076dc9b8914e694d245b03bf8</anchor>
      <arglist>(CompletionEvent *ce, TF tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga0e49ee2c2ae50e793e427b0fcfa842f9</anchor>
      <arglist>(GlobalAddress&lt; ConditionVariable &gt; m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signal</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gabcf3b681a173156001dc47e12c081de9</anchor>
      <arglist>(const GlobalAddress&lt; ConditionVariable &gt; m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signal_all</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga37a246c9cb77c17a88a376ce83bbcb93</anchor>
      <arglist>(GlobalAddress&lt; ConditionVariable &gt; m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_waiter</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga32f0284539cca3dc00915931b86a1cb3</anchor>
      <arglist>(ConditionVariable *cv, Worker *w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga4241b1cbe305caf3ca08d2fea8468edf</anchor>
      <arglist>(ConditionVariable *cv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signal</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga6f13ef84c9e8693d675d10428cf6c776</anchor>
      <arglist>(ConditionVariable *cv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broadcast</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga7cf72c5ef30262df14f5406d790dc798</anchor>
      <arglist>(ConditionVariable *cv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill_remote</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga08cc992debd2459c04c2412361cb72f7</anchor>
      <arglist>(GlobalAddress&lt; FullEmpty&lt; T &gt;&gt; result_addr, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readFF</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga9cef2af61c52a6bea65625de747ca8b3</anchor>
      <arglist>(GlobalAddress&lt; FullEmpty&lt; T &gt;&gt; fe_addr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeXF</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga27dbd4448ca94a3d7b58759f4288c6e6</anchor>
      <arglist>(GlobalAddress&lt; FullEmpty&lt; T &gt;&gt; fe_addr, const U &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>writeXF</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gad306de5c289de2f249e814551a62d85b</anchor>
      <arglist>(FullEmpty&lt; T &gt; *fe_addr, T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>writeEF</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga63f6c01b0bc1fbb8f3a8b01177257bca</anchor>
      <arglist>(FullEmpty&lt; T &gt; *fe_addr, T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>writeFF</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga952c1e020c17e0264d3d738df66f3f8e</anchor>
      <arglist>(FullEmpty&lt; T &gt; *fe_addr, T t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readXX</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gacb97e74af74ce0b9b664ea681d8f9b91</anchor>
      <arglist>(FullEmpty&lt; T &gt; *fe_addr)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readFF</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga38a19bdec882607fc363f0880fe6b954</anchor>
      <arglist>(FullEmpty&lt; T &gt; *fe_addr)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readFE</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga25fe08f26290a226f10c329e1102a5b6</anchor>
      <arglist>(FullEmpty&lt; T &gt; *fe_addr)</arglist>
    </member>
    <member kind="function">
      <type>CompletionTarget</type>
      <name>enroll</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga07bd1fb10deeb37fdaec5d0494be0d8a</anchor>
      <arglist>(GlobalAddress&lt; GlobalCompletionEvent &gt; ce, int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complete</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga6537761b39f5595a3d754483061a763c</anchor>
      <arglist>(GlobalAddress&lt; GlobalCompletionEvent &gt; ce, int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga0ea422ccad00a9098e197c9e8c9951db</anchor>
      <arglist>(Semaphore *s, int64_t incr=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrement</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga440cce540d8b12c421c3c48c133c8ab8</anchor>
      <arglist>(Semaphore *s, int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_decrement</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga80fcd0303be8f096417ed05a4f46cb78</anchor>
      <arglist>(Semaphore *s, int64_t decr=1)</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>get_value</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>gaaa921e944ca0d46b3cd144add50d273b</anchor>
      <arglist>(Semaphore *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_completion</name>
      <anchorfile>group___synchronization.html</anchorfile>
      <anchor>ga6b8e8e7035b2e57a779a02ec835fc24f</anchor>
      <arglist>(Core origin, int64_t decr=1)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Caches</name>
    <title>Caches</title>
    <filename>group___caches.html</filename>
    <class kind="class">CacheRO</class>
    <class kind="class">CacheRW</class>
    <class kind="class">CacheWO</class>
    <class kind="struct">Incoherent</class>
  </compound>
  <compound kind="group">
    <name>Utility</name>
    <title>Utility</title>
    <filename>group___utility.html</filename>
    <namespace>Grappa</namespace>
    <namespace>Grappa::Metrics</namespace>
    <class kind="class">Grappa::CallbackMetric</class>
    <class kind="struct">Grappa::File</class>
    <class kind="struct">Grappa::IODescriptor</class>
    <class kind="class">Grappa::MaxMetric</class>
    <class kind="class">Grappa::PoolAllocator</class>
    <class kind="class">Grappa::PoolAllocatorInternal</class>
    <class kind="class">Grappa::StringMetric</class>
    <member kind="define">
      <type>#define</type>
      <name>CHECK_NULL</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga952291ef59162657730ba72ba3404697</anchor>
      <arglist>(val)                                                                                        </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DCHECK_NULL</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga53dbb05139f72292ff0b79870282ec2d</anchor>
      <arglist>(val)                                            </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MPI_CHECK</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga3780b63a8c0bbf5be602f5a569fb469d</anchor>
      <arglist>(mpi_call)                                                                                  </arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_DEFINE_METRIC</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gaca7bf381c18a5f791155eb129c726fe7</anchor>
      <arglist>(type, name, arg1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GRAPPA_DECLARE_METRIC</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga7f5ece86809bb5821095e992bf94f924</anchor>
      <arglist>(type, name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>typename_of</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gafcbdfaa9de31d679a52eda38a521cec5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>typename_of</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga3d051099836ebef97277941196c527eb</anchor>
      <arglist>(const T &amp;unused)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>File</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gade155f830ecf40c2dda6ffcef53e9e33</anchor>
      <arglist>(const char *fname, bool asDirectory, size_t offset=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>File</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga02ff9302ac2bec88e5f6aa523861b1fe</anchor>
      <arglist>(const char *fname, size_t offset=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IODescriptor</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga658e5f65d2c0c6cf93b59698b70f9ba0</anchor>
      <arglist>(int file_desc=0, size_t file_offset=0, void *buffer=NULL, size_t bufsize=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>file</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga002cf51a7ce5e8b8c6d1be90ade2d1ae</anchor>
      <arglist>(int file_desc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buf</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga48287e795699dad6d86e88e61480f84a</anchor>
      <arglist>(void *buf, size_t nbytes)</arglist>
    </member>
    <member kind="function">
      <type>volatile void *</type>
      <name>buf</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga03d43615d55e690125fa36583e5877f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nbytes</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga3075a96f173e9c3357201a3632a2b73d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nelems</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gade197b5f8e1feccd1dd7b58430c292eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>offset</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga01acc94b9212dccc9ff78ef88dd21bb9</anchor>
      <arglist>(size_t of)</arglist>
    </member>
    <member kind="function">
      <type>struct aiocb *</type>
      <name>desc_ptr</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga4a1063db87f48acce1c8fc312ca7a1b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>block_on_read</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga9b6f6c3491b93f30fe982e92725b3c48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle_completion</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga6e6849d621c8c5eed455745b260a5cfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_array</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga28fe44710a582b4534c81eef84596476</anchor>
      <arglist>(File &amp;f, GlobalAddress&lt; T &gt; array, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_array</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga2723b0cec7b9cdd83715bc383bbeb310</anchor>
      <arglist>(File &amp;f, bool asDirectory, GlobalAddress&lt; T &gt; array, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_array_unordered</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gaa36ea6df58c48bf54c2fd59547c890e0</anchor>
      <arglist>(std::string filename, GlobalAddress&lt; T &gt; array, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_array_unordered</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga3d61348ea7920b020f10f2ec89cd18d2</anchor>
      <arglist>(std::string filename, GlobalAddress&lt; T &gt; array, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga7506f8eee493c73c91c5beeb016b7111</anchor>
      <arglist>(std::ostream &amp;o, const Grappa::impl::MetricBase &amp;stat)</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>fname</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga62c269fea157d784f7076e4d0f1039e1</anchor>
      <arglist>[FNAME_LENGTH]</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isDirectory</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga03b16a4beb0230a08d5a3736bca1d6cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>offset</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga362d35b1201d2710f69f9adc792644d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct Grappa::File</type>
      <name>__attribute__</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gadd65fbbf5adaf182e37952d3d6618567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>complete</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gab13d007365f73179e1dc438cef07ebe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConditionVariable</type>
      <name>cv</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga5663d091d037d1c15dfbcb8353e11bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct aiocb</type>
      <name>ac</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga6f655b8428c094abf7f91d73200fb9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IODescriptor *</type>
      <name>nextCompleted</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>ga2b91048b8777242ab44ab894d3fae094</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IODescriptor *</type>
      <name>aio_completed_stack</name>
      <anchorfile>group___utility.html</anchorfile>
      <anchor>gae02ceb162ea993d1710f3095058229f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Collectives</name>
    <title>Collectives</title>
    <filename>group___collectives.html</filename>
    <member kind="function">
      <type>void</type>
      <name>call_on_all_cores</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>ga34aff137286f631648c195112fcfb8ad</anchor>
      <arglist>(F work)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_all_cores</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gac74a2d7ffb5b36ec6833ebfc54c16841</anchor>
      <arglist>(F work)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>allreduce</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gaf8f3fd1aa6b179823dde8e88dab682f8</anchor>
      <arglist>(T myval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allreduce_inplace</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gabd3ee93956b1a6047d45d2e93f2e0b1e</anchor>
      <arglist>(T *array, size_t nelem=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reduce</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gaacc2618bb00fc9fbbf6b154a9258d18a</anchor>
      <arglist>(const T *global_ptr)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reduce</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gaf13e242540fe6c651385acaf94d42c83</anchor>
      <arglist>(GlobalAddress&lt; T &gt; localizable)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>reduce</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gaed4325271e72af888ce395fba4ca1380</anchor>
      <arglist>(GlobalAddress&lt; P &gt; localizable)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sum_all_cores</name>
      <anchorfile>group___collectives.html</anchorfile>
      <anchor>gaf37d649567600743d463fb077cc2c6d8</anchor>
      <arglist>(F func) -&gt; decltype(func())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Communication</name>
    <title>Communication</title>
    <filename>group___communication.html</filename>
    <namespace>Grappa::SharedMessagePool</namespace>
    <class kind="class">Grappa::Message</class>
    <class kind="class">Grappa::PayloadMessage</class>
    <class kind="class">Grappa::MessagePoolStatic</class>
    <class kind="class">Grappa::MessagePool</class>
    <class kind="class">Grappa::ReuseMessage</class>
    <class kind="class">Grappa::ReuseMessageList</class>
    <member kind="function">
      <type>const Core</type>
      <name>cores</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga555f2bf877bea827ace1d7c969b763f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Core</type>
      <name>mycore</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gad7a90083b28f17590bdcb069172f33f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Core</type>
      <name>locale_cores</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga267489699cd07db87caa07c9784dbac5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Core</type>
      <name>locale_mycore</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga807b9abe099d881ca3b479a1ff95a514</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Locale</type>
      <name>locales</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga530158645b7b2b52a268daedf44d0fd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Locale</type>
      <name>mylocale</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga25ad3b51e8430df89259e1c65526e2e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Locale</type>
      <name>locale_of</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gaebb0c9c0eb25b74767305df3ae81915a</anchor>
      <arglist>(Core c)</arglist>
    </member>
    <member kind="function">
      <type>Grappa::Message Grappa::impl::MessageBase</type>
      <name>__attribute__</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gacabc44d6011d9326224811e47a96a6ef</anchor>
      <arglist>((aligned(64)))</arglist>
    </member>
    <member kind="function">
      <type>Message&lt; T &gt;</type>
      <name>message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga1b0faf3e8ee3ef69117c14c5d4547396</anchor>
      <arglist>(Core dest, T t)</arglist>
    </member>
    <member kind="function">
      <type>PayloadMessage&lt; T &gt;</type>
      <name>message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gab3bb6fb2dcd4b3e39012d2bdbb475267</anchor>
      <arglist>(Core dest, T t, void *payload, size_t payload_size)</arglist>
    </member>
    <member kind="function">
      <type>Message&lt; T &gt;</type>
      <name>send_message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga528d3be2db6c7577613bba8b60bf01d3</anchor>
      <arglist>(Core dest, T t)</arglist>
    </member>
    <member kind="function">
      <type>PayloadMessage&lt; T &gt;</type>
      <name>send_message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga6e65f7faed0d5d92611442f9b46cb3e8</anchor>
      <arglist>(Core dest, T t, void *payload, size_t payload_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga2b310467dda74e5fcf6c08d78d557b35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga977387ef51f496d550fab32712db2e24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>estimate_footprint</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gad2eeab83740d1071de86dd136d4f6e6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>adjust_footprint</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga7eebf9c77f58cdb967f14e1967adcc03</anchor>
      <arglist>(size_t target)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>alloc</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gad187f11c851c22ee5b3e8032f0e6521b</anchor>
      <arglist>(size_t sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga10f9c1f8a7a57a03d877938950bb97ac</anchor>
      <arglist>(impl::MessageBase *m, size_t sz)</arglist>
    </member>
    <member kind="function">
      <type>Message&lt; T &gt; *</type>
      <name>heap_message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga02e73aabbd5b68bc579361d6373abae1</anchor>
      <arglist>(Core dest, T t)</arglist>
    </member>
    <member kind="function">
      <type>PayloadMessage&lt; T &gt; *</type>
      <name>heap_message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga4037ea3ff68f1f75cca95bbc4265d0bd</anchor>
      <arglist>(Core dest, T t, void *payload, size_t payload_size)</arglist>
    </member>
    <member kind="function">
      <type>Message&lt; T &gt; *</type>
      <name>send_heap_message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>gae63d3f9cc55e63791365cd2d1811aa29</anchor>
      <arglist>(Core dest, T t)</arglist>
    </member>
    <member kind="function">
      <type>PayloadMessage&lt; T &gt; *</type>
      <name>send_heap_message</name>
      <anchorfile>group___communication.html</anchorfile>
      <anchor>ga0b75498515ae24362c7ae4f383d7a7d3</anchor>
      <arglist>(Core dest, T t, void *payload, size_t payload_size)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Tasking</name>
    <title>Tasking</title>
    <filename>group___tasking.html</filename>
    <member kind="function">
      <type>void</type>
      <name>spawn</name>
      <anchorfile>group___tasking.html</anchorfile>
      <anchor>ga870395edc072b708200abb3d2e58bd04</anchor>
      <arglist>(TF tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>privateTask</name>
      <anchorfile>group___tasking.html</anchorfile>
      <anchor>gaf80429bfcdf0167257fdc0fcc02842fb</anchor>
      <arglist>(TF tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>publicTask</name>
      <anchorfile>group___tasking.html</anchorfile>
      <anchor>gac76febfd95f119e47f8d2b77ba779669</anchor>
      <arglist>(TF tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_worker</name>
      <anchorfile>group___tasking.html</anchorfile>
      <anchor>ga1de878db1bbbe31c277e36f9ca7bee47</anchor>
      <arglist>(TF &amp;&amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn</name>
      <anchorfile>group___tasking.html</anchorfile>
      <anchor>gafa22065aa5dcd33b21d43655c8e27d0a</anchor>
      <arglist>(F f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>group___tasking.html</anchorfile>
      <anchor>ga1fa04570855ffc3d360a5264f950eb24</anchor>
      <arglist>(FP fp)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Graph</name>
    <title>Graph</title>
    <filename>group___graph.html</filename>
    <class kind="struct">Grappa::Empty</class>
    <class kind="struct">Grappa::Graph::Edge</class>
    <class kind="struct">Grappa::Graph</class>
    <class kind="struct">Grappa::AdjIterator</class>
    <member kind="define">
      <type>#define</type>
      <name>OVERLOAD</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>ga654bb1c090bb3ceb861a4bfd74ac0bb3</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="typedef">
      <type>int64_t</type>
      <name>VertexID</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>gaba4880159fa2d1b4192538c5eee688fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AdjIterator&lt; G &gt;</type>
      <name>adj</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>ga6c416928a252552a745cd34526ecbf65</anchor>
      <arglist>(GlobalAddress&lt; G &gt; g, typename G::Vertex &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>AdjIterator&lt; G &gt;</type>
      <name>adj</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>ga54fb566e36dd360c4c595119840be672</anchor>
      <arglist>(GlobalAddress&lt; G &gt; g, GlobalAddress&lt; typename G::Vertex &gt; v)</arglist>
    </member>
    <member kind="function">
      <type>AdjIterator&lt; G &gt;</type>
      <name>adj</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>gad77bb4adddd0480478286d854c059aef</anchor>
      <arglist>(GlobalAddress&lt; G &gt; g, VertexID i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OVERLOAD</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>ga6c5d34aaf9546af9ce313a801e5934c4</anchor>
      <arglist>(SyncMode S=SyncMode::Blocking, GlobalCompletionEvent *C=&amp;impl::local_gce, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OVERLOAD</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>ga6ab22aa2cf82e7d4a56b4986263df8ac</anchor>
      <arglist>(GlobalCompletionEvent *C, SyncMode S=SyncMode::Blocking, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serial_for</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>ga1ba15c6220aea3dc5b3efbf1fdd795a2</anchor>
      <arglist>(AdjIterator&lt; G &gt; a, F body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forall</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>gac20551e77df87ef6621f445a2eb52159</anchor>
      <arglist>(GlobalAddress&lt; Graph&lt; V, E &gt;&gt; g, F loop_body)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalAddress&lt; Graph &gt;</type>
      <name>create</name>
      <anchorfile>group___graph.html</anchorfile>
      <anchor>ga6c22cb15edc0d527a4b7c08e235b6aff</anchor>
      <arglist>(const TupleGraph &amp;tg, bool directed=false, bool solo_invalid=true)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Loops</name>
    <title>Loops</title>
    <filename>group___loops.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>FORALL_HERE_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga26d8f38beec11c2ac6ca0dcb21d61535</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FORALL_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga496ac706b889a39151f5f230e1293c1e</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type>GlobalCompletionEvent &amp;</type>
      <name>default_gce</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga13d0c5158646eeaac0bdcbe406abffe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forall_here</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gabbb9de70beb4444082d136d65c1ad22a</anchor>
      <arglist>(int64_t start, int64_t iters, F loop_body)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_HERE_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga52fb488a99dbaa95c3b9d02bd3f6afc2</anchor>
      <arglist>(TaskMode B, SyncMode S=SyncMode::Blocking, GlobalCompletionEvent *GCE=nullptr, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_HERE_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga6b706f6f75a9db4ad7c563aaddcab2a4</anchor>
      <arglist>(SyncMode S, GlobalCompletionEvent *GCE, TaskMode B=TaskMode::Bound, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_HERE_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga3d9ca6ee1346a410f561463173d54d20</anchor>
      <arglist>(SyncMode S, GlobalCompletionEvent *GCE, int64_t Threshold, TaskMode B=TaskMode::Bound)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_HERE_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gaabdbef5ebe07bd8e56ffb499e5f83bf0</anchor>
      <arglist>(GlobalCompletionEvent *GCE, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG, TaskMode B=TaskMode::Bound, SyncMode S=SyncMode::Blocking)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_HERE_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gab9fa3386ab8032333b1e9bc2ccd1a54b</anchor>
      <arglist>(int64_t Threshold, GlobalCompletionEvent *GCE=nullptr, TaskMode B=TaskMode::Bound, SyncMode S=SyncMode::Blocking)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga46e720d695f9b662f0f78724838417e0</anchor>
      <arglist>(TaskMode B=TaskMode::Bound, SyncMode S=SyncMode::Blocking, GlobalCompletionEvent *C=&amp;impl::local_gce, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga53f1a7c4703aae6e51f8d1ed6a2ce7fa</anchor>
      <arglist>(SyncMode S, TaskMode B=TaskMode::Bound, GlobalCompletionEvent *C=&amp;impl::local_gce, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga80c2d6b9782cc07da723a36929dbe996</anchor>
      <arglist>(GlobalCompletionEvent *C, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG, TaskMode B=TaskMode::Bound, SyncMode S=SyncMode::Blocking)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gac78f2e294c32a361e93bb3d1aec4cb66</anchor>
      <arglist>(int64_t Threshold, GlobalCompletionEvent *C=&amp;impl::local_gce, TaskMode B=TaskMode::Bound, SyncMode S=SyncMode::Blocking)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FORALL_OVERLOAD</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>ga4c51943d29119ebd9c68e580d7d6061f</anchor>
      <arglist>(TaskMode B, GlobalCompletionEvent *C, SyncMode S=SyncMode::Blocking, int64_t Threshold=impl::USE_LOOP_THRESHOLD_FLAG)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Core, Core &gt;</type>
      <name>cores_with_elements</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gae0930fb0b5ce9c40ceb40f26e5c3be4a</anchor>
      <arglist>(GlobalAddress&lt; T &gt; base, size_t nelem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>on_cores_localized_async</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gadf2bb62c4a3ba1ae301a59dbec04cda7</anchor>
      <arglist>(GlobalAddress&lt; T &gt; base, int64_t nelems, F do_on_core)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forall</name>
      <anchorfile>group___loops.html</anchorfile>
      <anchor>gaaa1df0d48a6d67442b59fc06c16e9c33</anchor>
      <arglist>(GlobalAddress&lt; T &gt; base, int64_t nelems, F loop_body)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Grappa: Developer Documentation</title>
    <filename>index</filename>
  </compound>
</tagfile>
